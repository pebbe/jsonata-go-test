	--- .../groups/array-constructor/array-sequences.json
	--- .../groups/array-constructor/array-sequences.json
EXPECTED:
[
  [
    3,
    1578381600
  ]
]
GOT:
[
  3,
  1578381600
]
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     []interface {}{
        map[string]interface {}{
            "epochSeconds": float64(1.5783816e+09),
            "value":        float64(3),
        },
    },
    Dataset:     "",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "$.[value,epochSeconds][]",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        []interface {}{
            float64(3),
            float64(1.5783816e+09),
        },
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/array-constructor/array-sequences.json
	--- .../groups/array-constructor/array-sequences.json
	--- .../groups/array-constructor/array-sequences.json
	--- .../groups/array-constructor/case000.json
	--- .../groups/array-constructor/case001.json
	--- .../groups/array-constructor/case002.json
	--- .../groups/array-constructor/case003.json
	--- .../groups/array-constructor/case004.json
	--- .../groups/array-constructor/case005.json
	--- .../groups/array-constructor/case006.json
EXPECTED:
[
  1,
  2,
  [
    "three",
    "four"
  ]
]
GOT:
[
  1,
  [
    "three"
  ]
]
&main.TestT{
    Bindings: map[string]interface {}{
        "four": "four",
        "two":  float64(2),
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:     "dataset5",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "[1, $two, [\"three\", $four]]",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        float64(1),
        float64(2),
        []interface {}{
            "three",
            "four",
        },
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/array-constructor/case007.json
	--- .../groups/array-constructor/case008.json
	--- .../groups/array-constructor/case009.json
	--- .../groups/array-constructor/case010.json
	--- .../groups/array-constructor/case011.json
	--- .../groups/array-constructor/case012.json
	--- .../groups/array-constructor/case013.json
	--- .../groups/array-constructor/case014.json
	--- .../groups/array-constructor/case015.json
/home/peter/talen/jsonata/tests.go:113: invalid path step "Alternative.Address": paths cannot contain nulls, strings, numbers or booleans, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Address": map[string]interface {}{
            "City":     "Winchester",
            "Postcode": "SO21 2JN",
            "Street":   "Hursley Park",
        },
        "Age":   float64(28),
        "Email": []interface {}{
            map[string]interface {}{
                "address": []interface {}{
                    "fred.smith@my-work.com",
                    "fsmith@my-work.com",
                },
                "type": "work",
            },
            map[string]interface {}{
                "address": []interface {}{
                    "freddy@my-social.com",
                    "frederic.smith@very-serious.com",
                },
                "type": "home",
            },
        },
        "FirstName": "Fred",
        "Other":     map[string]interface {}{
            "Alternative.Address": map[string]interface {}{
                "City":     "London",
                "Postcode": "E1 6RF",
                "Street":   "Brick Lane",
            },
            "Misc":      nil,
            "Over 18 ?": bool(true),
        },
        "Phone": []interface {}{
            map[string]interface {}{
                "number": "0203 544 1234",
                "type":   "home",
            },
            map[string]interface {}{
                "number": "01962 001234",
                "type":   "office",
            },
            map[string]interface {}{
                "number": "01962 001235",
                "type":   "office",
            },
            map[string]interface {}{
                "number": "077 7700 1234",
                "type":   "mobile",
            },
        },
        "Surname": "Smith",
    },
    Dataset:     "dataset1",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "[Address, Other.\"Alternative.Address\"].City",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        "Winchester",
        "London",
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/array-constructor/case016.json
	--- .../groups/array-constructor/case017.json
	--- .../groups/array-constructor/case018.json
	--- .../groups/array-constructor/case019.json
	--- .../groups/array-constructor/case020.json
	--- .../groups/blocks/case000.json
	--- .../groups/blocks/case001.json
	--- .../groups/blocks/case002.json
	--- .../groups/blocks/case003.json
	--- .../groups/blocks/case004.json
	--- .../groups/blocks/case005.json
	--- .../groups/blocks/case006.json
	--- .../groups/boolean-expresssions/case000.json
	--- .../groups/boolean-expresssions/case001.json
	--- .../groups/boolean-expresssions/case002.json
	--- .../groups/boolean-expresssions/case003.json
	--- .../groups/boolean-expresssions/case004.json
	--- .../groups/boolean-expresssions/case005.json
	--- .../groups/boolean-expresssions/case006.json
	--- .../groups/boolean-expresssions/case007.json
	--- .../groups/boolean-expresssions/case008.json
	--- .../groups/boolean-expresssions/case009.json
	--- .../groups/boolean-expresssions/case010.json
	--- .../groups/boolean-expresssions/case011.json
	--- .../groups/boolean-expresssions/case012.json
	--- .../groups/boolean-expresssions/case013.json
	--- .../groups/boolean-expresssions/case014.json
	--- .../groups/boolean-expresssions/case015.json
	--- .../groups/boolean-expresssions/case016.json
	--- .../groups/boolean-expresssions/case017.json
	--- .../groups/boolean-expresssions/case018.json
	--- .../groups/boolean-expresssions/case019.json
	--- .../groups/boolean-expresssions/case020.json
	--- .../groups/boolean-expresssions/case021.json
	--- .../groups/boolean-expresssions/case022.json
	--- .../groups/boolean-expresssions/case023.json
	--- .../groups/boolean-expresssions/case024.json
	--- .../groups/boolean-expresssions/case025.json
	--- .../groups/boolean-expresssions/case026.json
	--- .../groups/boolean-expresssions/case027.json
/home/peter/talen/jsonata/tests.go:131: No results expected, got true, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "",
    Error:           nil,
    Expr:            "$not(nothing)",
    ExprFile:        "",
    Function:        "",
    Result:          nil,
    Timelimit:       0,
    Token:           "",
    UndefinedResult: true,
    Unordered:       false,
}
	--- .../groups/boolean-expresssions/case028.json
/home/peter/talen/jsonata/tests.go:145: unable to cast "" to a number, (eval)
&main.TestT{
    Bindings: nil,
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "foo": "",
    },
    Dataset:         "",
    Depth:           0,
    Description:     "will not evaluate rhs (which would error) because lhs is true",
    Error:           nil,
    Expr:            "foo = '' or $number(foo) = 0",
    ExprFile:        "",
    Function:        "",
    Result:          bool(true),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/boolean-expresssions/case029.json
/home/peter/talen/jsonata/tests.go:145: both sides of the ">" operator must have the same type, (eval)
&main.TestT{
    Bindings: nil,
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "data": "15",
    },
    Dataset:         "",
    Depth:           0,
    Description:     "will not evaluate rhs (which would error) because lhs is false",
    Error:           nil,
    Expr:            "$type(data) = 'number' and data > 10",
    ExprFile:        "",
    Function:        "",
    Result:          bool(false),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/boolean-expresssions/case030.json
	--- .../groups/closures/case000.json
/home/peter/talen/jsonata/tests.go:113: invalid path step "Account Name": paths cannot contain nulls, strings, numbers or booleans, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:     "dataset5",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "Account.(  $AccName := function() { $.\"Account Name\" };  Order[OrderID = \"order104\"].Product{    \"Account\": $AccName(),    \"SKU-\" & $string(ProductID): $.\"Product Name\"  } )",
    ExprFile:    "",
    Function:    "",
    Result:      map[string]interface {}{
        "Account":    "Firefly",
        "SKU-345664": "Cloak",
        "SKU-858383": "Bowler Hat",
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/closures/case001.json
	--- .../groups/comments/case000.json
/home/peter/talen/jsonata/tests.go:113: invalid regular expression * header comment *: missing argument to repetition operator, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category:        "",
    Code:            "",
    Data:            nil,
    Dataset:         "",
    Depth:           0,
    Description:     "",
    Error:           nil,
    Expr:            "/* header comment */\n1 + 1\n",
    ExprFile:        "case000.jsonata",
    Function:        "",
    Result:          float64(2),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/comments/case001.json
/home/peter/talen/jsonata/tests.go:113: expected token ')', got 'start', (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category:        "",
    Code:            "",
    Data:            nil,
    Dataset:         "",
    Depth:           0,
    Description:     "",
    Error:           nil,
    Expr:            "$substring('Hello, world', 0 /* start at index 0 */, 5/*length*/)\n",
    ExprFile:        "case001.jsonata",
    Function:        "",
    Result:          "Hello",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/comments/case002.json
	--- .../groups/comments/case003.json
/home/peter/talen/jsonata/tests.go:113: invalid regular expression * An expression to return the square root of a number without using the $sqrt function *: missing argument to repetition operator, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category:        "",
    Code:            "",
    Data:            float64(256),
    Dataset:         "",
    Depth:           0,
    Description:     "",
    Error:           nil,
    Expr:            "/* An expression to return the square root of a number without using the $sqrt function */\n/* Pointless, but demonstrates capability */\n\n(\n  /**\n   * Implements the square root function\n   * Uses the Newton-Raphson method\n   */\n  $my_sqrt := function($n) {(\n\n    $good_enough := function($guess) {\n      $abs($guess * $guess - $n) < 0.000000000001\n    };\n    $improve_guess := function($guess) {\n      ($guess + $n / $guess) / 2\n    };\n\n    /* Iterate using a tail-recursive function until convergence */\n    $sqrt_iter := function($guess) {\n      $good_enough($guess) ? $guess : $sqrt_iter($improve_guess($guess))\n    };\n    $n >= 0 ? $sqrt_iter(1) : \"no complex numbers today\"\n  )};\n  $my_sqrt($$)\n)\n",
    ExprFile:        "case003.jsonata",
    Function:        "",
    Result:          float64(16),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/comparison-operators/case000.json
	--- .../groups/comparison-operators/case001.json
	--- .../groups/comparison-operators/case002.json
	--- .../groups/comparison-operators/case003.json
	--- .../groups/comparison-operators/case004.json
	--- .../groups/comparison-operators/case005.json
	--- .../groups/comparison-operators/case006.json
	--- .../groups/comparison-operators/case007.json
	--- .../groups/comparison-operators/case008.json
	--- .../groups/comparison-operators/case009.json
	--- .../groups/comparison-operators/case010.json
	--- .../groups/comparison-operators/case011.json
	--- .../groups/comparison-operators/case012.json
	--- .../groups/comparison-operators/case013.json
	--- .../groups/comparison-operators/case014.json
	--- .../groups/comparison-operators/case015.json
	--- .../groups/comparison-operators/case016.json
	--- .../groups/comparison-operators/case017.json
	--- .../groups/comparison-operators/case018.json
	--- .../groups/comparison-operators/case019.json
	--- .../groups/comparison-operators/case020.json
	--- .../groups/comparison-operators/case021.json
	--- .../groups/comparison-operators/case022.json
	--- .../groups/comparison-operators/case023.json
	--- .../groups/comparison-operators/case024.json
	--- .../groups/comparison-operators/case025.json
	--- .../groups/comparison-operators/case026.json
	--- .../groups/comparison-operators/case027.json
/home/peter/talen/jsonata/tests.go:131: No results expected, got false, (eval)
&main.TestT{
    Bindings: nil,
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "",
    Error:           nil,
    Expr:            "3 > $x",
    ExprFile:        "",
    Function:        "",
    Result:          nil,
    Timelimit:       0,
    Token:           "",
    UndefinedResult: true,
    Unordered:       false,
}
	--- .../groups/comparison-operators/case028.json
/home/peter/talen/jsonata/tests.go:131: No results expected, got false, (eval)
&main.TestT{
    Bindings: nil,
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "",
    Error:           nil,
    Expr:            "$x <= 'hello'",
    ExprFile:        "",
    Function:        "",
    Result:          nil,
    Timelimit:       0,
    Token:           "",
    UndefinedResult: true,
    Unordered:       false,
}
	--- .../groups/comparison-operators/deep-equals.json
	--- .../groups/comparison-operators/deep-equals.json
	--- .../groups/comparison-operators/deep-equals.json
	--- .../groups/comparison-operators/deep-equals.json
	--- .../groups/comparison-operators/deep-equals.json
	--- .../groups/comparison-operators/deep-equals.json
	--- .../groups/comparison-operators/deep-equals.json
	--- .../groups/comparison-operators/deep-equals.json
	--- .../groups/comparison-operators/deep-equals.json
	--- .../groups/comparison-operators/deep-equals.json
	--- .../groups/comparison-operators/deep-equals.json
	--- .../groups/comparison-operators/deep-equals.json
	--- .../groups/comparison-operators/deep-equals.json
	--- .../groups/comparison-operators/deep-equals.json
	--- .../groups/comparison-operators/deep-equals.json
	--- .../groups/comparison-operators/deep-equals.json
	--- .../groups/comparison-operators/deep-equals.json
	--- .../groups/comparison-operators/deep-equals.json
	--- .../groups/comparison-operators/deep-equals.json
	--- .../groups/conditionals/case000.json
	--- .../groups/conditionals/case001.json
	--- .../groups/conditionals/case002.json
	--- .../groups/conditionals/case003.json
	--- .../groups/conditionals/case004.json
	--- .../groups/conditionals/case005.json
/home/peter/talen/jsonata/tests.go:131: No results expected, got <nil>, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category:        "",
    Code:            "",
    Data:            "Tuk tuk",
    Dataset:         "",
    Depth:           0,
    Description:     "",
    Error:           nil,
    Expr:            "$lookup({\"Bus\": \"Red\", \"Police Car\": \"White\"}, $$)",
    ExprFile:        "",
    Function:        "",
    Result:          nil,
    Timelimit:       0,
    Token:           "",
    UndefinedResult: true,
    Unordered:       false,
}
	--- .../groups/conditionals/case006.json
	--- .../groups/conditionals/case007.json
	--- .../groups/conditionals/case008.json
	--- .../groups/context/case000.json
	--- .../groups/context/case001.json
	--- .../groups/context/case002.json
	--- .../groups/context/case003.json
/home/peter/talen/jsonata/tests.go:113: invalid path step "Product Name": paths cannot contain nulls, strings, numbers or booleans, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:     "dataset5",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "Account.Order.Product.\"Product Name\".$uppercase().$substringBefore(\" \")",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        "BOWLER",
        "TRILBY",
        "BOWLER",
        "CLOAK",
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/descendent-operator/case000.json
	--- .../groups/descendent-operator/case001.json
	--- .../groups/descendent-operator/case002.json
	--- .../groups/descendent-operator/case003.json
/home/peter/talen/jsonata/tests.go:113: invalid path step "foo": paths cannot contain nulls, strings, numbers or booleans, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "bar": float64(98),
        "foo": map[string]interface {}{
            "bar":  float64(42),
            "blah": []interface {}{
                map[string]interface {}{
                    "baz": map[string]interface {}{
                        "fud": "hello",
                    },
                },
                map[string]interface {}{
                    "baz": map[string]interface {}{
                        "fud": "world",
                    },
                },
                map[string]interface {}{
                    "bazz": "gotcha",
                },
            },
            "blah.baz": "here",
        },
    },
    Dataset:     "dataset0",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "\"foo\".**.fud",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        "hello",
        "world",
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/descendent-operator/case004.json
/home/peter/talen/jsonata/tests.go:113: invalid path step "fud": paths cannot contain nulls, strings, numbers or booleans, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "bar": float64(98),
        "foo": map[string]interface {}{
            "bar":  float64(42),
            "blah": []interface {}{
                map[string]interface {}{
                    "baz": map[string]interface {}{
                        "fud": "hello",
                    },
                },
                map[string]interface {}{
                    "baz": map[string]interface {}{
                        "fud": "world",
                    },
                },
                map[string]interface {}{
                    "bazz": "gotcha",
                },
            },
            "blah.baz": "here",
        },
    },
    Dataset:     "dataset0",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "foo.**.\"fud\"",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        "hello",
        "world",
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/descendent-operator/case005.json
/home/peter/talen/jsonata/tests.go:113: invalid path step "foo": paths cannot contain nulls, strings, numbers or booleans, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "bar": float64(98),
        "foo": map[string]interface {}{
            "bar":  float64(42),
            "blah": []interface {}{
                map[string]interface {}{
                    "baz": map[string]interface {}{
                        "fud": "hello",
                    },
                },
                map[string]interface {}{
                    "baz": map[string]interface {}{
                        "fud": "world",
                    },
                },
                map[string]interface {}{
                    "bazz": "gotcha",
                },
            },
            "blah.baz": "here",
        },
    },
    Dataset:     "dataset0",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "\"foo\".**.\"fud\"",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        "hello",
        "world",
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/descendent-operator/case006.json
	--- .../groups/descendent-operator/case007.json
	--- .../groups/descendent-operator/case008.json
	--- .../groups/descendent-operator/case009.json
	--- .../groups/descendent-operator/case010.json
	--- .../groups/descendent-operator/case011.json
	--- .../groups/descendent-operator/case012.json
	--- .../groups/descendent-operator/case013.json
	--- .../groups/descendent-operator/case014.json
	--- .../groups/descendent-operator/case015.json
	--- .../groups/descendent-operator/case016.json
	--- .../groups/encoding/case000.json
	--- .../groups/encoding/case001.json
	--- .../groups/encoding/case002.json
	--- .../groups/encoding/case003.json
	--- .../groups/errors/case000.json
	--- .../groups/errors/case001.json
	--- .../groups/errors/case002.json
	--- .../groups/errors/case003.json
	--- .../groups/errors/case004.json
	--- .../groups/errors/case005.json
	--- .../groups/errors/case006.json
	--- .../groups/errors/case007.json
	--- .../groups/errors/case008.json
	--- .../groups/errors/case009.json
	--- .../groups/errors/case010.json
	--- .../groups/errors/case011.json
	--- .../groups/errors/case012.json
	--- .../groups/errors/case013.json
	--- .../groups/errors/case014.json
	--- .../groups/errors/case015.json
	--- .../groups/errors/case016.json
	--- .../groups/errors/case017.json
	--- .../groups/errors/case018.json
	--- .../groups/errors/case019.json
	--- .../groups/errors/case020.json
	--- .../groups/errors/case021.json
	--- .../groups/errors/case022.json
	--- .../groups/errors/case023.json
	--- .../groups/errors/case024.json
	--- .../groups/errors/case025.json
	--- .../groups/errors/case026.json
	--- .../groups/fields/case000.json
	--- .../groups/fields/case001.json
	--- .../groups/fields/case002.json
	--- .../groups/fields/case003.json
	--- .../groups/fields/case004.json
	--- .../groups/fields/case005.json
/home/peter/talen/jsonata/tests.go:145: no results found, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Address": map[string]interface {}{
            "City":     "Winchester",
            "Postcode": "SO21 2JN",
            "Street":   "Hursley Park",
        },
        "Age":   float64(28),
        "Email": []interface {}{
            map[string]interface {}{
                "address": []interface {}{
                    "fred.smith@my-work.com",
                    "fsmith@my-work.com",
                },
                "type": "work",
            },
            map[string]interface {}{
                "address": []interface {}{
                    "freddy@my-social.com",
                    "frederic.smith@very-serious.com",
                },
                "type": "home",
            },
        },
        "FirstName": "Fred",
        "Other":     map[string]interface {}{
            "Alternative.Address": map[string]interface {}{
                "City":     "London",
                "Postcode": "E1 6RF",
                "Street":   "Brick Lane",
            },
            "Misc":      nil,
            "Over 18 ?": bool(true),
        },
        "Phone": []interface {}{
            map[string]interface {}{
                "number": "0203 544 1234",
                "type":   "home",
            },
            map[string]interface {}{
                "number": "01962 001234",
                "type":   "office",
            },
            map[string]interface {}{
                "number": "01962 001235",
                "type":   "office",
            },
            map[string]interface {}{
                "number": "077 7700 1234",
                "type":   "mobile",
            },
        },
        "Surname": "Smith",
    },
    Dataset:         "dataset1",
    Depth:           0,
    Description:     "",
    Error:           nil,
    Expr:            "Other.Misc",
    ExprFile:        "",
    Function:        "",
    Result:          nil,
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/fields/case006.json
	--- .../groups/fields/case007.json
	--- .../groups/flattening/array-inputs.json
	--- .../groups/flattening/array-inputs.json
EXPECTED:
{
  "number": 0
}
GOT:
[
  {
    "number": 0
  },
  {
    "number": 1
  },
  {
    "number": 2
  }
]
&main.TestT{
    Bindings: nil,
    Category: "",
    Code:     "",
    Data:     []interface {}{
        map[string]interface {}{
            "phone": []interface {}{
                map[string]interface {}{
                    "number": float64(0),
                },
            },
        },
        map[string]interface {}{
            "phone": []interface {}{
                map[string]interface {}{
                    "number": float64(1),
                },
            },
        },
        map[string]interface {}{
            "phone": []interface {}{
                map[string]interface {}{
                    "number": float64(2),
                },
            },
        },
    },
    Dataset:     "",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "phone[0]",
    ExprFile:    "",
    Function:    "",
    Result:      map[string]interface {}{
        "number": float64(0),
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/flattening/array-inputs.json
EXPECTED:
[
  {
    "number": 0
  }
]
GOT:
[
  {
    "number": 0
  },
  {
    "number": 1
  },
  {
    "number": 2
  }
]
&main.TestT{
    Bindings: nil,
    Category: "",
    Code:     "",
    Data:     []interface {}{
        map[string]interface {}{
            "phone": []interface {}{
                map[string]interface {}{
                    "number": float64(0),
                },
            },
        },
        map[string]interface {}{
            "phone": []interface {}{
                map[string]interface {}{
                    "number": float64(1),
                },
            },
        },
        map[string]interface {}{
            "phone": []interface {}{
                map[string]interface {}{
                    "number": float64(2),
                },
            },
        },
    },
    Dataset:     "",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "phone[0][]",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        map[string]interface {}{
            "number": float64(0),
        },
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/flattening/array-inputs.json
EXPECTED:
0
GOT:
[
  0,
  1,
  2
]
&main.TestT{
    Bindings: nil,
    Category: "",
    Code:     "",
    Data:     []interface {}{
        map[string]interface {}{
            "phone": []interface {}{
                map[string]interface {}{
                    "number": float64(0),
                },
            },
        },
        map[string]interface {}{
            "phone": []interface {}{
                map[string]interface {}{
                    "number": float64(1),
                },
            },
        },
        map[string]interface {}{
            "phone": []interface {}{
                map[string]interface {}{
                    "number": float64(2),
                },
            },
        },
    },
    Dataset:         "",
    Depth:           0,
    Description:     "",
    Error:           nil,
    Expr:            "phone[0].number",
    ExprFile:        "",
    Function:        "",
    Result:          float64(0),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/flattening/array-inputs.json
EXPECTED:
0
GOT:
[
  0,
  1,
  2
]
&main.TestT{
    Bindings: nil,
    Category: "",
    Code:     "",
    Data:     []interface {}{
        map[string]interface {}{
            "phone": []interface {}{
                map[string]interface {}{
                    "number": float64(0),
                },
            },
        },
        map[string]interface {}{
            "phone": []interface {}{
                map[string]interface {}{
                    "number": float64(1),
                },
            },
        },
        map[string]interface {}{
            "phone": []interface {}{
                map[string]interface {}{
                    "number": float64(2),
                },
            },
        },
    },
    Dataset:         "",
    Depth:           0,
    Description:     "",
    Error:           nil,
    Expr:            "(phone)[0].number",
    ExprFile:        "",
    Function:        "",
    Result:          float64(0),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/flattening/array-inputs.json
	--- .../groups/flattening/array-inputs.json
	--- .../groups/flattening/array-inputs.json
	--- .../groups/flattening/case000.json
	--- .../groups/flattening/case001.json
	--- .../groups/flattening/case002.json
	--- .../groups/flattening/case003.json
	--- .../groups/flattening/case004.json
	--- .../groups/flattening/case005.json
	--- .../groups/flattening/case006.json
	--- .../groups/flattening/case007.json
	--- .../groups/flattening/case008.json
	--- .../groups/flattening/case009.json
	--- .../groups/flattening/case010.json
	--- .../groups/flattening/case011.json
	--- .../groups/flattening/case012.json
	--- .../groups/flattening/case013.json
	--- .../groups/flattening/case014.json
	--- .../groups/flattening/case015.json
	--- .../groups/flattening/case016.json
	--- .../groups/flattening/case017.json
	--- .../groups/flattening/case018.json
	--- .../groups/flattening/case019.json
	--- .../groups/flattening/case020.json
	--- .../groups/flattening/case021.json
	--- .../groups/flattening/case022.json
	--- .../groups/flattening/case023.json
	--- .../groups/flattening/case024.json
	--- .../groups/flattening/case025.json
	--- .../groups/flattening/case026.json
	--- .../groups/flattening/case027.json
	--- .../groups/flattening/case028.json
	--- .../groups/flattening/case029.json
	--- .../groups/flattening/case030.json
	--- .../groups/flattening/case031.json
	--- .../groups/flattening/case032.json
	--- .../groups/flattening/case033.json
	--- .../groups/flattening/case034.json
EXPECTED:
[
  1
]
GOT:
[
  1,
  3
]
&main.TestT{
    Bindings: nil,
    Category: "",
    Code:     "",
    Data:     []interface {}{
        map[string]interface {}{
            "a": []interface {}{
                map[string]interface {}{
                    "b": []interface {}{
                        float64(1),
                    },
                },
                map[string]interface {}{
                    "b": []interface {}{
                        float64(2),
                    },
                },
            },
        },
        map[string]interface {}{
            "a": []interface {}{
                map[string]interface {}{
                    "b": []interface {}{
                        float64(3),
                    },
                },
                map[string]interface {}{
                    "b": []interface {}{
                        float64(4),
                    },
                },
            },
        },
    },
    Dataset:     "",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "a[0].b",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        float64(1),
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/flattening/case034a.json
	--- .../groups/flattening/case035.json
	--- .../groups/flattening/case036.json
	--- .../groups/flattening/case037.json
	--- .../groups/flattening/case038.json
	--- .../groups/flattening/case039.json
	--- .../groups/flattening/case040.json
	--- .../groups/flattening/case041.json
	--- .../groups/flattening/case042.json
	--- .../groups/flattening/case043.json
	--- .../groups/flattening/case044.json
	--- .../groups/flattening/case045.json
	--- .../groups/flattening/large.json
	--- .../groups/flattening/large.json
	--- .../groups/flattening/sequence-of-arrays.json
	--- .../groups/flattening/sequence-of-arrays.json
	--- .../groups/flattening/sequence-of-arrays.json
	--- .../groups/flattening/sequence-of-arrays.json
EXPECTED:
[
  [
    3,
    1578381600
  ]
]
GOT:
[
  3,
  1578381600
]
&main.TestT{
    Bindings: nil,
    Category: "",
    Code:     "",
    Data:     []interface {}{
        map[string]interface {}{
            "epochSeconds": float64(1.5783816e+09),
            "value":        float64(3),
        },
    },
    Dataset:     "",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "$.[value,epochSeconds][]",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        []interface {}{
            float64(3),
            float64(1.5783816e+09),
        },
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-abs/case000.json
	--- .../groups/function-abs/case001.json
	--- .../groups/function-abs/case002.json
	--- .../groups/function-abs/case003.json
	--- .../groups/function-append/case000.json
	--- .../groups/function-append/case001.json
	--- .../groups/function-append/case002.json
	--- .../groups/function-append/case003.json
	--- .../groups/function-append/case004.json
	--- .../groups/function-append/case005.json
/home/peter/talen/jsonata/tests.go:145: no results found, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
        "data": map[string]interface {}{
            "a": []interface {}{
                float64(1),
            },
        },
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:     "dataset5",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "($append($data.a, [2]); $data.a)",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        float64(1),
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-applications/case000.json
	--- .../groups/function-applications/case001.json
	--- .../groups/function-applications/case002.json
	--- .../groups/function-applications/case003.json
	--- .../groups/function-applications/case004.json
	--- .../groups/function-applications/case005.json
	--- .../groups/function-applications/case006.json
	--- .../groups/function-applications/case007.json
	--- .../groups/function-applications/case008.json
	--- .../groups/function-applications/case009.json
	--- .../groups/function-applications/case010.json
	--- .../groups/function-applications/case011.json
	--- .../groups/function-applications/case012.json
	--- .../groups/function-applications/case013.json
	--- .../groups/function-applications/case014.json
	--- .../groups/function-applications/case015.json
	--- .../groups/function-applications/case016.json
	--- .../groups/function-applications/case017.json
	--- .../groups/function-applications/case018.json
	--- .../groups/function-applications/case019.json
	--- .../groups/function-applications/case020.json
	--- .../groups/function-applications/case021.json
/home/peter/talen/jsonata/tests.go:113: invalid path step "Product Name": paths cannot contain nulls, strings, numbers or booleans, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:     "dataset5",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "Account.Order.Product[$.\"Product Name\" ~> /hat/i].ProductID",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        float64(858383),
        float64(858236),
        float64(858383),
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-assert/case000.json
	--- .../groups/function-assert/case001.json
	--- .../groups/function-assert/case002.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $assert, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:         "dataset5",
    Depth:           0,
    Description:     "",
    Error:           nil,
    Expr:            "($assert(Account.Order[0].Product[0].Price < 35, 'Too Expensive'); Account.Order[0].Product[0].Price)",
    ExprFile:        "",
    Function:        "",
    Result:          float64(34.45),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-assert/case003.json
	--- .../groups/function-assert/case004.json
	--- .../groups/function-assert/case005.json
	--- .../groups/function-assert/case006.json
	--- .../groups/function-assert/case007.json
	--- .../groups/function-average/case000.json
	--- .../groups/function-average/case001.json
	--- .../groups/function-average/case002.json
EXPECTED:
[
  "order103: 45.285",
  "order104: 122.895"
]
GOT:
[
  "order103: 45.285000000000004",
  "order104: 122.89500000000001"
]
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:     "dataset5",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "Account.Order.(OrderID & \": \" & $average(Product.(Price*Quantity)))",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        "order103: 45.285",
        "order104: 122.895",
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-average/case003.json
	--- .../groups/function-average/case004.json
	--- .../groups/function-average/case005.json
	--- .../groups/function-average/case006.json
	--- .../groups/function-average/case007.json
	--- .../groups/function-average/case008.json
	--- .../groups/function-average/case009.json
	--- .../groups/function-average/case010.json
	--- .../groups/function-average/case011.json
	--- .../groups/function-average/case012.json
	--- .../groups/function-boolean/case000.json
	--- .../groups/function-boolean/case001.json
	--- .../groups/function-boolean/case002.json
	--- .../groups/function-boolean/case003.json
	--- .../groups/function-boolean/case004.json
	--- .../groups/function-boolean/case005.json
	--- .../groups/function-boolean/case006.json
	--- .../groups/function-boolean/case007.json
	--- .../groups/function-boolean/case008.json
	--- .../groups/function-boolean/case009.json
	--- .../groups/function-boolean/case010.json
	--- .../groups/function-boolean/case011.json
	--- .../groups/function-boolean/case012.json
	--- .../groups/function-boolean/case013.json
	--- .../groups/function-boolean/case014.json
	--- .../groups/function-boolean/case015.json
	--- .../groups/function-boolean/case016.json
	--- .../groups/function-boolean/case017.json
	--- .../groups/function-boolean/case018.json
	--- .../groups/function-boolean/case019.json
	--- .../groups/function-boolean/case020.json
	--- .../groups/function-boolean/case021.json
	--- .../groups/function-boolean/case022.json
	--- .../groups/function-boolean/case023.json
	--- .../groups/function-ceil/case000.json
	--- .../groups/function-ceil/case001.json
	--- .../groups/function-ceil/case002.json
	--- .../groups/function-ceil/case003.json
	--- .../groups/function-contains/case000.json
	--- .../groups/function-contains/case001.json
	--- .../groups/function-contains/case002.json
	--- .../groups/function-contains/case003.json
	--- .../groups/function-contains/case004.json
	--- .../groups/function-contains/case005.json
	--- .../groups/function-contains/case006.json
	--- .../groups/function-count/case000.json
	--- .../groups/function-count/case001.json
	--- .../groups/function-count/case002.json
	--- .../groups/function-count/case003.json
	--- .../groups/function-count/case004.json
	--- .../groups/function-count/case005.json
	--- .../groups/function-count/case006.json
	--- .../groups/function-count/case007.json
	--- .../groups/function-count/case008.json
	--- .../groups/function-count/case009.json
	--- .../groups/function-count/case010.json
	--- .../groups/function-count/case011.json
	--- .../groups/function-count/case012.json
	--- .../groups/function-count/case013.json
	--- .../groups/function-decodeUrl/case000.json
	--- .../groups/function-decodeUrl/case001.json
	--- .../groups/function-decodeUrl/case002.json
	--- .../groups/function-decodeUrlComponent/case000.json
	--- .../groups/function-decodeUrlComponent/case001.json
	--- .../groups/function-decodeUrlComponent/case002.json
	--- .../groups/function-distinct/distinct.json
	--- .../groups/function-distinct/distinct.json
	--- .../groups/function-distinct/distinct.json
/home/peter/talen/jsonata/tests.go:131: No results expected, got <nil>, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category:        "",
    Code:            "",
    Data:            nil,
    Dataset:         "",
    Depth:           0,
    Description:     "",
    Error:           nil,
    Expr:            "$distinct(nothing)",
    ExprFile:        "",
    Function:        "",
    Result:          nil,
    Timelimit:       0,
    Token:           "",
    UndefinedResult: true,
    Unordered:       false,
}
	--- .../groups/function-distinct/distinct.json
	--- .../groups/function-distinct/distinct.json
	--- .../groups/function-distinct/distinct.json
	--- .../groups/function-distinct/distinct.json
	--- .../groups/function-distinct/distinct.json
	--- .../groups/function-each/case000.json
	--- .../groups/function-each/case001.json
	--- .../groups/function-each/case002.json
/home/peter/talen/jsonata/tests.go:145: function "each" takes 2 argument(s), got 1, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "a": float64(1),
        "b": float64(2),
        "c": float64(3),
        "d": float64(4),
    },
    Dataset:     "",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "$each(function($v, $k) {$k[$v>2]})",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        "c",
        "d",
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       true,
}
	--- .../groups/function-encodeUrl/case000.json
	--- .../groups/function-encodeUrl/case001.json
	--- .../groups/function-encodeUrl/case002.json
	--- .../groups/function-encodeUrlComponent/case000.json
	--- .../groups/function-encodeUrlComponent/case001.json
	--- .../groups/function-encodeUrlComponent/case002.json
	--- .../groups/function-error/case000.json
	--- .../groups/function-error/case001.json
	--- .../groups/function-error/case002.json
	--- .../groups/function-error/case003.json
	--- .../groups/function-error/case004.json
	--- .../groups/function-error/case005.json
	--- .../groups/function-error/case006.json
	--- .../groups/function-error/case007.json
	--- .../groups/function-error/case008.json
	--- .../groups/function-error/case009.json
	--- .../groups/function-error/case010.json
	--- .../groups/function-eval/case000.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $eval, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:     "dataset5",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "$eval('[1,2,3]')",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        float64(1),
        float64(2),
        float64(3),
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-eval/case001.json
	--- .../groups/function-eval/case002.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $eval, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:     "dataset5",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "$eval('[1,$string(2),3]')",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        float64(1),
        "2",
        float64(3),
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-eval/case003.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $eval, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:         "dataset5",
    Depth:           0,
    Description:     "",
    Error:           nil,
    Expr:            "$eval('Account.Order.Product.Quantity ~> $sum()')",
    ExprFile:        "",
    Function:        "",
    Result:          float64(8),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-eval/case004.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $eval, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:     "dataset5",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "Account.Order.Product.{'Name': `Product Name`, 'Total': $eval('Price * Quantity')}",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        map[string]interface {}{
            "Name":  "Bowler Hat",
            "Total": float64(68.9),
        },
        map[string]interface {}{
            "Name":  "Trilby hat",
            "Total": float64(21.67),
        },
        map[string]interface {}{
            "Name":  "Bowler Hat",
            "Total": float64(137.8),
        },
        map[string]interface {}{
            "Name":  "Cloak",
            "Total": float64(107.99),
        },
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-eval/case005.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $eval, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:     "dataset5",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "Account.Order.Product.{'Name': `Product Name`, 'Volume': $eval('Width*Height*Depth', Description)}",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        map[string]interface {}{
            "Name":   "Bowler Hat",
            "Volume": float64(1.26e+07),
        },
        map[string]interface {}{
            "Name":   "Trilby hat",
            "Volume": float64(1.26e+07),
        },
        map[string]interface {}{
            "Name":   "Bowler Hat",
            "Volume": float64(1.26e+07),
        },
        map[string]interface {}{
            "Name":   "Cloak",
            "Volume": float64(126000),
        },
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-eval/case006.json
	--- .../groups/function-eval/case007.json
	--- .../groups/function-eval/case008.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $eval, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:     "",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "$eval(\"{ 'test': 1 }\", [])",
    ExprFile:    "",
    Function:    "",
    Result:      map[string]interface {}{
        "test": float64(1),
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-eval/case008.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $eval, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     []interface {}{
    },
    Dataset:     "",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "$eval(\"{ 'test': 1 }\")",
    ExprFile:    "",
    Function:    "",
    Result:      map[string]interface {}{
        "test": float64(1),
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-eval/case008.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $eval, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     []interface {}{
    },
    Dataset:     "",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "$eval(\"{ 'test': 1 }\", [1,2,3])",
    ExprFile:    "",
    Function:    "",
    Result:      map[string]interface {}{
        "test": float64(1),
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-eval/case008.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $eval, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     []interface {}{
        float64(1),
        float64(2),
        float64(3),
    },
    Dataset:     "",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "$eval(\"{ 'test': 1 }\")",
    ExprFile:    "",
    Function:    "",
    Result:      map[string]interface {}{
        "test": float64(1),
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-exists/case000.json
	--- .../groups/function-exists/case001.json
	--- .../groups/function-exists/case002.json
	--- .../groups/function-exists/case003.json
	--- .../groups/function-exists/case004.json
	--- .../groups/function-exists/case005.json
	--- .../groups/function-exists/case006.json
	--- .../groups/function-exists/case007.json
	--- .../groups/function-exists/case008.json
	--- .../groups/function-exists/case009.json
	--- .../groups/function-exists/case010.json
	--- .../groups/function-exists/case011.json
	--- .../groups/function-exists/case012.json
	--- .../groups/function-exists/case013.json
	--- .../groups/function-exists/case014.json
	--- .../groups/function-exists/case015.json
	--- .../groups/function-exists/case016.json
	--- .../groups/function-exists/case017.json
	--- .../groups/function-exists/case018.json
	--- .../groups/function-exists/case019.json
	--- .../groups/function-exists/case020.json
	--- .../groups/function-exists/case021.json
	--- .../groups/function-exists/case022.json
	--- .../groups/function-exists/case023.json
	--- .../groups/function-exists/case024.json
	--- .../groups/function-floor/case000.json
	--- .../groups/function-floor/case001.json
	--- .../groups/function-floor/case002.json
	--- .../groups/function-floor/case003.json
	--- .../groups/function-formatBase/case000.json
	--- .../groups/function-formatBase/case001.json
	--- .../groups/function-formatBase/case002.json
	--- .../groups/function-formatBase/case003.json
	--- .../groups/function-formatBase/case004.json
	--- .../groups/function-formatBase/case005.json
	--- .../groups/function-formatBase/case006.json
	--- .../groups/function-formatBase/case007.json
	--- .../groups/function-formatInteger/formatInteger.json
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "decimal-digit-pattern - cardinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should format a number",
    Error:           nil,
    Expr:            "$formatInteger(123, '000')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "123",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "decimal-digit-pattern - cardinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should pad number with zeros",
    Error:           nil,
    Expr:            "$formatInteger(123, '0000')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "0123",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "decimal-digit-pattern - cardinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should pad number with zeros",
    Error:           nil,
    Expr:            "$formatInteger(-3, '0000')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "-0003",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "decimal-digit-pattern - cardinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should pad number with zeros",
    Error:           nil,
    Expr:            "$formatInteger(1234, '0;c')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "1234",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "decimal-digit-pattern - cardinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should pad number with zeros",
    Error:           nil,
    Expr:            "$formatInteger(1234, '###0')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "1234",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "decimal-digit-pattern - cardinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should pad number with zeros",
    Error:           nil,
    Expr:            "$formatInteger(12, '###0')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "12",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "decimal-digit-pattern - cardinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should round down floats",
    Error:           nil,
    Expr:            "$formatInteger(12.6, '###0')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "12",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "decimal-digit-pattern - ordinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should format a number",
    Error:           nil,
    Expr:            "$formatInteger(123, '000;o')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "123rd",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "decimal-digit-pattern - ordinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should pad number with zeros",
    Error:           nil,
    Expr:            "$formatInteger(1, '0;o')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "1st",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "decimal-digit-pattern - ordinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should pad number with zeros",
    Error:           nil,
    Expr:            "$formatInteger(28, '#0;o')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "28th",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "decimal-digit-pattern - ordinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should pad number with zeros",
    Error:           nil,
    Expr:            "$formatInteger(1234, '###0;o')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "1234th",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "decimal-digit-pattern - ordinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should pad number with zeros",
    Error:           nil,
    Expr:            "$formatInteger(12, '###0;o')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "12th",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "decimal-digit-pattern - unicode decimal groups",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should insert regular groups",
    Error:           nil,
    Expr:            "$formatInteger(12340, '###١')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "١٢٣٤٠",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "decimal-digit-pattern - unicode decimal groups",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should insert regular groups",
    Error:           nil,
    Expr:            "$formatInteger(12340, '###０')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "１２３４０",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "decimal-digit-pattern - grouping separator",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should insert regular groups",
    Error:           nil,
    Expr:            "$formatInteger(12, '#,##0')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "12",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "decimal-digit-pattern - grouping separator",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should insert regular groups",
    Error:           nil,
    Expr:            "$formatInteger(1200, '#,##0')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "1,200",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "decimal-digit-pattern - grouping separator",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should insert regular groups",
    Error:           nil,
    Expr:            "$formatInteger(120000, '#,##0')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "120,000",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "decimal-digit-pattern - grouping separator",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should insert regular groups",
    Error:           nil,
    Expr:            "$formatInteger(12345678, '#,##0')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "12,345,678",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "decimal-digit-pattern - grouping separator",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should insert regular groups",
    Error:           nil,
    Expr:            "$formatInteger(1234567890, '#,##0')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "1,234,567,890",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "decimal-digit-pattern - grouping separator",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should insert regular groups",
    Error:           nil,
    Expr:            "$formatInteger(1234567890, '#,###,##0')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "1,234,567,890",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "decimal-digit-pattern - grouping separator",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should insert non-regular groups - different chars",
    Error:           nil,
    Expr:            "$formatInteger(1234567890, '#:###,##0')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "1234:567,890",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "decimal-digit-pattern - grouping separator",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should insert non-regular groups - different positions",
    Error:           nil,
    Expr:            "$formatInteger(1234567890, '##,##,##0')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "12345,67,890",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "roman numerals",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "0",
    Error:           nil,
    Expr:            "$formatInteger(0, 'I')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "roman numerals",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "1984",
    Error:           nil,
    Expr:            "$formatInteger(1984, 'I')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "MCMLXXXIV",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "roman numerals",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "99",
    Error:           nil,
    Expr:            "$formatInteger(99, 'i')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "xcix",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - cardinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "12",
    Error:           nil,
    Expr:            "$formatInteger(12, 'w')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "twelve",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - cardinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "20",
    Error:           nil,
    Expr:            "$formatInteger(20, 'w')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "twenty",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - cardinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "34",
    Error:           nil,
    Expr:            "$formatInteger(34, 'w')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "thirty-four",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - cardinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "99",
    Error:           nil,
    Expr:            "$formatInteger(99, 'W')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "NINETY-NINE",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - cardinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "100",
    Error:           nil,
    Expr:            "$formatInteger(100, 'w')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "one hundred",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - cardinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "555",
    Error:           nil,
    Expr:            "$formatInteger(555, 'W')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "FIVE HUNDRED AND FIFTY-FIVE",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - cardinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "555",
    Error:           nil,
    Expr:            "$formatInteger(555, 'Ww')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "Five Hundred and Fifty-Five",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - cardinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "919",
    Error:           nil,
    Expr:            "$formatInteger(919, 'w')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "nine hundred and nineteen",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - cardinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "730",
    Error:           nil,
    Expr:            "$formatInteger(730, 'w')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "seven hundred and thirty",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - cardinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "1000",
    Error:           nil,
    Expr:            "$formatInteger(1000, 'w')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "one thousand",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - cardinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "3730",
    Error:           nil,
    Expr:            "$formatInteger(3730, 'w')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "three thousand, seven hundred and thirty",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - cardinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "327730",
    Error:           nil,
    Expr:            "$formatInteger(327730, 'w')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "three hundred and twenty-seven thousand, seven hundred and thirty",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - cardinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "4327730",
    Error:           nil,
    Expr:            "$formatInteger(4327730, 'w')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "four million, three hundred and twenty-seven thousand, seven hundred and thirty",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - cardinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "1e12 + 1",
    Error:           nil,
    Expr:            "$formatInteger(1000000000001, 'w')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "one trillion and one",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - cardinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "1234567890123",
    Error:           nil,
    Expr:            "$formatInteger(1234567890123, 'w')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "one trillion, two hundred and thirty-four billion, five hundred and sixty-seven million, eight hundred and ninety thousand, one hundred and twenty-three",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - cardinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "1e15",
    Error:           nil,
    Expr:            "$formatInteger(1000000000000000, 'w')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "one thousand trillion",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - cardinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "1e46",
    Error:           nil,
    Expr:            "$formatInteger(1e+46, 'w')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "ten billion trillion trillion trillion",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - cardinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "1234567890123456",
    Error:           nil,
    Expr:            "$formatInteger(1234567890123456, 'w')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "one thousand, two hundred and thirty-four trillion, five hundred and sixty-seven billion, eight hundred and ninety million, one hundred and twenty-three thousand, four hundred and fifty-six",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - ordinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "12",
    Error:           nil,
    Expr:            "$formatInteger(12, 'w;o')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "twelfth",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - ordinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "20",
    Error:           nil,
    Expr:            "$formatInteger(20, 'w;o')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "twentieth",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - ordinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "34",
    Error:           nil,
    Expr:            "$formatInteger(34, 'w;o')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "thirty-fourth",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - ordinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "99",
    Error:           nil,
    Expr:            "$formatInteger(99, 'W;o')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "NINETY-NINTH",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - ordinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "100",
    Error:           nil,
    Expr:            "$formatInteger(100, 'w;o')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "one hundredth",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - ordinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "555",
    Error:           nil,
    Expr:            "$formatInteger(555, 'W;o')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "FIVE HUNDRED AND FIFTY-FIFTH",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - ordinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "919",
    Error:           nil,
    Expr:            "$formatInteger(919, 'w;o')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "nine hundred and nineteenth",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - ordinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "730",
    Error:           nil,
    Expr:            "$formatInteger(730, 'w;o')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "seven hundred and thirtieth",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - ordinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "1000",
    Error:           nil,
    Expr:            "$formatInteger(1000, 'w;o')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "one thousandth",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - ordinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "3730",
    Error:           nil,
    Expr:            "$formatInteger(3731, 'w;o')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "three thousand, seven hundred and thirty-first",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - ordinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "327730",
    Error:           nil,
    Expr:            "$formatInteger(327713, 'w;o')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "three hundred and twenty-seven thousand, seven hundred and thirteenth",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - ordinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "4327730",
    Error:           nil,
    Expr:            "$formatInteger(4327732, 'w;o')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "four million, three hundred and twenty-seven thousand, seven hundred and thirty-second",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - ordinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "1e12 + 1",
    Error:           nil,
    Expr:            "$formatInteger(1000000000001, 'w;o')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "one trillion and first",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "spreadsheet column names",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "1",
    Error:           nil,
    Expr:            "$formatInteger(1, 'A')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "A",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "spreadsheet column names",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "12",
    Error:           nil,
    Expr:            "$formatInteger(12, 'a')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "l",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "spreadsheet column names",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "26",
    Error:           nil,
    Expr:            "$formatInteger(26, 'a')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "z",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "spreadsheet column names",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "27",
    Error:           nil,
    Expr:            "$formatInteger(27, 'a')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "aa",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "spreadsheet column names",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "300",
    Error:           nil,
    Expr:            "$formatInteger(300, 'A')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "KN",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $formatInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "spreadsheet column names",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "123456",
    Error:           nil,
    Expr:            "$formatInteger(123456, 'A')",
    ExprFile:        "",
    Function:        "#formatInteger",
    Result:          "FZPH",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-formatInteger/formatInteger.json
	--- .../groups/function-formatNumber/case000.json
	--- .../groups/function-formatNumber/case001.json
	--- .../groups/function-formatNumber/case002.json
	--- .../groups/function-formatNumber/case003.json
	--- .../groups/function-formatNumber/case004.json
	--- .../groups/function-formatNumber/case005.json
	--- .../groups/function-formatNumber/case006.json
	--- .../groups/function-formatNumber/case007.json
	--- .../groups/function-formatNumber/case008.json
	--- .../groups/function-formatNumber/case009.json
	--- .../groups/function-formatNumber/case010.json
	--- .../groups/function-formatNumber/case011.json
	--- .../groups/function-formatNumber/case012.json
	--- .../groups/function-formatNumber/case013.json
	--- .../groups/function-formatNumber/case014.json
	--- .../groups/function-formatNumber/case015.json
	--- .../groups/function-formatNumber/case016.json
	--- .../groups/function-formatNumber/case017.json
	--- .../groups/function-formatNumber/case018.json
	--- .../groups/function-formatNumber/case019.json
	--- .../groups/function-formatNumber/case020.json
	--- .../groups/function-formatNumber/case021.json
	--- .../groups/function-formatNumber/case022.json
	--- .../groups/function-formatNumber/case023.json
	--- .../groups/function-formatNumber/case024.json
	--- .../groups/function-formatNumber/case025.json
	--- .../groups/function-formatNumber/case026.json
	--- .../groups/function-formatNumber/case027.json
	--- .../groups/function-formatNumber/case028.json
	--- .../groups/function-formatNumber/case029.json
	--- .../groups/function-formatNumber/case030.json
	--- .../groups/function-formatNumber/case031.json
	--- .../groups/function-formatNumber/case032.json
	--- .../groups/function-formatNumber/case033.json
	--- .../groups/function-formatNumber/case034.json
	--- .../groups/function-formatNumber/case035.json
	--- .../groups/function-formatNumber/case036.json
	--- .../groups/function-fromMillis/case000.json
	--- .../groups/function-fromMillis/case001.json
	--- .../groups/function-fromMillis/case002.json
	--- .../groups/function-fromMillis/formatDateTime.json
	--- .../groups/function-fromMillis/formatDateTime.json
/home/peter/talen/jsonata/tests.go:145: no variable markers found, (eval)
&main.TestT{
    Bindings: nil,
    Category: "basic date patterns",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should return literal",
    Error:           nil,
    Expr:            "$fromMillis(1521801216617, 'Hello')",
    ExprFile:        "",
    Function:        "#fromMillis",
    Result:          "Hello",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-fromMillis/formatDateTime.json
	--- .../groups/function-fromMillis/formatDateTime.json
	--- .../groups/function-fromMillis/formatDateTime.json
	--- .../groups/function-fromMillis/formatDateTime.json
	--- .../groups/function-fromMillis/formatDateTime.json
	--- .../groups/function-fromMillis/formatDateTime.json
	--- .../groups/function-fromMillis/formatDateTime.json
	--- .../groups/function-fromMillis/formatDateTime.json
EXPECTED:
"7 Sunday"
GOT:
"1 Sunday"
&main.TestT{
    Bindings: nil,
    Category: "basic date patterns",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "Sunday should be day 7",
    Error:           nil,
    Expr:            "$fromMillis(1522616700000, '[F0] [FNn]')",
    ExprFile:        "",
    Function:        "#fromMillis",
    Result:          "7 Sunday",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-fromMillis/formatDateTime.json
EXPECTED:
"1 Monday"
GOT:
"2 Monday"
&main.TestT{
    Bindings: nil,
    Category: "basic date patterns",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "Monday should be day 1",
    Error:           nil,
    Expr:            "$fromMillis(1522703100000, '[F0] [FNn]')",
    ExprFile:        "",
    Function:        "#fromMillis",
    Result:          "1 Monday",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-fromMillis/formatDateTime.json
	--- .../groups/function-fromMillis/formatDateTime.json
	--- .../groups/function-fromMillis/formatDateTime.json
	--- .../groups/function-fromMillis/formatDateTime.json
	--- .../groups/function-fromMillis/formatDateTime.json
	--- .../groups/function-fromMillis/formatDateTime.json
	--- .../groups/function-fromMillis/formatDateTime.json
	--- .../groups/function-fromMillis/formatDateTime.json
	--- .../groups/function-fromMillis/formatDateTime.json
	--- .../groups/function-fromMillis/formatDateTime.json
	--- .../groups/function-fromMillis/formatDateTime.json
	--- .../groups/function-fromMillis/formatDateTime.json
	--- .../groups/function-fromMillis/formatDateTime.json
	--- .../groups/function-fromMillis/formatDateTime.json
	--- .../groups/function-fromMillis/formatDateTime.json
	--- .../groups/function-fromMillis/formatDateTime.json
/home/peter/talen/jsonata/tests.go:123: Expected error D3134, (eval)
&main.TestT{
    Bindings: nil,
    Category: "timezone",
    Code:     "D3134",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "picture string has 6 digit timezone - error",
    Error:           nil,
    Expr:            "$fromMillis(1230757500000, '[Y]-[M01]-[D01]T[H01]:[m]:[s].[f001][Z010101t]', '+0530')",
    ExprFile:        "",
    Function:        "#fromMillis",
    Result:          nil,
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-fromMillis/formatDateTime.json
EXPECTED:
"23/03/18"
GOT:
"23/3/2018"
&main.TestT{
    Bindings: nil,
    Category: "width modifier",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should return literal",
    Error:           nil,
    Expr:            "$fromMillis(1521801216617, '[D#1,2]/[M1,2]/[Y,2]')",
    ExprFile:        "",
    Function:        "#fromMillis",
    Result:          "23/03/18",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-fromMillis/formatDateTime.json
EXPECTED:
"23/03/2018"
GOT:
"23/3/2018"
&main.TestT{
    Bindings: nil,
    Category: "width modifier",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should return literal",
    Error:           nil,
    Expr:            "$fromMillis(1521801216617, '[D#1,2]/[M1,2]/[Y0001,2]')",
    ExprFile:        "",
    Function:        "#fromMillis",
    Result:          "23/03/2018",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-fromMillis/formatDateTime.json
EXPECTED:
"23/03/18"
GOT:
"23/3/18"
&main.TestT{
    Bindings: nil,
    Category: "width modifier",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "width modifier should override pattern",
    Error:           nil,
    Expr:            "$fromMillis(1521801216617, '[D#1,2]/[M1,2]/[Y##01,2-2]')",
    ExprFile:        "",
    Function:        "#fromMillis",
    Result:          "23/03/18",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-fromMillis/formatDateTime.json
EXPECTED:
"23/03/18"
GOT:
"23/3/0018"
&main.TestT{
    Bindings: nil,
    Category: "width modifier",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "width modifier should override pattern",
    Error:           nil,
    Expr:            "$fromMillis(1521801216617, '[D#1,2]/[M1,2]/[Y0001,2-2]')",
    ExprFile:        "",
    Function:        "#fromMillis",
    Result:          "23/03/18",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-fromMillis/formatDateTime.json
EXPECTED:
"23 03 MMXVIII"
GOT:
"23 03 2018"
&main.TestT{
    Bindings: nil,
    Category: "roman numeral dates",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "year in roman numerals",
    Error:           nil,
    Expr:            "$fromMillis(1521801216617, '[D1] [M01] [YI]')",
    ExprFile:        "",
    Function:        "#fromMillis",
    Result:          "23 03 MMXVIII",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-fromMillis/formatDateTime.json
EXPECTED:
"w C mmxviii"
GOT:
"23 3 2018"
&main.TestT{
    Bindings: nil,
    Category: "dates with letters instead of numbers",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "day/month in letters, year in roman numerals",
    Error:           nil,
    Expr:            "$fromMillis(1521801216617, '[Da] [MA] [Yi]')",
    ExprFile:        "",
    Function:        "#fromMillis",
    Result:          "w C mmxviii",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-fromMillis/formatDateTime.json
	--- .../groups/function-fromMillis/formatDateTime.json
EXPECTED:
"two thousand and eighteen"
GOT:
"2018"
&main.TestT{
    Bindings: nil,
    Category: "date in words",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "year in words",
    Error:           nil,
    Expr:            "$fromMillis(1521801216617, '[Yw]')",
    ExprFile:        "",
    Function:        "#fromMillis",
    Result:          "two thousand and eighteen",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-fromMillis/formatDateTime.json
EXPECTED:
"twenty-third 03 2018"
GOT:
"23 03 2018"
&main.TestT{
    Bindings: nil,
    Category: "date in words",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "day of month in ordinal words",
    Error:           nil,
    Expr:            "$fromMillis(1521801216617, '[Dwo] [M01] [Y]')",
    ExprFile:        "",
    Function:        "#fromMillis",
    Result:          "twenty-third 03 2018",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-fromMillis/formatDateTime.json
	--- .../groups/function-fromMillis/formatDateTime.json
	--- .../groups/function-fromMillis/formatDateTime.json
	--- .../groups/function-fromMillis/formatDateTime.json
EXPECTED:
"Friday, the twenty-third of March 2018 ISO"
GOT:
"Friday, the 23 of March 2018 ce"
&main.TestT{
    Bindings: nil,
    Category: "date in words",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "day/date/month in words",
    Error:           nil,
    Expr:            "$fromMillis(1521801216617, '[FNn], the [Dwo] of [MNn] [Y] [E]')",
    ExprFile:        "",
    Function:        "#fromMillis",
    Result:          "Friday, the twenty-third of March 2018 ISO",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-fromMillis/formatDateTime.json
EXPECTED:
"Fri, 23rd Mar 2018 ISO"
GOT:
"Fri, 23rd Mar 2018 ad"
&main.TestT{
    Bindings: nil,
    Category: "date in words",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "abbreviated day/month in words",
    Error:           nil,
    Expr:            "$fromMillis(1521801216617, '[FNn,3-3], [D1o] [MNn,3-3] [Y] [C]')",
    ExprFile:        "",
    Function:        "#fromMillis",
    Result:          "Fri, 23rd Mar 2018 ISO",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-fromMillis/formatDateTime.json
	--- .../groups/function-fromMillis/formatDateTime.json
	--- .../groups/function-fromMillis/formatDateTime.json
EXPECTED:
"monday, 7/1/2008 12:00:00 am"
GOT:
"monday, 7/1/2008 0:00:00 am"
&main.TestT{
    Bindings: nil,
    Category: "Default presentation modifiers",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should apply default modifiers to day/date/time 12hr midnight",
    Error:           nil,
    Expr:            "$fromMillis(1199664000000, '[F], [D]/[M]/[Y] [h]:[m]:[s] [P]')",
    ExprFile:        "",
    Function:        "#fromMillis",
    Result:          "monday, 7/1/2008 12:00:00 am",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-fromMillis/formatDateTime.json
EXPECTED:
"first day of the year"
GOT:
"1 day of the year"
&main.TestT{
    Bindings: nil,
    Category: "Day of year; week of year; week of month",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "1st Jan should be day 1",
    Error:           nil,
    Expr:            "$fromMillis(1514808000000, '[dwo] day of the year')",
    ExprFile:        "",
    Function:        "#fromMillis",
    Result:          "first day of the year",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-fromMillis/formatDateTime.json
	--- .../groups/function-fromMillis/formatDateTime.json
	--- .../groups/function-fromMillis/formatDateTime.json
	--- .../groups/function-fromMillis/formatDateTime.json
	--- .../groups/function-fromMillis/formatDateTime.json
	--- .../groups/function-fromMillis/formatDateTime.json
	--- .../groups/function-fromMillis/formatDateTime.json
	--- .../groups/function-fromMillis/formatDateTime.json
	--- .../groups/function-fromMillis/formatDateTime.json
	--- .../groups/function-fromMillis/formatDateTime.json
	--- .../groups/function-fromMillis/formatDateTime.json
	--- .../groups/function-fromMillis/formatDateTime.json
	--- .../groups/function-fromMillis/formatDateTime.json
	--- .../groups/function-fromMillis/formatDateTime.json
	--- .../groups/function-fromMillis/formatDateTime.json
/home/peter/talen/jsonata/tests.go:145: unknown component specifier x, (eval)
&main.TestT{
    Bindings: nil,
    Category: "Day of year; week of year; week of month",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "Tue 29th Jan 2013 should be in week 5 of Jan",
    Error:           nil,
    Expr:            "$fromMillis(1359460800000, 'Week: [w] of [xNn]')",
    ExprFile:        "",
    Function:        "#fromMillis",
    Result:          "Week: 5 of January",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-fromMillis/formatDateTime.json
/home/peter/talen/jsonata/tests.go:145: unknown component specifier x, (eval)
&main.TestT{
    Bindings: nil,
    Category: "Day of year; week of year; week of month",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "Thur 31st Jan 2013 should be in week 5 of Jan",
    Error:           nil,
    Expr:            "$fromMillis(1359633600000, 'Week: [w] of [xNn]')",
    ExprFile:        "",
    Function:        "#fromMillis",
    Result:          "Week: 5 of January",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-fromMillis/formatDateTime.json
/home/peter/talen/jsonata/tests.go:145: unknown component specifier x, (eval)
&main.TestT{
    Bindings: nil,
    Category: "Day of year; week of year; week of month",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "Thur 1st Feb 2013 should be in week 5 of Jan",
    Error:           nil,
    Expr:            "$fromMillis(1359720000000, 'Week: [w] of [xNn]')",
    ExprFile:        "",
    Function:        "#fromMillis",
    Result:          "Week: 5 of January",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-fromMillis/formatDateTime.json
/home/peter/talen/jsonata/tests.go:145: unknown component specifier x, (eval)
&main.TestT{
    Bindings: nil,
    Category: "Day of year; week of year; week of month",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "Mon 1st Jan 2018 should be in week 1 of Jan",
    Error:           nil,
    Expr:            "$fromMillis(1514808000000, 'Week: [w] of [xNn]')",
    ExprFile:        "",
    Function:        "#fromMillis",
    Result:          "Week: 1 of January",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-fromMillis/formatDateTime.json
/home/peter/talen/jsonata/tests.go:145: unknown component specifier x, (eval)
&main.TestT{
    Bindings: nil,
    Category: "Day of year; week of year; week of month",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "Sun 1st Jan 2017 should be in week 5 of Dec",
    Error:           nil,
    Expr:            "$fromMillis(1483272000000, 'Week: [w] of [xNn]')",
    ExprFile:        "",
    Function:        "#fromMillis",
    Result:          "Week: 5 of December",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-fromMillis/formatDateTime.json
/home/peter/talen/jsonata/tests.go:145: unknown component specifier x, (eval)
&main.TestT{
    Bindings: nil,
    Category: "Day of year; week of year; week of month",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "Tues 31st July 2018 should be in week 1 of Aug",
    Error:           nil,
    Expr:            "$fromMillis(1533038400000, 'Week: [w] of [xNn]')",
    ExprFile:        "",
    Function:        "#fromMillis",
    Result:          "Week: 1 of August",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-fromMillis/formatDateTime.json
/home/peter/talen/jsonata/tests.go:145: unknown component specifier x, (eval)
&main.TestT{
    Bindings: nil,
    Category: "Day of year; week of year; week of month",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "Tues 30th Dec 2014 should be in week 1 of Jan",
    Error:           nil,
    Expr:            "$fromMillis(1419940800000, 'Week: [w] of [xNn]')",
    ExprFile:        "",
    Function:        "#fromMillis",
    Result:          "Week: 1 of January",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-fromMillis/formatDateTime.json
/home/peter/talen/jsonata/tests.go:145: invalid timezone, (eval)
&main.TestT{
    Bindings: nil,
    Category: "Default format",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:     "",
    Depth:       0,
    Description: "Undefined picture string defaults to ISO 8601",
    Error:       nil,
    Expr:        "$toMillis('2018-10-21T13:05:00Z').[$fromMillis(), $fromMillis($, (),'-0500'), $fromMillis($, (),'0000')] ",
    ExprFile:    "",
    Function:    "#fromMillis",
    Result:      []interface {}{
        "2018-10-21T13:05:00.000Z",
        "2018-10-21T08:05:00.000-05:00",
        "2018-10-21T13:05:00.000Z",
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-fromMillis/formatDateTime.json
/home/peter/talen/jsonata/tests.go:123: Expected error D3133, (eval)
&main.TestT{
    Bindings: nil,
    Category: "error",
    Code:     "D3133",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "throws error asking for year name",
    Error:           nil,
    Expr:            "$fromMillis(1419940800000, '[YN]-[M]-[D]')",
    ExprFile:        "",
    Function:        "#fromMillis",
    Result:          nil,
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-fromMillis/formatDateTime.json
	--- .../groups/function-fromMillis/isoWeekDate.json
/home/peter/talen/jsonata/tests.go:145: unknown component specifier X, (eval)
&main.TestT{
    Bindings: nil,
    Category: "ISO week date format",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "Sat 1 Jan 2005",
    Error:           nil,
    Expr:            "($ts := $toMillis('2005-01-01', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )",
    ExprFile:        "",
    Function:        "",
    Result:          "2004-W53-6",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-fromMillis/isoWeekDate.json
/home/peter/talen/jsonata/tests.go:145: unknown component specifier X, (eval)
&main.TestT{
    Bindings: nil,
    Category: "ISO week date format",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "Sun 2 Jan 2005",
    Error:           nil,
    Expr:            "($ts := $toMillis('2005-01-02', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )",
    ExprFile:        "",
    Function:        "",
    Result:          "2004-W53-7",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-fromMillis/isoWeekDate.json
/home/peter/talen/jsonata/tests.go:145: unknown component specifier X, (eval)
&main.TestT{
    Bindings: nil,
    Category: "ISO week date format",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "Sat 31 Dec 2005",
    Error:           nil,
    Expr:            "($ts := $toMillis('2005-12-31', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )",
    ExprFile:        "",
    Function:        "",
    Result:          "2005-W52-6",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-fromMillis/isoWeekDate.json
/home/peter/talen/jsonata/tests.go:145: unknown component specifier X, (eval)
&main.TestT{
    Bindings: nil,
    Category: "ISO week date format",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "Sun 1 Jan 2006",
    Error:           nil,
    Expr:            "($ts := $toMillis('2006-01-01', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )",
    ExprFile:        "",
    Function:        "",
    Result:          "2005-W52-7",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-fromMillis/isoWeekDate.json
/home/peter/talen/jsonata/tests.go:145: unknown component specifier X, (eval)
&main.TestT{
    Bindings: nil,
    Category: "ISO week date format",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "Mon 2 Jan 2006",
    Error:           nil,
    Expr:            "($ts := $toMillis('2006-01-02', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )",
    ExprFile:        "",
    Function:        "",
    Result:          "2006-W01-1",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-fromMillis/isoWeekDate.json
/home/peter/talen/jsonata/tests.go:145: unknown component specifier X, (eval)
&main.TestT{
    Bindings: nil,
    Category: "ISO week date format",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "Sun 31 Dec 2006",
    Error:           nil,
    Expr:            "($ts := $toMillis('2006-12-31', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )",
    ExprFile:        "",
    Function:        "",
    Result:          "2006-W52-7",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-fromMillis/isoWeekDate.json
/home/peter/talen/jsonata/tests.go:145: unknown component specifier X, (eval)
&main.TestT{
    Bindings: nil,
    Category: "ISO week date format",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "Mon 1 Jan 2007",
    Error:           nil,
    Expr:            "($ts := $toMillis('2007-01-01', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )",
    ExprFile:        "",
    Function:        "",
    Result:          "2007-W01-1",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-fromMillis/isoWeekDate.json
/home/peter/talen/jsonata/tests.go:145: unknown component specifier X, (eval)
&main.TestT{
    Bindings: nil,
    Category: "ISO week date format",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "Sun 30 Dec 2007",
    Error:           nil,
    Expr:            "($ts := $toMillis('2007-12-30', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )",
    ExprFile:        "",
    Function:        "",
    Result:          "2007-W52-7",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-fromMillis/isoWeekDate.json
/home/peter/talen/jsonata/tests.go:145: unknown component specifier X, (eval)
&main.TestT{
    Bindings: nil,
    Category: "ISO week date format",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "Mon 31 Dec 2007",
    Error:           nil,
    Expr:            "($ts := $toMillis('2007-12-31', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )",
    ExprFile:        "",
    Function:        "",
    Result:          "2008-W01-1",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-fromMillis/isoWeekDate.json
/home/peter/talen/jsonata/tests.go:145: unknown component specifier X, (eval)
&main.TestT{
    Bindings: nil,
    Category: "ISO week date format",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "Tue 1 Jan 2008",
    Error:           nil,
    Expr:            "($ts := $toMillis('2008-01-01', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )",
    ExprFile:        "",
    Function:        "",
    Result:          "2008-W01-2",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-fromMillis/isoWeekDate.json
/home/peter/talen/jsonata/tests.go:145: unknown component specifier X, (eval)
&main.TestT{
    Bindings: nil,
    Category: "ISO week date format",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "Sun 28 Dec 2008",
    Error:           nil,
    Expr:            "($ts := $toMillis('2008-12-28', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )",
    ExprFile:        "",
    Function:        "",
    Result:          "2008-W52-7",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-fromMillis/isoWeekDate.json
/home/peter/talen/jsonata/tests.go:145: unknown component specifier X, (eval)
&main.TestT{
    Bindings: nil,
    Category: "ISO week date format",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "Mon 29 Dec 2008",
    Error:           nil,
    Expr:            "($ts := $toMillis('2008-12-29', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )",
    ExprFile:        "",
    Function:        "",
    Result:          "2009-W01-1",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-fromMillis/isoWeekDate.json
/home/peter/talen/jsonata/tests.go:145: unknown component specifier X, (eval)
&main.TestT{
    Bindings: nil,
    Category: "ISO week date format",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "Tue 30 Dec 2008",
    Error:           nil,
    Expr:            "($ts := $toMillis('2008-12-30', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )",
    ExprFile:        "",
    Function:        "",
    Result:          "2009-W01-2",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-fromMillis/isoWeekDate.json
/home/peter/talen/jsonata/tests.go:145: unknown component specifier X, (eval)
&main.TestT{
    Bindings: nil,
    Category: "ISO week date format",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "Wed 31 Dec 2008",
    Error:           nil,
    Expr:            "($ts := $toMillis('2008-12-31', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )",
    ExprFile:        "",
    Function:        "",
    Result:          "2009-W01-3",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-fromMillis/isoWeekDate.json
/home/peter/talen/jsonata/tests.go:145: unknown component specifier X, (eval)
&main.TestT{
    Bindings: nil,
    Category: "ISO week date format",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "Thu 1 Jan 2009",
    Error:           nil,
    Expr:            "($ts := $toMillis('2009-01-01', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )",
    ExprFile:        "",
    Function:        "",
    Result:          "2009-W01-4",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-fromMillis/isoWeekDate.json
/home/peter/talen/jsonata/tests.go:145: unknown component specifier X, (eval)
&main.TestT{
    Bindings: nil,
    Category: "ISO week date format",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "Thu 31 Dec 2009",
    Error:           nil,
    Expr:            "($ts := $toMillis('2009-12-31', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )",
    ExprFile:        "",
    Function:        "",
    Result:          "2009-W53-4",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-fromMillis/isoWeekDate.json
/home/peter/talen/jsonata/tests.go:145: unknown component specifier X, (eval)
&main.TestT{
    Bindings: nil,
    Category: "ISO week date format",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "Fri 1 Jan 2010",
    Error:           nil,
    Expr:            "($ts := $toMillis('2010-01-01', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )",
    ExprFile:        "",
    Function:        "",
    Result:          "2009-W53-5",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-fromMillis/isoWeekDate.json
/home/peter/talen/jsonata/tests.go:145: unknown component specifier X, (eval)
&main.TestT{
    Bindings: nil,
    Category: "ISO week date format",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "Sat 2 Jan 2010",
    Error:           nil,
    Expr:            "($ts := $toMillis('2010-01-02', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )",
    ExprFile:        "",
    Function:        "",
    Result:          "2009-W53-6",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-fromMillis/isoWeekDate.json
/home/peter/talen/jsonata/tests.go:145: unknown component specifier X, (eval)
&main.TestT{
    Bindings: nil,
    Category: "ISO week date format",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "Sun 3 Jan 2010",
    Error:           nil,
    Expr:            "($ts := $toMillis('2010-01-03', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )",
    ExprFile:        "",
    Function:        "",
    Result:          "2009-W53-7",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-join/case000.json
	--- .../groups/function-join/case001.json
	--- .../groups/function-join/case002.json
	--- .../groups/function-join/case003.json
	--- .../groups/function-join/case004.json
	--- .../groups/function-join/case005.json
	--- .../groups/function-join/case006.json
	--- .../groups/function-join/case007.json
	--- .../groups/function-join/case008.json
	--- .../groups/function-join/case009.json
	--- .../groups/function-join/case010.json
	--- .../groups/function-join/case011.json
	--- .../groups/function-keys/case000.json
	--- .../groups/function-keys/case001.json
	--- .../groups/function-keys/case002.json
	--- .../groups/function-keys/case003.json
	--- .../groups/function-keys/case004.json
	--- .../groups/function-keys/case005.json
	--- .../groups/function-keys/case006.json
	--- .../groups/function-length/case000.json
	--- .../groups/function-length/case001.json
	--- .../groups/function-length/case002.json
	--- .../groups/function-length/case003.json
	--- .../groups/function-length/case004.json
	--- .../groups/function-length/case005.json
	--- .../groups/function-length/case006.json
	--- .../groups/function-length/case007.json
	--- .../groups/function-length/case008.json
	--- .../groups/function-length/case009.json
	--- .../groups/function-length/case010.json
	--- .../groups/function-length/case011.json
	--- .../groups/function-length/case012.json
	--- .../groups/function-length/case013.json
	--- .../groups/function-length/case014.json
	--- .../groups/function-length/case015.json
	--- .../groups/function-length/case016.json
	--- .../groups/function-lookup/case000.json
	--- .../groups/function-lookup/case001.json
	--- .../groups/function-lookup/case002.json
/home/peter/talen/jsonata/tests.go:131: No results expected, got <nil>, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:         "dataset5",
    Depth:           0,
    Description:     "",
    Error:           nil,
    Expr:            "$lookup(Account.Order.Product.ProductID, \"Product Name\")",
    ExprFile:        "",
    Function:        "",
    Result:          nil,
    Timelimit:       0,
    Token:           "",
    UndefinedResult: true,
    Unordered:       false,
}
	--- .../groups/function-lookup/case003.json
	--- .../groups/function-lowercase/case000.json
	--- .../groups/function-lowercase/case001.json
	--- .../groups/function-max/case000.json
	--- .../groups/function-max/case001.json
	--- .../groups/function-max/case002.json
	--- .../groups/function-max/case003.json
	--- .../groups/function-max/case004.json
	--- .../groups/function-max/case005.json
	--- .../groups/function-max/case006.json
	--- .../groups/function-max/case007.json
	--- .../groups/function-max/case008.json
	--- .../groups/function-max/case009.json
	--- .../groups/function-max/case010.json
	--- .../groups/function-max/case011.json
	--- .../groups/function-max/case012.json
	--- .../groups/function-max/case013.json
	--- .../groups/function-max/case014.json
	--- .../groups/function-max/case015.json
	--- .../groups/function-max/case016.json
	--- .../groups/function-max/case017.json
	--- .../groups/function-max/case018.json
	--- .../groups/function-max/case019.json
	--- .../groups/function-max/case020.json
	--- .../groups/function-max/case021.json
	--- .../groups/function-max/case022.json
	--- .../groups/function-max/case023.json
	--- .../groups/function-max/case024.json
	--- .../groups/function-max/case025.json
	--- .../groups/function-max/case026.json
	--- .../groups/function-merge/case000.json
	--- .../groups/function-merge/case001.json
	--- .../groups/function-merge/case002.json
	--- .../groups/function-merge/case003.json
	--- .../groups/function-merge/case004.json
	--- .../groups/function-number/case000.json
	--- .../groups/function-number/case001.json
	--- .../groups/function-number/case002.json
	--- .../groups/function-number/case003.json
	--- .../groups/function-number/case004.json
	--- .../groups/function-number/case005.json
	--- .../groups/function-number/case006.json
	--- .../groups/function-number/case007.json
	--- .../groups/function-number/case008.json
	--- .../groups/function-number/case009.json
	--- .../groups/function-number/case010.json
	--- .../groups/function-number/case011.json
	--- .../groups/function-number/case012.json
	--- .../groups/function-number/case013.json
	--- .../groups/function-number/case014.json
	--- .../groups/function-number/case015.json
	--- .../groups/function-number/case016.json
	--- .../groups/function-number/case017.json
	--- .../groups/function-number/case018.json
	--- .../groups/function-number/case019.json
	--- .../groups/function-number/case020.json
	--- .../groups/function-number/case021.json
	--- .../groups/function-number/case022.json
	--- .../groups/function-number/case023.json
	--- .../groups/function-number/case024.json
	--- .../groups/function-number/case025.json
	--- .../groups/function-number/case026.json
	--- .../groups/function-number/case027.json
	--- .../groups/function-number/case028.json
	--- .../groups/function-number/case029.json
	--- .../groups/function-number/case030.json
	--- .../groups/function-pad/case000.json
	--- .../groups/function-pad/case001.json
	--- .../groups/function-pad/case002.json
	--- .../groups/function-pad/case003.json
	--- .../groups/function-pad/case004.json
	--- .../groups/function-pad/case005.json
	--- .../groups/function-pad/case006.json
	--- .../groups/function-pad/case007.json
	--- .../groups/function-pad/case008.json
	--- .../groups/function-pad/case009.json
	--- .../groups/function-pad/case010.json
	--- .../groups/function-parseInteger/parseInteger.json
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "decimal-digit-pattern - cardinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should parse a number",
    Error:           nil,
    Expr:            "$parseInteger('123', '000')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(123),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "decimal-digit-pattern - cardinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should parse number padded with zeros",
    Error:           nil,
    Expr:            "$parseInteger('0123', '0000')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(123),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "decimal-digit-pattern - cardinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should parse number",
    Error:           nil,
    Expr:            "$parseInteger('1234', '0')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(1234),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "decimal-digit-pattern - cardinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should parse number with optional digits",
    Error:           nil,
    Expr:            "$parseInteger('1234', '###0')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(1234),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "decimal-digit-pattern - cardinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should parse number with optional digits",
    Error:           nil,
    Expr:            "$parseInteger('12', '###0')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(12),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "decimal-digit-pattern - ordinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should parse a number",
    Error:           nil,
    Expr:            "$parseInteger('123rd', '000;o')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(123),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "decimal-digit-pattern - ordinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should pad number with zeros",
    Error:           nil,
    Expr:            "$parseInteger('1st', '0;o')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(1),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "decimal-digit-pattern - ordinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should pad number with zeros",
    Error:           nil,
    Expr:            "$parseInteger('28th', '#0;o')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(28),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "decimal-digit-pattern - ordinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should pad number with zeros",
    Error:           nil,
    Expr:            "$parseInteger('1234th', '###0;o')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(1234),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "decimal-digit-pattern - ordinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should pad number with zeros",
    Error:           nil,
    Expr:            "$parseInteger('12th', '###0;o')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(12),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "decimal-digit-pattern - unicode decimal groups",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should insert regular groups",
    Error:           nil,
    Expr:            "$parseInteger('١٢٣٤٠', '###١')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(12340),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "decimal-digit-pattern - unicode decimal groups",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should insert regular groups",
    Error:           nil,
    Expr:            "$parseInteger('１２３４０', '###０')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(12340),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "decimal-digit-pattern - grouping separator",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should insert regular groups",
    Error:           nil,
    Expr:            "$parseInteger('12', '#,##0')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(12),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "decimal-digit-pattern - grouping separator",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should insert regular groups",
    Error:           nil,
    Expr:            "$parseInteger('1,200', '#,##0')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(1200),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "decimal-digit-pattern - grouping separator",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should insert regular groups",
    Error:           nil,
    Expr:            "$parseInteger('12,345,678', '#,##0')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(1.2345678e+07),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "decimal-digit-pattern - grouping separator",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should insert regular groups",
    Error:           nil,
    Expr:            "$parseInteger('1,234,567,890', '#,##0')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(1.23456789e+09),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "decimal-digit-pattern - grouping separator",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should insert regular groups",
    Error:           nil,
    Expr:            "$parseInteger('1,234,567,890', '#,###,##0')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(1.23456789e+09),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "decimal-digit-pattern - grouping separator",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should insert non-regular groups - different chars",
    Error:           nil,
    Expr:            "$parseInteger('1234:567,890', '#:###,##0')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(1.23456789e+09),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "decimal-digit-pattern - grouping separator",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should insert non-regular groups - different positions",
    Error:           nil,
    Expr:            "$parseInteger('12345,67,890', '##,##,##0')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(1.23456789e+09),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "roman numerals",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "0",
    Error:           nil,
    Expr:            "$parseInteger('', 'I')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(0),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "roman numerals",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "1984",
    Error:           nil,
    Expr:            "$parseInteger('MCMLXXXIV', 'I')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(1984),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "roman numerals",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "99",
    Error:           nil,
    Expr:            "$parseInteger('xcix', 'i')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(99),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - cardinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "12",
    Error:           nil,
    Expr:            "$parseInteger('twelve', 'w')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(12),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - cardinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "20",
    Error:           nil,
    Expr:            "$parseInteger('twenty', 'w')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(20),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - cardinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "34",
    Error:           nil,
    Expr:            "$parseInteger('thirty-four', 'w')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(34),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - cardinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "99",
    Error:           nil,
    Expr:            "$parseInteger('NINETY-NINE', 'W')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(99),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - cardinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "100",
    Error:           nil,
    Expr:            "$parseInteger('one hundred', 'w')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(100),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - cardinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "555",
    Error:           nil,
    Expr:            "$parseInteger('FIVE HUNDRED AND FIFTY-FIVE', 'W')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(555),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - cardinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "555",
    Error:           nil,
    Expr:            "$parseInteger('Five Hundred and Fifty-Five', 'Ww')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(555),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - cardinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "919",
    Error:           nil,
    Expr:            "$parseInteger('nine hundred and nineteen', 'w')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(919),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - cardinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "730",
    Error:           nil,
    Expr:            "$parseInteger('seven hundred and thirty', 'w')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(730),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - cardinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "1000",
    Error:           nil,
    Expr:            "$parseInteger('one thousand', 'w')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(1000),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - cardinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "3730",
    Error:           nil,
    Expr:            "$parseInteger('three thousand, seven hundred and thirty', 'w')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(3730),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - cardinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "327730",
    Error:           nil,
    Expr:            "$parseInteger('three hundred and twenty-seven thousand, seven hundred and thirty', 'w')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(327730),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - cardinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "4327730",
    Error:           nil,
    Expr:            "$parseInteger('four million, three hundred and twenty-seven thousand, seven hundred and thirty', 'w')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(4.32773e+06),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - cardinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "1e12 + 1",
    Error:           nil,
    Expr:            "$parseInteger('one trillion and one', 'w')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(1.000000000001e+12),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - cardinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "1234567890123",
    Error:           nil,
    Expr:            "$parseInteger('one trillion, two hundred and thirty-four billion, five hundred and sixty-seven million, eight hundred and ninety thousand, one hundred and twenty-three', 'w')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(1.234567890123e+12),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - cardinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "1e15",
    Error:           nil,
    Expr:            "$parseInteger('one thousand trillion', 'w')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(1e+15),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - cardinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "1e46",
    Error:           nil,
    Expr:            "$parseInteger('ten billion trillion trillion trillion', 'w')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(1e+46),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - ordinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "12",
    Error:           nil,
    Expr:            "$parseInteger('twelfth', 'w;o')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(12),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - ordinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "20",
    Error:           nil,
    Expr:            "$parseInteger('twentieth', 'w;o')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(20),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - ordinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "34",
    Error:           nil,
    Expr:            "$parseInteger('thirty-fourth', 'w;o')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(34),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - ordinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "99",
    Error:           nil,
    Expr:            "$parseInteger('NINETY-NINTH', 'W;o')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(99),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - ordinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "100",
    Error:           nil,
    Expr:            "$parseInteger('one hundredth', 'w;o')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(100),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - ordinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "555",
    Error:           nil,
    Expr:            "$parseInteger('FIVE HUNDRED AND FIFTY-FIFTH', 'W;o')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(555),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - ordinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "919",
    Error:           nil,
    Expr:            "$parseInteger('nine hundred and nineteenth', 'w;o')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(919),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - ordinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "730",
    Error:           nil,
    Expr:            "$parseInteger('seven hundred and thirtieth', 'w;o')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(730),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - ordinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "733",
    Error:           nil,
    Expr:            "$parseInteger('Seven Hundred and Thirty-Third', 'Ww;o')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(733),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - ordinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "1000",
    Error:           nil,
    Expr:            "$parseInteger('one thousandth', 'w;o')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(1000),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - ordinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "3730",
    Error:           nil,
    Expr:            "$parseInteger('three thousand, seven hundred and thirty-first', 'w;o')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(3731),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - ordinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "327730",
    Error:           nil,
    Expr:            "$parseInteger('three hundred and twenty-seven thousand, seven hundred and thirteenth', 'w;o')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(327713),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - ordinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "4327730",
    Error:           nil,
    Expr:            "$parseInteger('four million, three hundred and twenty-seven thousand, seven hundred and thirty-second', 'w;o')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(4.327732e+06),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "words - ordinal",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "1e12 + 1",
    Error:           nil,
    Expr:            "$parseInteger('one trillion and first', 'w;o')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(1.000000000001e+12),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "spreadsheet column names",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "1",
    Error:           nil,
    Expr:            "$parseInteger('A', 'A')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(1),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "spreadsheet column names",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "12",
    Error:           nil,
    Expr:            "$parseInteger('l', 'a')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(12),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "spreadsheet column names",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "26",
    Error:           nil,
    Expr:            "$parseInteger('z', 'a')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(26),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "spreadsheet column names",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "27",
    Error:           nil,
    Expr:            "$parseInteger('aa', 'a')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(27),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "spreadsheet column names",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "300",
    Error:           nil,
    Expr:            "$parseInteger('KN', 'A')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(300),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
/home/peter/talen/jsonata/tests.go:145: cannot call non-function $parseInteger, (eval)
&main.TestT{
    Bindings: nil,
    Category: "spreadsheet column names",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "123456",
    Error:           nil,
    Expr:            "$parseInteger('FZPH', 'A')",
    ExprFile:        "",
    Function:        "#parseInteger",
    Result:          float64(123456),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-parseInteger/parseInteger.json
	--- .../groups/function-power/case000.json
	--- .../groups/function-power/case001.json
	--- .../groups/function-power/case002.json
	--- .../groups/function-power/case003.json
	--- .../groups/function-power/case004.json
	--- .../groups/function-power/case005.json
	--- .../groups/function-power/case006.json
	--- .../groups/function-replace/case000.json
	--- .../groups/function-replace/case001.json
	--- .../groups/function-replace/case002.json
	--- .../groups/function-replace/case003.json
	--- .../groups/function-replace/case004.json
	--- .../groups/function-replace/case005.json
	--- .../groups/function-replace/case006.json
	--- .../groups/function-replace/case007.json
	--- .../groups/function-replace/case008.json
	--- .../groups/function-replace/case009.json
	--- .../groups/function-replace/case010.json
	--- .../groups/function-replace/case011.json
	--- .../groups/function-reverse/case000.json
	--- .../groups/function-reverse/case001.json
	--- .../groups/function-reverse/case002.json
	--- .../groups/function-reverse/case003.json
	--- .../groups/function-round/case000.json
	--- .../groups/function-round/case001.json
	--- .../groups/function-round/case002.json
	--- .../groups/function-round/case003.json
	--- .../groups/function-round/case004.json
	--- .../groups/function-round/case005.json
	--- .../groups/function-round/case006.json
	--- .../groups/function-round/case007.json
	--- .../groups/function-round/case008.json
	--- .../groups/function-round/case009.json
	--- .../groups/function-round/case010.json
	--- .../groups/function-round/case011.json
	--- .../groups/function-round/case012.json
	--- .../groups/function-round/case013.json
	--- .../groups/function-round/case014.json
	--- .../groups/function-round/case015.json
	--- .../groups/function-round/case016.json
	--- .../groups/function-round/case017.json
	--- .../groups/function-shuffle/case000.json
	--- .../groups/function-shuffle/case001.json
	--- .../groups/function-shuffle/case002.json
	--- .../groups/function-shuffle/case003.json
	--- .../groups/function-sift/case000.json
	--- .../groups/function-sift/case001.json
	--- .../groups/function-sift/case002.json
	--- .../groups/function-sift/case003.json
	--- .../groups/function-sift/case004.json
	--- .../groups/function-signatures/case000.json
	--- .../groups/function-signatures/case001.json
/home/peter/talen/jsonata/tests.go:131: No results expected, got true, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category:        "",
    Code:            "",
    Data:            nil,
    Dataset:         "",
    Depth:           0,
    Description:     "",
    Error:           nil,
    Expr:            "λ($arg)<b:b>{$not($arg)}(foo)",
    ExprFile:        "",
    Function:        "",
    Result:          nil,
    Timelimit:       0,
    Token:           "",
    UndefinedResult: true,
    Unordered:       false,
}
	--- .../groups/function-signatures/case002.json
	--- .../groups/function-signatures/case003.json
	--- .../groups/function-signatures/case004.json
	--- .../groups/function-signatures/case005.json
	--- .../groups/function-signatures/case006.json
	--- .../groups/function-signatures/case007.json
	--- .../groups/function-signatures/case008.json
	--- .../groups/function-signatures/case009.json
	--- .../groups/function-signatures/case010.json
	--- .../groups/function-signatures/case011.json
	--- .../groups/function-signatures/case012.json
	--- .../groups/function-signatures/case013.json
	--- .../groups/function-signatures/case014.json
	--- .../groups/function-signatures/case015.json
	--- .../groups/function-signatures/case016.json
	--- .../groups/function-signatures/case017.json
	--- .../groups/function-signatures/case018.json
	--- .../groups/function-signatures/case019.json
	--- .../groups/function-signatures/case020.json
	--- .../groups/function-signatures/case021.json
	--- .../groups/function-signatures/case022.json
	--- .../groups/function-signatures/case023.json
	--- .../groups/function-signatures/case024.json
	--- .../groups/function-signatures/case025.json
	--- .../groups/function-signatures/case026.json
	--- .../groups/function-signatures/case027.json
	--- .../groups/function-signatures/case028.json
	--- .../groups/function-signatures/case029.json
	--- .../groups/function-signatures/case030.json
	--- .../groups/function-signatures/case031.json
	--- .../groups/function-signatures/case032.json
	--- .../groups/function-signatures/case033.json
	--- .../groups/function-signatures/case034.json
	--- .../groups/function-sort/case000.json
	--- .../groups/function-sort/case001.json
	--- .../groups/function-sort/case002.json
	--- .../groups/function-sort/case003.json
	--- .../groups/function-sort/case004.json
	--- .../groups/function-sort/case005.json
	--- .../groups/function-sort/case006.json
/home/peter/talen/jsonata/tests.go:113: invalid path step "Product Name": paths cannot contain nulls, strings, numbers or booleans, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:     "dataset5",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "$sort(Account.Order.Product.\"Product Name\")",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        "Bowler Hat",
        "Bowler Hat",
        "Cloak",
        "Trilby hat",
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-sort/case007.json
	--- .../groups/function-sort/case008.json
	--- .../groups/function-sort/case009.json
	--- .../groups/function-sort/case010.json
	--- .../groups/function-split/case000.json
	--- .../groups/function-split/case001.json
	--- .../groups/function-split/case002.json
	--- .../groups/function-split/case003.json
	--- .../groups/function-split/case004.json
	--- .../groups/function-split/case005.json
	--- .../groups/function-split/case006.json
	--- .../groups/function-split/case007.json
	--- .../groups/function-split/case008.json
	--- .../groups/function-split/case009.json
	--- .../groups/function-split/case010.json
	--- .../groups/function-split/case011.json
	--- .../groups/function-split/case012.json
	--- .../groups/function-split/case013.json
	--- .../groups/function-split/case014.json
	--- .../groups/function-split/case015.json
	--- .../groups/function-split/case016.json
	--- .../groups/function-split/case017.json
	--- .../groups/function-split/case018.json
	--- .../groups/function-spread/case000.json
	--- .../groups/function-spread/case001.json
	--- .../groups/function-spread/case002.json
	--- .../groups/function-spread/case003.json
	--- .../groups/function-sqrt/case000.json
	--- .../groups/function-sqrt/case001.json
	--- .../groups/function-sqrt/case002.json
	--- .../groups/function-sqrt/case003.json
	--- .../groups/function-string/case000.json
	--- .../groups/function-string/case001.json
EXPECTED:
"3.14285714285714"
GOT:
"3.142857142857143"
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:         "dataset5",
    Depth:           0,
    Description:     "",
    Error:           nil,
    Expr:            "$string(22/7)",
    ExprFile:        "",
    Function:        "",
    Result:          "3.14285714285714",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-string/case002.json
	--- .../groups/function-string/case003.json
	--- .../groups/function-string/case004.json
	--- .../groups/function-string/case005.json
	--- .../groups/function-string/case006.json
	--- .../groups/function-string/case007.json
	--- .../groups/function-string/case008.json
EXPECTED:
[
  "90.57",
  "245.79"
]
GOT:
[
  "90.57000000000001",
  "245.79000000000002"
]
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:     "dataset5",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "Account.Order.$string($sum(Product.(Price* Quantity)))",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        "90.57",
        "245.79",
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-string/case009.json
	--- .../groups/function-string/case010.json
	--- .../groups/function-string/case011.json
	--- .../groups/function-string/case012.json
	--- .../groups/function-string/case013.json
	--- .../groups/function-string/case014.json
	--- .../groups/function-string/case015.json
	--- .../groups/function-string/case016.json
	--- .../groups/function-string/case017.json
	--- .../groups/function-string/case018.json
EXPECTED:
"{\"string\":\"hello\",\"number\":39.4,\"null\":null,\"boolean\":false,\"function\":\"\",\"lambda\":\"\",\"object\":{\"str\":\"another\",\"lambda2\":\"\"},\"array\":[]}"
GOT:
"{\"array\":[],\"boolean\":false,\"function\":\"\",\"lambda\":\"\",\"null\":null,\"number\":39.4,\"object\":{\"lambda2\":\"\",\"str\":\"another\"},\"string\":\"hello\"}"
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category:        "",
    Code:            "",
    Data:            nil,
    Dataset:         "",
    Depth:           0,
    Description:     "",
    Error:           nil,
    Expr:            "$string({  \"string\": \"hello\",  \"number\": 78.8 / 2,  \"null\":null,  \"boolean\": false,  \"function\": $sum,  \"lambda\": function(){true},  \"object\": {    \"str\": \"another\",    \"lambda2\": function($n){$n}  },  \"array\": []})",
    ExprFile:        "",
    Function:        "",
    Result:          "{\"string\":\"hello\",\"number\":39.4,\"null\":null,\"boolean\":false,\"function\":\"\",\"lambda\":\"\",\"object\":{\"str\":\"another\",\"lambda2\":\"\"},\"array\":[]}",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-string/case019.json
	--- .../groups/function-string/case020.json
	--- .../groups/function-string/case021.json
	--- .../groups/function-string/case022.json
	--- .../groups/function-string/case023.json
/home/peter/talen/jsonata/tests.go:145: function "string" takes 1 argument(s), got 2, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category:        "",
    Code:            "",
    Data:            nil,
    Dataset:         "",
    Depth:           0,
    Description:     "",
    Error:           nil,
    Expr:            "$string({\"string\": \"hello\"}, false)",
    ExprFile:        "",
    Function:        "",
    Result:          "{\"string\":\"hello\"}",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-string/case024.json
/home/peter/talen/jsonata/tests.go:145: function "string" takes 1 argument(s), got 2, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category:        "",
    Code:            "",
    Data:            nil,
    Dataset:         "",
    Depth:           0,
    Description:     "",
    Error:           nil,
    Expr:            "$string({\"string\": \"hello\"}, true)",
    ExprFile:        "",
    Function:        "",
    Result:          "{\n  \"string\": \"hello\"\n}",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-string/case025.json
/home/peter/talen/jsonata/tests.go:145: function "string" takes 1 argument(s), got 2, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category:        "",
    Code:            "",
    Data:            nil,
    Dataset:         "",
    Depth:           0,
    Description:     "",
    Error:           nil,
    Expr:            "$string([\"string\", 5], false)",
    ExprFile:        "",
    Function:        "",
    Result:          "[\"string\",5]",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-string/case026.json
/home/peter/talen/jsonata/tests.go:145: function "string" takes 1 argument(s), got 2, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category:        "",
    Code:            "",
    Data:            nil,
    Dataset:         "",
    Depth:           0,
    Description:     "",
    Error:           nil,
    Expr:            "$string([\"string\", 5], true)",
    ExprFile:        "",
    Function:        "",
    Result:          "[\n  \"string\",\n  5\n]",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-string/case027.json
/home/peter/talen/jsonata/tests.go:145: function "string" takes 1 argument(s), got 2, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category:        "",
    Code:            "",
    Data:            nil,
    Dataset:         "",
    Depth:           0,
    Description:     "",
    Error:           nil,
    Expr:            "$string({  \"string\": \"hello\",  \"number\": 78.8 / 2,  \"null\":null,  \"boolean\": false,  \"function\": $sum,  \"lambda\": function(){true},  \"object\": {    \"str\": \"another\",    \"lambda2\": function($n){$n}  },  \"array\": []}, false)",
    ExprFile:        "",
    Function:        "",
    Result:          "{\"string\":\"hello\",\"number\":39.4,\"null\":null,\"boolean\":false,\"function\":\"\",\"lambda\":\"\",\"object\":{\"str\":\"another\",\"lambda2\":\"\"},\"array\":[]}",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-string/case028.json
/home/peter/talen/jsonata/tests.go:145: function "string" takes 1 argument(s), got 2, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category:        "",
    Code:            "",
    Data:            nil,
    Dataset:         "",
    Depth:           0,
    Description:     "",
    Error:           nil,
    Expr:            "$string({  \"string\": \"hello\",  \"number\": 78.8 / 2,  \"null\":null,  \"boolean\": false,  \"function\": $sum,  \"lambda\": function(){true},  \"object\": {    \"str\": \"another\",    \"lambda2\": function($n){$n}  },  \"array\": []}, true)",
    ExprFile:        "",
    Function:        "",
    Result:          "{\n  \"string\": \"hello\",\n  \"number\": 39.4,\n  \"null\": null,\n  \"boolean\": false,\n  \"function\": \"\",\n  \"lambda\": \"\",\n  \"object\": {\n    \"str\": \"another\",\n    \"lambda2\": \"\"\n  },\n  \"array\": []\n}",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-string/case029.json
	--- .../groups/function-substring/case000.json
	--- .../groups/function-substring/case001.json
	--- .../groups/function-substring/case002.json
	--- .../groups/function-substring/case003.json
	--- .../groups/function-substring/case004.json
	--- .../groups/function-substring/case005.json
	--- .../groups/function-substring/case006.json
	--- .../groups/function-substring/case007.json
	--- .../groups/function-substring/case008.json
	--- .../groups/function-substring/case009.json
	--- .../groups/function-substring/case010.json
	--- .../groups/function-substring/case011.json
	--- .../groups/function-substring/case012.json
	--- .../groups/function-substring/case013.json
	--- .../groups/function-substring/case014.json
	--- .../groups/function-substring/case015.json
	--- .../groups/function-substring/case016.json
	--- .../groups/function-substring/case017.json
	--- .../groups/function-substring/case018.json
	--- .../groups/function-substringAfter/case000.json
	--- .../groups/function-substringAfter/case001.json
	--- .../groups/function-substringAfter/case002.json
	--- .../groups/function-substringAfter/case003.json
	--- .../groups/function-substringAfter/case004.json
	--- .../groups/function-substringBefore/case000.json
	--- .../groups/function-substringBefore/case001.json
	--- .../groups/function-substringBefore/case002.json
	--- .../groups/function-substringBefore/case003.json
	--- .../groups/function-substringBefore/case004.json
	--- .../groups/function-sum/case000.json
	--- .../groups/function-sum/case001.json
	--- .../groups/function-sum/case002.json
EXPECTED:
[
  "order103: 90.57",
  "order104: 245.79"
]
GOT:
[
  "order103: 90.57000000000001",
  "order104: 245.79000000000002"
]
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:     "dataset5",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "Account.Order.(OrderID & \": \" & $sum(Product.(Price*Quantity)))",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        "order103: 90.57",
        "order104: 245.79",
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-sum/case003.json
	--- .../groups/function-sum/case004.json
	--- .../groups/function-sum/case005.json
	--- .../groups/function-sum/case006.json
	--- .../groups/function-tomillis/case001.json
	--- .../groups/function-tomillis/case002.json
	--- .../groups/function-tomillis/case003.json
	--- .../groups/function-tomillis/case004.json
	--- .../groups/function-tomillis/case005.json
	--- .../groups/function-tomillis/case006.json
	--- .../groups/function-tomillis/case007.json
	--- .../groups/function-tomillis/case008.json
	--- .../groups/function-tomillis/case009.json
	--- .../groups/function-tomillis/case010.json
	--- .../groups/function-tomillis/case011.json
	--- .../groups/function-tomillis/case012.json
	--- .../groups/function-tomillis/parseDateTime.json
	--- .../groups/function-tomillis/parseDateTime.json
	--- .../groups/function-tomillis/parseDateTime.json
	--- .../groups/function-tomillis/parseDateTime.json
	--- .../groups/function-tomillis/parseDateTime.json
	--- .../groups/function-tomillis/parseDateTime.json
/home/peter/talen/jsonata/tests.go:145: could not parse time "27th 3 1976", (eval)
&main.TestT{
    Bindings: nil,
    Category: "ordinal numeric dates",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should parse year/month/day",
    Error:           nil,
    Expr:            "$toMillis('27th 3 1976', '[D1o] [M#1] [Y0001]')",
    ExprFile:        "",
    Function:        "#toMillis",
    Result:          float64(1.967328e+11),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-tomillis/parseDateTime.json
/home/peter/talen/jsonata/tests.go:145: could not parse time "21st 12 1881", (eval)
&main.TestT{
    Bindings: nil,
    Category: "ordinal numeric dates",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should parse year/month/day",
    Error:           nil,
    Expr:            "$toMillis('21st 12 1881', '[D1o] [M01] [Y0001]')",
    ExprFile:        "",
    Function:        "#toMillis",
    Result:          float64(-2.7779328e+12),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-tomillis/parseDateTime.json
	--- .../groups/function-tomillis/parseDateTime.json
/home/peter/talen/jsonata/tests.go:145: could not parse time "MCMLXXXIV", (eval)
&main.TestT{
    Bindings: nil,
    Category: "roman numeral dates",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should parse year",
    Error:           nil,
    Expr:            "$toMillis('MCMLXXXIV', '[YI]')",
    ExprFile:        "",
    Function:        "#toMillis",
    Result:          float64(4.417632e+11),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-tomillis/parseDateTime.json
/home/peter/talen/jsonata/tests.go:145: could not parse time "27 03 MMXVIII", (eval)
&main.TestT{
    Bindings: nil,
    Category: "roman numeral dates",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should parse year/month/day",
    Error:           nil,
    Expr:            "$toMillis('27 03 MMXVIII', '[D1] [M01] [YI]')",
    ExprFile:        "",
    Function:        "#toMillis",
    Result:          float64(1.5221088e+12),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-tomillis/parseDateTime.json
/home/peter/talen/jsonata/tests.go:145: could not parse time "27 iii MMXVIII", (eval)
&main.TestT{
    Bindings: nil,
    Category: "roman numeral dates",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should parse year/month/day",
    Error:           nil,
    Expr:            "$toMillis('27 iii MMXVIII', '[D1] [Mi] [YI]')",
    ExprFile:        "",
    Function:        "#toMillis",
    Result:          float64(1.5221088e+12),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-tomillis/parseDateTime.json
/home/peter/talen/jsonata/tests.go:145: could not parse time "w C mmxviii", (eval)
&main.TestT{
    Bindings: nil,
    Category: "dates with letters instead of numbers",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "day/month in letters, year in roman numerals",
    Error:           nil,
    Expr:            "$toMillis('w C mmxviii', '[Da] [MA] [Yi]')",
    ExprFile:        "",
    Function:        "#toMillis",
    Result:          float64(1.5217632e+12),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-tomillis/parseDateTime.json
/home/peter/talen/jsonata/tests.go:145: could not parse time "ae C mmxviii", (eval)
&main.TestT{
    Bindings: nil,
    Category: "dates with letters instead of numbers",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "day/month in letters, year in roman numerals",
    Error:           nil,
    Expr:            "$toMillis('ae C mmxviii', '[Da] [MA] [Yi]')",
    ExprFile:        "",
    Function:        "#toMillis",
    Result:          float64(1.5224544e+12),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-tomillis/parseDateTime.json
/home/peter/talen/jsonata/tests.go:145: could not parse time "27th April 2008", (eval)
&main.TestT{
    Bindings: nil,
    Category: "months in words",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should parse year/month/day",
    Error:           nil,
    Expr:            "$toMillis('27th April 2008', '[D1o] [MNn] [Y0001]')",
    ExprFile:        "",
    Function:        "#toMillis",
    Result:          float64(1.2092544e+12),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-tomillis/parseDateTime.json
	--- .../groups/function-tomillis/parseDateTime.json
	--- .../groups/function-tomillis/parseDateTime.json
/home/peter/talen/jsonata/tests.go:145: could not parse time "one thousand, nine hundred and eighty-four", (eval)
&main.TestT{
    Bindings: nil,
    Category: "dates/years in words",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should parse year in words",
    Error:           nil,
    Expr:            "$toMillis('one thousand, nine hundred and eighty-four', '[Yw]')",
    ExprFile:        "",
    Function:        "#toMillis",
    Result:          float64(4.417632e+11),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-tomillis/parseDateTime.json
/home/peter/talen/jsonata/tests.go:145: could not parse time "nineteen hundred and eighty-four", (eval)
&main.TestT{
    Bindings: nil,
    Category: "dates/years in words",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should parse year in words",
    Error:           nil,
    Expr:            "$toMillis('nineteen hundred and eighty-four', '[Yw]')",
    ExprFile:        "",
    Function:        "#toMillis",
    Result:          float64(4.417632e+11),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-tomillis/parseDateTime.json
/home/peter/talen/jsonata/tests.go:145: could not parse time "twenty-seven April 2008", (eval)
&main.TestT{
    Bindings: nil,
    Category: "dates/years in words",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should parse date/month in words",
    Error:           nil,
    Expr:            "$toMillis('twenty-seven April 2008', '[Dw] [MNn] [Y0001]')",
    ExprFile:        "",
    Function:        "#toMillis",
    Result:          float64(1.2092544e+12),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-tomillis/parseDateTime.json
/home/peter/talen/jsonata/tests.go:145: could not parse time "twenty-seventh April 2008", (eval)
&main.TestT{
    Bindings: nil,
    Category: "dates/years in words",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should parse date/month in ordinal words",
    Error:           nil,
    Expr:            "$toMillis('twenty-seventh April 2008', '[Dw] [MNn] [Y0001]')",
    ExprFile:        "",
    Function:        "#toMillis",
    Result:          float64(1.2092544e+12),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-tomillis/parseDateTime.json
/home/peter/talen/jsonata/tests.go:145: could not parse time "twenty-first August two thousand and seventeen", (eval)
&main.TestT{
    Bindings: nil,
    Category: "dates/years in words",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should parse ordinal date/month/year",
    Error:           nil,
    Expr:            "$toMillis('twenty-first August two thousand and seventeen', '[Dw] [MNn] [Yw]')",
    ExprFile:        "",
    Function:        "#toMillis",
    Result:          float64(1.5032736e+12),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-tomillis/parseDateTime.json
/home/peter/talen/jsonata/tests.go:145: could not parse time "TWENTY-SECOND August two thousand and seventeen", (eval)
&main.TestT{
    Bindings: nil,
    Category: "dates/years in words",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should parse ordinal date/month/year",
    Error:           nil,
    Expr:            "$toMillis('TWENTY-SECOND August two thousand and seventeen', '[DW] [MNn] [Yw]')",
    ExprFile:        "",
    Function:        "#toMillis",
    Result:          float64(1.50336e+12),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-tomillis/parseDateTime.json
/home/peter/talen/jsonata/tests.go:145: could not parse time "Twentieth of August, two thousand and seventeen", (eval)
&main.TestT{
    Bindings: nil,
    Category: "dates/years in words",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should parse ordinal date/month/year",
    Error:           nil,
    Expr:            "$toMillis('Twentieth of August, two thousand and seventeen', '[DW] of [MNn], [Yw]')",
    ExprFile:        "",
    Function:        "#toMillis",
    Result:          float64(1.5031872e+12),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-tomillis/parseDateTime.json
	--- .../groups/function-tomillis/parseDateTime.json
	--- .../groups/function-tomillis/parseDateTime.json
	--- .../groups/function-tomillis/parseDateTime.json
	--- .../groups/function-tomillis/parseDateTime.json
	--- .../groups/function-tomillis/parseDateTime.json
EXPECTED:
true
GOT:
false
&main.TestT{
    Bindings: nil,
    Category: "default unspecified parts",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "time only defaults to todays date",
    Error:           nil,
    Expr:            "$toMillis('13:45', '[H]:[m]') ~> $fromMillis() ~> $substringBefore('T') = $substringBefore($now(), 'T')",
    ExprFile:        "",
    Function:        "#toMillis",
    Result:          bool(true),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-tomillis/parseDateTime.json
EXPECTED:
"13:45:00.000Z"
GOT:
"12:28:41.129Z"
&main.TestT{
    Bindings: nil,
    Category: "default unspecified parts",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "hours/minutes only defaults seconds to zero",
    Error:           nil,
    Expr:            "$toMillis('13:45', '[H]:[m]') ~> $fromMillis() ~> $substringAfter('T')",
    ExprFile:        "",
    Function:        "#toMillis",
    Result:          "13:45:00.000Z",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-tomillis/parseDateTime.json
/home/peter/talen/jsonata/tests.go:145: could not parse time "Wednesday, 14th November 2018", (eval)
&main.TestT{
    Bindings: nil,
    Category: "default unspecified parts",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "date only defaults time to midnight",
    Error:           nil,
    Expr:            "$toMillis('Wednesday, 14th November 2018', '[FNn], [D1o] [MNn] [Y]') ~> $fromMillis()",
    ExprFile:        "",
    Function:        "#toMillis",
    Result:          "2018-11-14T00:00:00.000Z",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-tomillis/parseDateTime.json
/home/peter/talen/jsonata/tests.go:145: could not parse time "Mon, Twelfth November 2018", (eval)
&main.TestT{
    Bindings: nil,
    Category: "default unspecified parts",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "date only defaults time to midnight",
    Error:           nil,
    Expr:            "$toMillis('Mon, Twelfth November 2018', '[FNn,*-3], [DWwo] [MNn] [Y]') ~> $fromMillis()",
    ExprFile:        "",
    Function:        "#toMillis",
    Result:          "2018-11-12T00:00:00.000Z",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-tomillis/parseDateTime.json
/home/peter/talen/jsonata/tests.go:145: could not parse time "2018--180", (eval)
&main.TestT{
    Bindings: nil,
    Category: "parsing day-of-year",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "180th day of 2018 is 29th June",
    Error:           nil,
    Expr:            "$toMillis('2018--180', '[Y]--[d]') ~> $fromMillis()",
    ExprFile:        "",
    Function:        "#toMillis",
    Result:          "2018-06-29T00:00:00.000Z",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-tomillis/parseDateTime.json
/home/peter/talen/jsonata/tests.go:145: could not parse time "three hundred and sixty-fifth day of 2018", (eval)
&main.TestT{
    Bindings: nil,
    Category: "parsing day-of-year",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "365th day of 2018 is 31st December",
    Error:           nil,
    Expr:            "$toMillis('three hundred and sixty-fifth day of 2018', '[dwo] day of [Y]') ~> $fromMillis()",
    ExprFile:        "",
    Function:        "#toMillis",
    Result:          "2018-12-31T00:00:00.000Z",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-tomillis/parseDateTime.json
	--- .../groups/function-tomillis/parseDateTime.json
	--- .../groups/function-tomillis/parseDateTime.json
/home/peter/talen/jsonata/tests.go:123: Expected error D3133, (eval)
&main.TestT{
    Bindings: nil,
    Category: "nothing matches",
    Code:     "D3133",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "picture string contains a named year",
    Error:           nil,
    Expr:            "$toMillis('2018-05-22', '[YN]-[M]-[D]')",
    ExprFile:        "",
    Function:        "#toMillis",
    Result:          nil,
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-tomillis/parseDateTime.json
/home/peter/talen/jsonata/tests.go:123: Expected error D3136, (eval)
&main.TestT{
    Bindings: nil,
    Category: "date/time underspecified (gaps)",
    Code:     "D3136",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "year/date with no month",
    Error:           nil,
    Expr:            "$toMillis('2018-22', '[Y]-[D]')",
    ExprFile:        "",
    Function:        "#toMillis",
    Result:          nil,
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-tomillis/parseDateTime.json
/home/peter/talen/jsonata/tests.go:123: Expected error D3136, (eval)
&main.TestT{
    Bindings: nil,
    Category: "date/time underspecified (gaps)",
    Code:     "D3136",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "month/date, min/sec with no hours",
    Error:           nil,
    Expr:            "$toMillis('5-22 23:59', '[M]-[D] [m]:[s]')",
    ExprFile:        "",
    Function:        "#toMillis",
    Result:          nil,
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-tomillis/parseDateTime.json
	--- .../groups/function-tomillis/parseDateTime.json
	--- .../groups/function-tomillis/parseDateTime.json
	--- .../groups/function-tomillis/parseDateTime.json
	--- .../groups/function-tomillis/parseDateTime.json
	--- .../groups/function-tomillis/parseDateTime.json
/home/peter/talen/jsonata/tests.go:145: could not parse time "2020-09-09 12:00:00 GMT-5", (eval)
&main.TestT{
    Bindings: nil,
    Category: "timezones",
    Code:     "",
    Data:     map[string]interface {}{
    },
    Dataset:         "",
    Depth:           0,
    Description:     "should parse a date containing timezones",
    Error:           nil,
    Expr:            "$toMillis('2020-09-09 12:00:00 GMT-5', '[Y0001]-[M01]-[D01] [H01]:[m01]:[s01] [z01]') ~> $fromMillis() ",
    ExprFile:        "",
    Function:        "#toMillis",
    Result:          "2020-09-09T17:00:00.000Z",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/function-tomillis/parseDateTime.json
	--- .../groups/function-trim/case000.json
	--- .../groups/function-trim/case001.json
	--- .../groups/function-trim/case002.json
	--- .../groups/function-typeOf/case001.json
	--- .../groups/function-typeOf/case002.json
	--- .../groups/function-typeOf/case003.json
	--- .../groups/function-typeOf/case004.json
	--- .../groups/function-typeOf/case005.json
	--- .../groups/function-typeOf/case006.json
	--- .../groups/function-typeOf/case007.json
	--- .../groups/function-typeOf/case008.json
	--- .../groups/function-typeOf/case009.json
	--- .../groups/function-typeOf/case010.json
	--- .../groups/function-typeOf/case011.json
	--- .../groups/function-typeOf/case012.json
	--- .../groups/function-typeOf/case013.json
	--- .../groups/function-uppercase/case000.json
	--- .../groups/function-uppercase/case001.json
	--- .../groups/function-zip/case000.json
	--- .../groups/function-zip/case001.json
	--- .../groups/function-zip/case002.json
	--- .../groups/function-zip/case003.json
	--- .../groups/function-zip/case004.json
	--- .../groups/function-zip/case005.json
	--- .../groups/higher-order-functions/case000.json
	--- .../groups/higher-order-functions/case001.json
	--- .../groups/higher-order-functions/case002.json
	--- .../groups/hof-filter/case000.json
	--- .../groups/hof-filter/case001.json
	--- .../groups/hof-filter/case002.json
EXPECTED:
5
GOT:
[
  5
]
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "data": float64(5),
    },
    Dataset:         "",
    Depth:           0,
    Description:     "",
    Error:           nil,
    Expr:            "$filter(data, function($d) { true })",
    ExprFile:        "",
    Function:        "",
    Result:          float64(5),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/hof-filter/case003.json
	--- .../groups/hof-map/case000.json
	--- .../groups/hof-map/case001.json
	--- .../groups/hof-map/case002.json
	--- .../groups/hof-map/case003.json
/home/peter/talen/jsonata/tests.go:113: invalid path step "Product Name": paths cannot contain nulls, strings, numbers or booleans, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:     "dataset5",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "Account.Order.Product ~> $map(λ($prod, $index) { $index+1 & \": \" & $prod.\"Product Name\" })",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        "1: Bowler Hat",
        "2: Trilby hat",
        "3: Bowler Hat",
        "4: Cloak",
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/hof-map/case004.json
/home/peter/talen/jsonata/tests.go:113: invalid path step "Product Name": paths cannot contain nulls, strings, numbers or booleans, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:     "dataset5",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "Account.Order.Product ~> $map(λ($prod, $index, $arr) { $index+1 & \"/\" & $count($arr) & \": \" & $prod.\"Product Name\" })",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        "1/4: Bowler Hat",
        "2/4: Trilby hat",
        "3/4: Bowler Hat",
        "4/4: Cloak",
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/hof-map/case005.json
	--- .../groups/hof-map/case006.json
	--- .../groups/hof-map/case007.json
	--- .../groups/hof-map/case008.json
	--- .../groups/hof-map/case009.json
	--- .../groups/hof-reduce/case000.json
	--- .../groups/hof-reduce/case001.json
	--- .../groups/hof-reduce/case002.json
	--- .../groups/hof-reduce/case003.json
	--- .../groups/hof-reduce/case004.json
	--- .../groups/hof-reduce/case005.json
	--- .../groups/hof-reduce/case006.json
	--- .../groups/hof-reduce/case007.json
	--- .../groups/hof-reduce/case008.json
	--- .../groups/hof-reduce/case009.json
/home/peter/talen/jsonata/tests.go:145: second argument of function "reduce" must be a function that takes two arguments, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category:        "",
    Code:            "",
    Data:            nil,
    Dataset:         "",
    Depth:           0,
    Description:     "",
    Error:           nil,
    Expr:            "(\n $months := [\n        \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n        \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n ];\n $indexof := λ($array, $value) {\n  $reduce($array, λ($acc, $v, $i) {\n   $v=$value ? $i : $acc\n  })\n };\n $indexof($months, 'May')\n)\n",
    ExprFile:        "case009.jsonata",
    Function:        "",
    Result:          float64(4),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/hof-reduce/case010.json
/home/peter/talen/jsonata/tests.go:145: second argument of function "reduce" must be a function that takes two arguments, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category:        "",
    Code:            "",
    Data:            nil,
    Dataset:         "",
    Depth:           0,
    Description:     "",
    Error:           nil,
    Expr:            "(\n  $mean := $reduce(?, λ($acc, $v, $i, $arr) {(\n    $total := $acc + $v;\n    $length := $count($arr);\n    $i = $length - 1 ? $total / $length : $total\n  )});\n\n  $mean([7,3,8])\n)\n",
    ExprFile:        "case010.jsonata",
    Function:        "",
    Result:          float64(6),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/hof-single/case000.json
	--- .../groups/hof-single/case001.json
	--- .../groups/hof-single/case002.json
	--- .../groups/hof-single/case003.json
	--- .../groups/hof-single/case004.json
	--- .../groups/hof-single/case005.json
	--- .../groups/hof-single/case006.json
/home/peter/talen/jsonata/tests.go:145: function "single" takes 2 argument(s), got 1, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "data": float64(5),
    },
    Dataset:         "",
    Depth:           0,
    Description:     "",
    Error:           nil,
    Expr:            "$single([0])",
    ExprFile:        "",
    Function:        "",
    Result:          float64(0),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/hof-single/case007.json
	--- .../groups/hof-single/case008.json
	--- .../groups/hof-single/case009.json
	--- .../groups/hof-single/case010.json
	--- .../groups/hof-zip-map/case000.json
	--- .../groups/hof-zip-map/case001.json
	--- .../groups/hof-zip-map/case002.json
EXPECTED:
6
GOT:
[
  6
]
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category:        "",
    Code:            "",
    Data:            nil,
    Dataset:         "",
    Depth:           0,
    Description:     "",
    Error:           nil,
    Expr:            "(  $data := {    \"one\": [1],    \"two\": [5]  };  $data.$zip(one, two) ~> $map($sum)) ",
    ExprFile:        "",
    Function:        "",
    Result:          float64(6),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/hof-zip-map/case003.json
EXPECTED:
6
GOT:
[
  6
]
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category:        "",
    Code:            "",
    Data:            nil,
    Dataset:         "",
    Depth:           0,
    Description:     "",
    Error:           nil,
    Expr:            "(  $data := {    \"one\": 1,    \"two\": 5  };  $data.$zip(one, two) ~> $map($sum)) ",
    ExprFile:        "",
    Function:        "",
    Result:          float64(6),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/inclusion-operator/case000.json
	--- .../groups/inclusion-operator/case001.json
	--- .../groups/inclusion-operator/case002.json
	--- .../groups/inclusion-operator/case003.json
	--- .../groups/inclusion-operator/case004.json
	--- .../groups/inclusion-operator/case005.json
	--- .../groups/inclusion-operator/case006.json
	--- .../groups/inclusion-operator/case007.json
	--- .../groups/inclusion-operator/case008.json
	--- .../groups/joins/employee-map-reduce.json
/home/peter/talen/jsonata/tests.go:145: no results found, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Contact": []interface {}{
            map[string]interface {}{
                "Phone": []interface {}{
                    map[string]interface {}{
                        "number": "0203 544 1234",
                        "type":   "home",
                    },
                    map[string]interface {}{
                        "number": "01962 001234",
                        "type":   "office",
                    },
                    map[string]interface {}{
                        "number": "077 7700 1234",
                        "type":   "mobile",
                    },
                },
                "ssn": "496913021",
            },
            map[string]interface {}{
                "Phone": []interface {}{
                    map[string]interface {}{
                        "number": "3146458343",
                        "type":   "home",
                    },
                    map[string]interface {}{
                        "number": "315 782 9279",
                        "type":   "mobile",
                    },
                },
                "ssn": "496737199",
            },
            map[string]interface {}{
                "Phone": []interface {}{
                    map[string]interface {}{
                        "number": "0280 564 6543",
                        "type":   "home",
                    },
                },
                "ssn": "496306525",
            },
            map[string]interface {}{
                "Phone": []interface {}{
                    map[string]interface {}{
                        "number": "0280 864 8643",
                        "type":   "office",
                    },
                },
                "ssn": "496306525",
            },
            map[string]interface {}{
                "Phone": []interface {}{
                    map[string]interface {}{
                        "number": "07735 853535",
                        "type":   "mobile",
                    },
                },
                "ssn": "496306525",
            },
        },
        "Employee": []interface {}{
            map[string]interface {}{
                "FirstName": "Fred",
                "SSN":       "496913021",
                "Surname":   "Smith",
            },
            map[string]interface {}{
                "FirstName": "Darren",
                "SSN":       "496737199",
                "Surname":   "Cruse",
            },
            map[string]interface {}{
                "FirstName": "Hugh",
                "SSN":       "496306525",
                "Surname":   "Jones",
            },
        },
    },
    Dataset:     "employees",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "Employee@$e.(Contact)[ssn = $e.SSN].{ 'name': $e.(FirstName & ' ' & Surname), 'phone': Phone[type='mobile'].number }",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        map[string]interface {}{
            "name":  "Fred Smith",
            "phone": "077 7700 1234",
        },
        map[string]interface {}{
            "name":  "Darren Cruse",
            "phone": "315 782 9279",
        },
        map[string]interface {}{
            "name": "Hugh Jones",
        },
        map[string]interface {}{
            "name": "Hugh Jones",
        },
        map[string]interface {}{
            "name":  "Hugh Jones",
            "phone": "07735 853535",
        },
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/joins/employee-map-reduce.json
/home/peter/talen/jsonata/tests.go:145: object key $e.FirstName does not evaluate to a string, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Contact": []interface {}{
            map[string]interface {}{
                "Phone": []interface {}{
                    map[string]interface {}{
                        "number": "0203 544 1234",
                        "type":   "home",
                    },
                    map[string]interface {}{
                        "number": "01962 001234",
                        "type":   "office",
                    },
                    map[string]interface {}{
                        "number": "077 7700 1234",
                        "type":   "mobile",
                    },
                },
                "ssn": "496913021",
            },
            map[string]interface {}{
                "Phone": []interface {}{
                    map[string]interface {}{
                        "number": "3146458343",
                        "type":   "home",
                    },
                    map[string]interface {}{
                        "number": "315 782 9279",
                        "type":   "mobile",
                    },
                },
                "ssn": "496737199",
            },
            map[string]interface {}{
                "Phone": []interface {}{
                    map[string]interface {}{
                        "number": "0280 564 6543",
                        "type":   "home",
                    },
                },
                "ssn": "496306525",
            },
            map[string]interface {}{
                "Phone": []interface {}{
                    map[string]interface {}{
                        "number": "0280 864 8643",
                        "type":   "office",
                    },
                },
                "ssn": "496306525",
            },
            map[string]interface {}{
                "Phone": []interface {}{
                    map[string]interface {}{
                        "number": "07735 853535",
                        "type":   "mobile",
                    },
                },
                "ssn": "496306525",
            },
        },
        "Employee": []interface {}{
            map[string]interface {}{
                "FirstName": "Fred",
                "SSN":       "496913021",
                "Surname":   "Smith",
            },
            map[string]interface {}{
                "FirstName": "Darren",
                "SSN":       "496737199",
                "Surname":   "Cruse",
            },
            map[string]interface {}{
                "FirstName": "Hugh",
                "SSN":       "496306525",
                "Surname":   "Jones",
            },
        },
    },
    Dataset:     "employees",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "Employee@$e.(Contact)[ssn = $e.SSN]{ $e.FirstName: Phone[type='mobile'].number }",
    ExprFile:    "",
    Function:    "",
    Result:      map[string]interface {}{
        "Darren": "315 782 9279",
        "Fred":   "077 7700 1234",
        "Hugh":   "07735 853535",
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/joins/employee-map-reduce.json
/home/peter/talen/jsonata/tests.go:145: object key $e.(FirstName & " " & Surname) does not evaluate to a string, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Contact": []interface {}{
            map[string]interface {}{
                "Phone": []interface {}{
                    map[string]interface {}{
                        "number": "0203 544 1234",
                        "type":   "home",
                    },
                    map[string]interface {}{
                        "number": "01962 001234",
                        "type":   "office",
                    },
                    map[string]interface {}{
                        "number": "077 7700 1234",
                        "type":   "mobile",
                    },
                },
                "ssn": "496913021",
            },
            map[string]interface {}{
                "Phone": []interface {}{
                    map[string]interface {}{
                        "number": "3146458343",
                        "type":   "home",
                    },
                    map[string]interface {}{
                        "number": "315 782 9279",
                        "type":   "mobile",
                    },
                },
                "ssn": "496737199",
            },
            map[string]interface {}{
                "Phone": []interface {}{
                    map[string]interface {}{
                        "number": "0280 564 6543",
                        "type":   "home",
                    },
                },
                "ssn": "496306525",
            },
            map[string]interface {}{
                "Phone": []interface {}{
                    map[string]interface {}{
                        "number": "0280 864 8643",
                        "type":   "office",
                    },
                },
                "ssn": "496306525",
            },
            map[string]interface {}{
                "Phone": []interface {}{
                    map[string]interface {}{
                        "number": "07735 853535",
                        "type":   "mobile",
                    },
                },
                "ssn": "496306525",
            },
        },
        "Employee": []interface {}{
            map[string]interface {}{
                "FirstName": "Fred",
                "SSN":       "496913021",
                "Surname":   "Smith",
            },
            map[string]interface {}{
                "FirstName": "Darren",
                "SSN":       "496737199",
                "Surname":   "Cruse",
            },
            map[string]interface {}{
                "FirstName": "Hugh",
                "SSN":       "496306525",
                "Surname":   "Jones",
            },
        },
    },
    Dataset:     "employees",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "Employee@$e.Contact@$c[$c.ssn = $e.SSN]{ $e.(FirstName & ' ' & Surname): $join($c.Phone.number, ', ') }",
    ExprFile:    "",
    Function:    "",
    Result:      map[string]interface {}{
        "Darren Cruse": "3146458343, 315 782 9279",
        "Fred Smith":   "0203 544 1234, 01962 001234, 077 7700 1234",
        "Hugh Jones":   "0280 564 6543, 0280 864 8643, 07735 853535",
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/joins/employee-map-reduce.json
/home/peter/talen/jsonata/tests.go:145: object key $e.(FirstName & " " & Surname) does not evaluate to a string, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Contact": []interface {}{
            map[string]interface {}{
                "Phone": []interface {}{
                    map[string]interface {}{
                        "number": "0203 544 1234",
                        "type":   "home",
                    },
                    map[string]interface {}{
                        "number": "01962 001234",
                        "type":   "office",
                    },
                    map[string]interface {}{
                        "number": "077 7700 1234",
                        "type":   "mobile",
                    },
                },
                "ssn": "496913021",
            },
            map[string]interface {}{
                "Phone": []interface {}{
                    map[string]interface {}{
                        "number": "3146458343",
                        "type":   "home",
                    },
                    map[string]interface {}{
                        "number": "315 782 9279",
                        "type":   "mobile",
                    },
                },
                "ssn": "496737199",
            },
            map[string]interface {}{
                "Phone": []interface {}{
                    map[string]interface {}{
                        "number": "0280 564 6543",
                        "type":   "home",
                    },
                },
                "ssn": "496306525",
            },
            map[string]interface {}{
                "Phone": []interface {}{
                    map[string]interface {}{
                        "number": "0280 864 8643",
                        "type":   "office",
                    },
                },
                "ssn": "496306525",
            },
            map[string]interface {}{
                "Phone": []interface {}{
                    map[string]interface {}{
                        "number": "07735 853535",
                        "type":   "mobile",
                    },
                },
                "ssn": "496306525",
            },
        },
        "Employee": []interface {}{
            map[string]interface {}{
                "FirstName": "Fred",
                "SSN":       "496913021",
                "Surname":   "Smith",
            },
            map[string]interface {}{
                "FirstName": "Darren",
                "SSN":       "496737199",
                "Surname":   "Cruse",
            },
            map[string]interface {}{
                "FirstName": "Hugh",
                "SSN":       "496306525",
                "Surname":   "Jones",
            },
        },
    },
    Dataset:     "employees",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "Employee@$e.Contact@$c[$c.ssn = $e.SSN]{ $e.(FirstName & ' ' & Surname): $c.Phone[type != 'home'].number ~> $join(', ') }",
    ExprFile:    "",
    Function:    "",
    Result:      map[string]interface {}{
        "Darren Cruse": "315 782 9279",
        "Fred Smith":   "01962 001234, 077 7700 1234",
        "Hugh Jones":   "0280 864 8643, 07735 853535",
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/joins/employee-map-reduce.json
/home/peter/talen/jsonata/tests.go:145: object key $e.(FirstName & " " & Surname) does not evaluate to a string, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Contact": []interface {}{
            map[string]interface {}{
                "Phone": []interface {}{
                    map[string]interface {}{
                        "number": "0203 544 1234",
                        "type":   "home",
                    },
                    map[string]interface {}{
                        "number": "01962 001234",
                        "type":   "office",
                    },
                    map[string]interface {}{
                        "number": "077 7700 1234",
                        "type":   "mobile",
                    },
                },
                "ssn": "496913021",
            },
            map[string]interface {}{
                "Phone": []interface {}{
                    map[string]interface {}{
                        "number": "3146458343",
                        "type":   "home",
                    },
                    map[string]interface {}{
                        "number": "315 782 9279",
                        "type":   "mobile",
                    },
                },
                "ssn": "496737199",
            },
            map[string]interface {}{
                "Phone": []interface {}{
                    map[string]interface {}{
                        "number": "0280 564 6543",
                        "type":   "home",
                    },
                },
                "ssn": "496306525",
            },
            map[string]interface {}{
                "Phone": []interface {}{
                    map[string]interface {}{
                        "number": "0280 864 8643",
                        "type":   "office",
                    },
                },
                "ssn": "496306525",
            },
            map[string]interface {}{
                "Phone": []interface {}{
                    map[string]interface {}{
                        "number": "07735 853535",
                        "type":   "mobile",
                    },
                },
                "ssn": "496306525",
            },
        },
        "Employee": []interface {}{
            map[string]interface {}{
                "FirstName": "Fred",
                "SSN":       "496913021",
                "Surname":   "Smith",
            },
            map[string]interface {}{
                "FirstName": "Darren",
                "SSN":       "496737199",
                "Surname":   "Cruse",
            },
            map[string]interface {}{
                "FirstName": "Hugh",
                "SSN":       "496306525",
                "Surname":   "Jones",
            },
        },
    },
    Dataset:     "employees",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "Employee@$e.Contact@$c[$c.ssn = $e.SSN]{ $e.(FirstName & ' ' & Surname): $c.Phone[type != 'home'].number }",
    ExprFile:    "",
    Function:    "",
    Result:      map[string]interface {}{
        "Darren Cruse": "315 782 9279",
        "Fred Smith":   []interface {}{
            "01962 001234",
            "077 7700 1234",
        },
        "Hugh Jones": []interface {}{
            "0280 864 8643",
            "07735 853535",
        },
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/joins/employee-map-reduce.json
/home/peter/talen/jsonata/tests.go:145: object key $e.(FirstName & " " & Surname) does not evaluate to a string, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Contact": []interface {}{
            map[string]interface {}{
                "Phone": []interface {}{
                    map[string]interface {}{
                        "number": "0203 544 1234",
                        "type":   "home",
                    },
                    map[string]interface {}{
                        "number": "01962 001234",
                        "type":   "office",
                    },
                    map[string]interface {}{
                        "number": "077 7700 1234",
                        "type":   "mobile",
                    },
                },
                "ssn": "496913021",
            },
            map[string]interface {}{
                "Phone": []interface {}{
                    map[string]interface {}{
                        "number": "3146458343",
                        "type":   "home",
                    },
                    map[string]interface {}{
                        "number": "315 782 9279",
                        "type":   "mobile",
                    },
                },
                "ssn": "496737199",
            },
            map[string]interface {}{
                "Phone": []interface {}{
                    map[string]interface {}{
                        "number": "0280 564 6543",
                        "type":   "home",
                    },
                },
                "ssn": "496306525",
            },
            map[string]interface {}{
                "Phone": []interface {}{
                    map[string]interface {}{
                        "number": "0280 864 8643",
                        "type":   "office",
                    },
                },
                "ssn": "496306525",
            },
            map[string]interface {}{
                "Phone": []interface {}{
                    map[string]interface {}{
                        "number": "07735 853535",
                        "type":   "mobile",
                    },
                },
                "ssn": "496306525",
            },
        },
        "Employee": []interface {}{
            map[string]interface {}{
                "FirstName": "Fred",
                "SSN":       "496913021",
                "Surname":   "Smith",
            },
            map[string]interface {}{
                "FirstName": "Darren",
                "SSN":       "496737199",
                "Surname":   "Cruse",
            },
            map[string]interface {}{
                "FirstName": "Hugh",
                "SSN":       "496306525",
                "Surname":   "Jones",
            },
        },
    },
    Dataset:     "employees",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "Employee@$e.Contact@$c[$c.ssn = $e.SSN]{ $e.(FirstName & ' ' & Surname): $c.Phone[type != 'home'].number[] }",
    ExprFile:    "",
    Function:    "",
    Result:      map[string]interface {}{
        "Darren Cruse": []interface {}{
            "315 782 9279",
        },
        "Fred Smith": []interface {}{
            "01962 001234",
            "077 7700 1234",
        },
        "Hugh Jones": []interface {}{
            "0280 864 8643",
            "07735 853535",
        },
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/joins/employee-map-reduce.json
/home/peter/talen/jsonata/tests.go:145: object key $e.FirstName does not evaluate to a string, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Contact": []interface {}{
            map[string]interface {}{
                "Phone": []interface {}{
                    map[string]interface {}{
                        "number": "0203 544 1234",
                        "type":   "home",
                    },
                    map[string]interface {}{
                        "number": "01962 001234",
                        "type":   "office",
                    },
                    map[string]interface {}{
                        "number": "077 7700 1234",
                        "type":   "mobile",
                    },
                },
                "ssn": "496913021",
            },
            map[string]interface {}{
                "Phone": []interface {}{
                    map[string]interface {}{
                        "number": "3146458343",
                        "type":   "home",
                    },
                    map[string]interface {}{
                        "number": "315 782 9279",
                        "type":   "mobile",
                    },
                },
                "ssn": "496737199",
            },
            map[string]interface {}{
                "Phone": []interface {}{
                    map[string]interface {}{
                        "number": "0280 564 6543",
                        "type":   "home",
                    },
                },
                "ssn": "496306525",
            },
            map[string]interface {}{
                "Phone": []interface {}{
                    map[string]interface {}{
                        "number": "0280 864 8643",
                        "type":   "office",
                    },
                },
                "ssn": "496306525",
            },
            map[string]interface {}{
                "Phone": []interface {}{
                    map[string]interface {}{
                        "number": "07735 853535",
                        "type":   "mobile",
                    },
                },
                "ssn": "496306525",
            },
        },
        "Employee": []interface {}{
            map[string]interface {}{
                "FirstName": "Fred",
                "SSN":       "496913021",
                "Surname":   "Smith",
            },
            map[string]interface {}{
                "FirstName": "Darren",
                "SSN":       "496737199",
                "Surname":   "Cruse",
            },
            map[string]interface {}{
                "FirstName": "Hugh",
                "SSN":       "496306525",
                "Surname":   "Jones",
            },
        },
    },
    Dataset:     "employees",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "Employee@$e.Contact@$c[$c.ssn = $e.SSN]{ $e.FirstName: $c.Phone.number }",
    ExprFile:    "",
    Function:    "",
    Result:      map[string]interface {}{
        "Darren": []interface {}{
            "3146458343",
            "315 782 9279",
        },
        "Fred": []interface {}{
            "0203 544 1234",
            "01962 001234",
            "077 7700 1234",
        },
        "Hugh": []interface {}{
            "0280 564 6543",
            "0280 864 8643",
            "07735 853535",
        },
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/joins/employee-map-reduce.json
/home/peter/talen/jsonata/tests.go:145: no results found, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Contact": []interface {}{
            map[string]interface {}{
                "Phone": []interface {}{
                    map[string]interface {}{
                        "number": "0203 544 1234",
                        "type":   "home",
                    },
                    map[string]interface {}{
                        "number": "01962 001234",
                        "type":   "office",
                    },
                    map[string]interface {}{
                        "number": "077 7700 1234",
                        "type":   "mobile",
                    },
                },
                "ssn": "496913021",
            },
            map[string]interface {}{
                "Phone": []interface {}{
                    map[string]interface {}{
                        "number": "3146458343",
                        "type":   "home",
                    },
                    map[string]interface {}{
                        "number": "315 782 9279",
                        "type":   "mobile",
                    },
                },
                "ssn": "496737199",
            },
            map[string]interface {}{
                "Phone": []interface {}{
                    map[string]interface {}{
                        "number": "0280 564 6543",
                        "type":   "home",
                    },
                },
                "ssn": "496306525",
            },
            map[string]interface {}{
                "Phone": []interface {}{
                    map[string]interface {}{
                        "number": "0280 864 8643",
                        "type":   "office",
                    },
                },
                "ssn": "496306525",
            },
            map[string]interface {}{
                "Phone": []interface {}{
                    map[string]interface {}{
                        "number": "07735 853535",
                        "type":   "mobile",
                    },
                },
                "ssn": "496306525",
            },
        },
        "Employee": []interface {}{
            map[string]interface {}{
                "FirstName": "Fred",
                "SSN":       "496913021",
                "Surname":   "Smith",
            },
            map[string]interface {}{
                "FirstName": "Darren",
                "SSN":       "496737199",
                "Surname":   "Cruse",
            },
            map[string]interface {}{
                "FirstName": "Hugh",
                "SSN":       "496306525",
                "Surname":   "Jones",
            },
        },
    },
    Dataset:     "employees",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "Employee@$e^($e.Surname).Contact@$c[$e.SSN=$c.ssn].{ 'name': $e.Surname, 'phone': $c.Phone.number }",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        map[string]interface {}{
            "name":  "Cruse",
            "phone": []interface {}{
                "3146458343",
                "315 782 9279",
            },
        },
        map[string]interface {}{
            "name":  "Jones",
            "phone": "0280 564 6543",
        },
        map[string]interface {}{
            "name":  "Jones",
            "phone": "0280 864 8643",
        },
        map[string]interface {}{
            "name":  "Jones",
            "phone": "07735 853535",
        },
        map[string]interface {}{
            "name":  "Smith",
            "phone": []interface {}{
                "0203 544 1234",
                "01962 001234",
                "077 7700 1234",
            },
        },
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/joins/employee-map-reduce.json
/home/peter/talen/jsonata/tests.go:145: no results found, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Contact": []interface {}{
            map[string]interface {}{
                "Phone": []interface {}{
                    map[string]interface {}{
                        "number": "0203 544 1234",
                        "type":   "home",
                    },
                    map[string]interface {}{
                        "number": "01962 001234",
                        "type":   "office",
                    },
                    map[string]interface {}{
                        "number": "077 7700 1234",
                        "type":   "mobile",
                    },
                },
                "ssn": "496913021",
            },
            map[string]interface {}{
                "Phone": []interface {}{
                    map[string]interface {}{
                        "number": "3146458343",
                        "type":   "home",
                    },
                    map[string]interface {}{
                        "number": "315 782 9279",
                        "type":   "mobile",
                    },
                },
                "ssn": "496737199",
            },
            map[string]interface {}{
                "Phone": []interface {}{
                    map[string]interface {}{
                        "number": "0280 564 6543",
                        "type":   "home",
                    },
                },
                "ssn": "496306525",
            },
            map[string]interface {}{
                "Phone": []interface {}{
                    map[string]interface {}{
                        "number": "0280 864 8643",
                        "type":   "office",
                    },
                },
                "ssn": "496306525",
            },
            map[string]interface {}{
                "Phone": []interface {}{
                    map[string]interface {}{
                        "number": "07735 853535",
                        "type":   "mobile",
                    },
                },
                "ssn": "496306525",
            },
        },
        "Employee": []interface {}{
            map[string]interface {}{
                "FirstName": "Fred",
                "SSN":       "496913021",
                "Surname":   "Smith",
            },
            map[string]interface {}{
                "FirstName": "Darren",
                "SSN":       "496737199",
                "Surname":   "Cruse",
            },
            map[string]interface {}{
                "FirstName": "Hugh",
                "SSN":       "496306525",
                "Surname":   "Jones",
            },
        },
    },
    Dataset:     "employees",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "Employee@$e^($e.FirstName).Contact@$c[$e.SSN=$c.ssn].{ 'name': $e.Surname, 'phone': $c.Phone.number }",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        map[string]interface {}{
            "name":  "Cruse",
            "phone": []interface {}{
                "3146458343",
                "315 782 9279",
            },
        },
        map[string]interface {}{
            "name":  "Smith",
            "phone": []interface {}{
                "0203 544 1234",
                "01962 001234",
                "077 7700 1234",
            },
        },
        map[string]interface {}{
            "name":  "Jones",
            "phone": "0280 564 6543",
        },
        map[string]interface {}{
            "name":  "Jones",
            "phone": "0280 864 8643",
        },
        map[string]interface {}{
            "name":  "Jones",
            "phone": "07735 853535",
        },
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/joins/employee-map-reduce.json
/home/peter/talen/jsonata/tests.go:145: object key $e.Surname does not evaluate to a string, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Contact": []interface {}{
            map[string]interface {}{
                "Phone": []interface {}{
                    map[string]interface {}{
                        "number": "0203 544 1234",
                        "type":   "home",
                    },
                    map[string]interface {}{
                        "number": "01962 001234",
                        "type":   "office",
                    },
                    map[string]interface {}{
                        "number": "077 7700 1234",
                        "type":   "mobile",
                    },
                },
                "ssn": "496913021",
            },
            map[string]interface {}{
                "Phone": []interface {}{
                    map[string]interface {}{
                        "number": "3146458343",
                        "type":   "home",
                    },
                    map[string]interface {}{
                        "number": "315 782 9279",
                        "type":   "mobile",
                    },
                },
                "ssn": "496737199",
            },
            map[string]interface {}{
                "Phone": []interface {}{
                    map[string]interface {}{
                        "number": "0280 564 6543",
                        "type":   "home",
                    },
                },
                "ssn": "496306525",
            },
            map[string]interface {}{
                "Phone": []interface {}{
                    map[string]interface {}{
                        "number": "0280 864 8643",
                        "type":   "office",
                    },
                },
                "ssn": "496306525",
            },
            map[string]interface {}{
                "Phone": []interface {}{
                    map[string]interface {}{
                        "number": "07735 853535",
                        "type":   "mobile",
                    },
                },
                "ssn": "496306525",
            },
        },
        "Employee": []interface {}{
            map[string]interface {}{
                "FirstName": "Fred",
                "SSN":       "496913021",
                "Surname":   "Smith",
            },
            map[string]interface {}{
                "FirstName": "Darren",
                "SSN":       "496737199",
                "Surname":   "Cruse",
            },
            map[string]interface {}{
                "FirstName": "Hugh",
                "SSN":       "496306525",
                "Surname":   "Jones",
            },
        },
    },
    Dataset:     "employees",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "Employee@$e.Contact@$c[$e.SSN=$c.ssn]{ $e.Surname: $c.Phone.number^($) }",
    ExprFile:    "",
    Function:    "",
    Result:      map[string]interface {}{
        "Cruse": []interface {}{
            "3146458343",
            "315 782 9279",
        },
        "Jones": []interface {}{
            "0280 564 6543",
            "0280 864 8643",
            "07735 853535",
        },
        "Smith": []interface {}{
            "01962 001234",
            "0203 544 1234",
            "077 7700 1234",
        },
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/joins/employee-map-reduce.json
/home/peter/talen/jsonata/tests.go:145: object key $e.Surname does not evaluate to a string, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Contact": []interface {}{
            map[string]interface {}{
                "Phone": []interface {}{
                    map[string]interface {}{
                        "number": "0203 544 1234",
                        "type":   "home",
                    },
                    map[string]interface {}{
                        "number": "01962 001234",
                        "type":   "office",
                    },
                    map[string]interface {}{
                        "number": "077 7700 1234",
                        "type":   "mobile",
                    },
                },
                "ssn": "496913021",
            },
            map[string]interface {}{
                "Phone": []interface {}{
                    map[string]interface {}{
                        "number": "3146458343",
                        "type":   "home",
                    },
                    map[string]interface {}{
                        "number": "315 782 9279",
                        "type":   "mobile",
                    },
                },
                "ssn": "496737199",
            },
            map[string]interface {}{
                "Phone": []interface {}{
                    map[string]interface {}{
                        "number": "0280 564 6543",
                        "type":   "home",
                    },
                },
                "ssn": "496306525",
            },
            map[string]interface {}{
                "Phone": []interface {}{
                    map[string]interface {}{
                        "number": "0280 864 8643",
                        "type":   "office",
                    },
                },
                "ssn": "496306525",
            },
            map[string]interface {}{
                "Phone": []interface {}{
                    map[string]interface {}{
                        "number": "07735 853535",
                        "type":   "mobile",
                    },
                },
                "ssn": "496306525",
            },
        },
        "Employee": []interface {}{
            map[string]interface {}{
                "FirstName": "Fred",
                "SSN":       "496913021",
                "Surname":   "Smith",
            },
            map[string]interface {}{
                "FirstName": "Darren",
                "SSN":       "496737199",
                "Surname":   "Cruse",
            },
            map[string]interface {}{
                "FirstName": "Hugh",
                "SSN":       "496306525",
                "Surname":   "Jones",
            },
        },
    },
    Dataset:     "employees",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "Employee@$e.Contact@$c[$e.SSN=$c.ssn]{ $e.Surname: $c.Phone.number^(>$) }",
    ExprFile:    "",
    Function:    "",
    Result:      map[string]interface {}{
        "Cruse": []interface {}{
            "315 782 9279",
            "3146458343",
        },
        "Jones": []interface {}{
            "07735 853535",
            "0280 864 8643",
            "0280 564 6543",
        },
        "Smith": []interface {}{
            "077 7700 1234",
            "0203 544 1234",
            "01962 001234",
        },
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/joins/employee-map-reduce.json
/home/peter/talen/jsonata/tests.go:145: no results found, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     []interface {}{
        float64(1),
        float64(2),
        float64(3),
    },
    Dataset:     "",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "$@$i",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        float64(1),
        float64(2),
        float64(3),
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/joins/errors.json
	--- .../groups/joins/errors.json
	--- .../groups/joins/errors.json
	--- .../groups/joins/errors.json
	--- .../groups/joins/index.json
/home/peter/talen/jsonata/tests.go:145: no results found, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     []interface {}{
        float64(3),
        float64(1),
        float64(4),
        float64(1),
        float64(5),
        float64(9),
    },
    Dataset:     "",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "$#$pos[$pos<3]",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        float64(3),
        float64(1),
        float64(4),
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/joins/index.json
EXPECTED:
true
GOT:
false
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     []interface {}{
        float64(3),
        float64(1),
        float64(4),
        float64(1),
        float64(5),
        float64(9),
    },
    Dataset:         "",
    Depth:           0,
    Description:     "",
    Error:           nil,
    Expr:            "$#$pos[$pos<3] = $[[0..2]]",
    ExprFile:        "",
    Function:        "",
    Result:          bool(true),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/joins/index.json
/home/peter/talen/jsonata/tests.go:145: no results found, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     []interface {}{
        float64(3),
        float64(1),
        float64(4),
        float64(1),
        float64(5),
        float64(9),
    },
    Dataset:     "",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "$.$#$pos[$pos<3]",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        float64(3),
        float64(1),
        float64(4),
        float64(1),
        float64(5),
        float64(9),
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/joins/index.json
EXPECTED:
true
GOT:
false
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     []interface {}{
        float64(3),
        float64(1),
        float64(4),
        float64(1),
        float64(5),
        float64(9),
    },
    Dataset:         "",
    Depth:           0,
    Description:     "",
    Error:           nil,
    Expr:            "$.$#$pos[$pos<3] = $.$[[0..2]]",
    ExprFile:        "",
    Function:        "",
    Result:          bool(true),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/joins/index.json
/home/peter/talen/jsonata/tests.go:145: no results found, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     []interface {}{
        float64(3),
        float64(1),
        float64(4),
        float64(1),
        float64(5),
        float64(9),
    },
    Dataset:     "",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "$#$pos[$pos<3]^($)",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        float64(1),
        float64(3),
        float64(4),
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/joins/index.json
/home/peter/talen/jsonata/tests.go:145: no results found, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     []interface {}{
        float64(3),
        float64(1),
        float64(4),
        float64(1),
        float64(5),
        float64(9),
    },
    Dataset:     "",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "$#$pos[$pos<3]^(>$)",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        float64(4),
        float64(3),
        float64(1),
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/joins/index.json
/home/peter/talen/jsonata/tests.go:113: syntax error: '#$pos', (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     []interface {}{
        float64(3),
        float64(1),
        float64(4),
        float64(1),
        float64(5),
        float64(9),
    },
    Dataset:     "",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "$^($)#$pos[$pos<3] ",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        float64(1),
        float64(1),
        float64(3),
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/joins/index.json
/home/peter/talen/jsonata/tests.go:145: no results found, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     []interface {}{
        float64(3),
        float64(1),
        float64(4),
        float64(1),
        float64(5),
        float64(9),
    },
    Dataset:         "",
    Depth:           0,
    Description:     "",
    Error:           nil,
    Expr:            "$#$pos[$pos<3][1]",
    ExprFile:        "",
    Function:        "",
    Result:          float64(1),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/joins/index.json
/home/peter/talen/jsonata/tests.go:145: no results found, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     []interface {}{
        float64(3),
        float64(1),
        float64(4),
        float64(1),
        float64(5),
        float64(9),
    },
    Dataset:     "",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "$#$pos[$pos<3][1][]",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        float64(1),
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/joins/index.json
/home/peter/talen/jsonata/tests.go:145: no results found, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     []interface {}{
        float64(3),
        float64(1),
        float64(4),
        float64(1),
        float64(5),
        float64(9),
    },
    Dataset:         "",
    Depth:           0,
    Description:     "",
    Error:           nil,
    Expr:            "$#$pos[$pos<3]^($)[-1]",
    ExprFile:        "",
    Function:        "",
    Result:          float64(4),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/joins/index.json
/home/peter/talen/jsonata/tests.go:145: no results found, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     []interface {}{
        float64(3),
        float64(1),
        float64(4),
        float64(1),
        float64(5),
        float64(9),
    },
    Dataset:     "",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "$#$pos[][$pos<3]^($)[-1]",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        float64(4),
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/joins/index.json
/home/peter/talen/jsonata/tests.go:145: no results found, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     []interface {}{
        float64(3),
        float64(1),
        float64(4),
        float64(1),
        float64(5),
        float64(9),
    },
    Dataset:     "",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "$#$pos[$pos<3]^($)[-1][]",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        float64(4),
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/joins/index.json
/home/peter/talen/jsonata/tests.go:113: syntax error: '#$pos', (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     []interface {}{
        float64(3),
        float64(1),
        float64(4),
        float64(1),
        float64(5),
        float64(9),
    },
    Dataset:     "",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "$[[1..4]]#$pos[$pos>=2]",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        float64(1),
        float64(5),
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/joins/index.json
/home/peter/talen/jsonata/tests.go:145: no results found, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:     "dataset5",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "Account.Order#$o.Product[ProductID=858383].{ 'Product': `Product Name`, 'Order Index': $o }",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        map[string]interface {}{
            "Order Index": float64(0),
            "Product":     "Bowler Hat",
        },
        map[string]interface {}{
            "Order Index": float64(1),
            "Product":     "Bowler Hat",
        },
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/joins/index.json
	--- .../groups/joins/index.json
/home/peter/talen/jsonata/tests.go:145: object key $string(ProductID) does not evaluate to a string, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:     "dataset5",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "Account.Order#$i.Product{ $string(ProductID): $i }",
    ExprFile:    "",
    Function:    "",
    Result:      map[string]interface {}{
        "345664": float64(1),
        "858236": float64(0),
        "858383": []interface {}{
            float64(0),
            float64(1),
        },
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/joins/library-joins.json
/home/peter/talen/jsonata/tests.go:145: no results found, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "library": map[string]interface {}{
            "books": []interface {}{
                map[string]interface {}{
                    "authors": []interface {}{
                        "Abelson",
                        "Sussman",
                    },
                    "copies": float64(2),
                    "isbn":   "9780262510875",
                    "price":  float64(38.9),
                    "title":  "Structure and Interpretation of Computer Programs",
                },
                map[string]interface {}{
                    "authors": []interface {}{
                        "Kernighan",
                        "Richie",
                    },
                    "copies": float64(3),
                    "isbn":   "9780131103627",
                    "price":  float64(33.59),
                    "title":  "The C Programming Language",
                },
                map[string]interface {}{
                    "authors": []interface {}{
                        "Aho",
                        "Kernighan",
                        "Weinberger",
                    },
                    "copies": float64(1),
                    "isbn":   "9780201079814",
                    "title":  "The AWK Programming Language",
                },
                map[string]interface {}{
                    "authors": []interface {}{
                        "Aho",
                        "Lam",
                        "Sethi",
                        "Ullman",
                    },
                    "copies": float64(1),
                    "isbn":   "9780201100884",
                    "price":  float64(23.38),
                    "title":  "Compilers: Principles, Techniques, and Tools",
                },
            },
            "customers": []interface {}{
                map[string]interface {}{
                    "address": map[string]interface {}{
                        "city":     "Winchester",
                        "postcode": "SO22 5PU",
                        "street":   "2 Long Road",
                    },
                    "id":   "10001",
                    "name": "Joe Doe",
                },
                map[string]interface {}{
                    "address": map[string]interface {}{
                        "city":     "Winchester",
                        "postcode": "SO22 4WD",
                        "street":   "56 Letsby Avenue",
                    },
                    "id":   "10002",
                    "name": "Fred Bloggs",
                },
                map[string]interface {}{
                    "address": map[string]interface {}{
                        "city":     "Southampton",
                        "postcode": "SO14 0MG",
                        "street":   "1 Preddy Gate",
                    },
                    "id":   "10003",
                    "name": "Jason Arthur",
                },
            },
            "loans": []interface {}{
                map[string]interface {}{
                    "customer": "10001",
                    "isbn":     "9780262510875",
                    "return":   "2016-12-05",
                },
                map[string]interface {}{
                    "customer": "10003",
                    "isbn":     "9780201100884",
                    "return":   "2016-10-22",
                },
                map[string]interface {}{
                    "customer": "10003",
                    "isbn":     "9780262510875",
                    "return":   "2016-12-22",
                },
            },
        },
    },
    Dataset:     "library",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "library.loans@$l.books@$b[$l.isbn=$b.isbn].{\n  'title': $b.title,\n  'customer': $l.customer\n}\n",
    ExprFile:    "library-joins001.jsonata",
    Function:    "",
    Result:      []interface {}{
        map[string]interface {}{
            "customer": "10001",
            "title":    "Structure and Interpretation of Computer Programs",
        },
        map[string]interface {}{
            "customer": "10003",
            "title":    "Compilers: Principles, Techniques, and Tools",
        },
        map[string]interface {}{
            "customer": "10003",
            "title":    "Structure and Interpretation of Computer Programs",
        },
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/joins/library-joins.json
/home/peter/talen/jsonata/tests.go:145: no results found, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "library": map[string]interface {}{
            "books": []interface {}{
                map[string]interface {}{
                    "authors": []interface {}{
                        "Abelson",
                        "Sussman",
                    },
                    "copies": float64(2),
                    "isbn":   "9780262510875",
                    "price":  float64(38.9),
                    "title":  "Structure and Interpretation of Computer Programs",
                },
                map[string]interface {}{
                    "authors": []interface {}{
                        "Kernighan",
                        "Richie",
                    },
                    "copies": float64(3),
                    "isbn":   "9780131103627",
                    "price":  float64(33.59),
                    "title":  "The C Programming Language",
                },
                map[string]interface {}{
                    "authors": []interface {}{
                        "Aho",
                        "Kernighan",
                        "Weinberger",
                    },
                    "copies": float64(1),
                    "isbn":   "9780201079814",
                    "title":  "The AWK Programming Language",
                },
                map[string]interface {}{
                    "authors": []interface {}{
                        "Aho",
                        "Lam",
                        "Sethi",
                        "Ullman",
                    },
                    "copies": float64(1),
                    "isbn":   "9780201100884",
                    "price":  float64(23.38),
                    "title":  "Compilers: Principles, Techniques, and Tools",
                },
            },
            "customers": []interface {}{
                map[string]interface {}{
                    "address": map[string]interface {}{
                        "city":     "Winchester",
                        "postcode": "SO22 5PU",
                        "street":   "2 Long Road",
                    },
                    "id":   "10001",
                    "name": "Joe Doe",
                },
                map[string]interface {}{
                    "address": map[string]interface {}{
                        "city":     "Winchester",
                        "postcode": "SO22 4WD",
                        "street":   "56 Letsby Avenue",
                    },
                    "id":   "10002",
                    "name": "Fred Bloggs",
                },
                map[string]interface {}{
                    "address": map[string]interface {}{
                        "city":     "Southampton",
                        "postcode": "SO14 0MG",
                        "street":   "1 Preddy Gate",
                    },
                    "id":   "10003",
                    "name": "Jason Arthur",
                },
            },
            "loans": []interface {}{
                map[string]interface {}{
                    "customer": "10001",
                    "isbn":     "9780262510875",
                    "return":   "2016-12-05",
                },
                map[string]interface {}{
                    "customer": "10003",
                    "isbn":     "9780201100884",
                    "return":   "2016-10-22",
                },
                map[string]interface {}{
                    "customer": "10003",
                    "isbn":     "9780262510875",
                    "return":   "2016-12-22",
                },
            },
        },
    },
    Dataset:     "library",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "library.loans@$l.books[$l.isbn=isbn].{\n  'title': title,\n  'customer': $l.customer\n}\n",
    ExprFile:    "library-joins002.jsonata",
    Function:    "",
    Result:      []interface {}{
        map[string]interface {}{
            "customer": "10001",
            "title":    "Structure and Interpretation of Computer Programs",
        },
        map[string]interface {}{
            "customer": "10003",
            "title":    "Compilers: Principles, Techniques, and Tools",
        },
        map[string]interface {}{
            "customer": "10003",
            "title":    "Structure and Interpretation of Computer Programs",
        },
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/joins/library-joins.json
/home/peter/talen/jsonata/tests.go:145: no results found, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "library": map[string]interface {}{
            "books": []interface {}{
                map[string]interface {}{
                    "authors": []interface {}{
                        "Abelson",
                        "Sussman",
                    },
                    "copies": float64(2),
                    "isbn":   "9780262510875",
                    "price":  float64(38.9),
                    "title":  "Structure and Interpretation of Computer Programs",
                },
                map[string]interface {}{
                    "authors": []interface {}{
                        "Kernighan",
                        "Richie",
                    },
                    "copies": float64(3),
                    "isbn":   "9780131103627",
                    "price":  float64(33.59),
                    "title":  "The C Programming Language",
                },
                map[string]interface {}{
                    "authors": []interface {}{
                        "Aho",
                        "Kernighan",
                        "Weinberger",
                    },
                    "copies": float64(1),
                    "isbn":   "9780201079814",
                    "title":  "The AWK Programming Language",
                },
                map[string]interface {}{
                    "authors": []interface {}{
                        "Aho",
                        "Lam",
                        "Sethi",
                        "Ullman",
                    },
                    "copies": float64(1),
                    "isbn":   "9780201100884",
                    "price":  float64(23.38),
                    "title":  "Compilers: Principles, Techniques, and Tools",
                },
            },
            "customers": []interface {}{
                map[string]interface {}{
                    "address": map[string]interface {}{
                        "city":     "Winchester",
                        "postcode": "SO22 5PU",
                        "street":   "2 Long Road",
                    },
                    "id":   "10001",
                    "name": "Joe Doe",
                },
                map[string]interface {}{
                    "address": map[string]interface {}{
                        "city":     "Winchester",
                        "postcode": "SO22 4WD",
                        "street":   "56 Letsby Avenue",
                    },
                    "id":   "10002",
                    "name": "Fred Bloggs",
                },
                map[string]interface {}{
                    "address": map[string]interface {}{
                        "city":     "Southampton",
                        "postcode": "SO14 0MG",
                        "street":   "1 Preddy Gate",
                    },
                    "id":   "10003",
                    "name": "Jason Arthur",
                },
            },
            "loans": []interface {}{
                map[string]interface {}{
                    "customer": "10001",
                    "isbn":     "9780262510875",
                    "return":   "2016-12-05",
                },
                map[string]interface {}{
                    "customer": "10003",
                    "isbn":     "9780201100884",
                    "return":   "2016-10-22",
                },
                map[string]interface {}{
                    "customer": "10003",
                    "isbn":     "9780262510875",
                    "return":   "2016-12-22",
                },
            },
        },
    },
    Dataset:     "library",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "library.books#$pos.$[$substring(title,0,3) = 'The'].$pos",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        float64(1),
        float64(2),
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/joins/library-joins.json
/home/peter/talen/jsonata/tests.go:145: no results found, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "library": map[string]interface {}{
            "books": []interface {}{
                map[string]interface {}{
                    "authors": []interface {}{
                        "Abelson",
                        "Sussman",
                    },
                    "copies": float64(2),
                    "isbn":   "9780262510875",
                    "price":  float64(38.9),
                    "title":  "Structure and Interpretation of Computer Programs",
                },
                map[string]interface {}{
                    "authors": []interface {}{
                        "Kernighan",
                        "Richie",
                    },
                    "copies": float64(3),
                    "isbn":   "9780131103627",
                    "price":  float64(33.59),
                    "title":  "The C Programming Language",
                },
                map[string]interface {}{
                    "authors": []interface {}{
                        "Aho",
                        "Kernighan",
                        "Weinberger",
                    },
                    "copies": float64(1),
                    "isbn":   "9780201079814",
                    "title":  "The AWK Programming Language",
                },
                map[string]interface {}{
                    "authors": []interface {}{
                        "Aho",
                        "Lam",
                        "Sethi",
                        "Ullman",
                    },
                    "copies": float64(1),
                    "isbn":   "9780201100884",
                    "price":  float64(23.38),
                    "title":  "Compilers: Principles, Techniques, and Tools",
                },
            },
            "customers": []interface {}{
                map[string]interface {}{
                    "address": map[string]interface {}{
                        "city":     "Winchester",
                        "postcode": "SO22 5PU",
                        "street":   "2 Long Road",
                    },
                    "id":   "10001",
                    "name": "Joe Doe",
                },
                map[string]interface {}{
                    "address": map[string]interface {}{
                        "city":     "Winchester",
                        "postcode": "SO22 4WD",
                        "street":   "56 Letsby Avenue",
                    },
                    "id":   "10002",
                    "name": "Fred Bloggs",
                },
                map[string]interface {}{
                    "address": map[string]interface {}{
                        "city":     "Southampton",
                        "postcode": "SO14 0MG",
                        "street":   "1 Preddy Gate",
                    },
                    "id":   "10003",
                    "name": "Jason Arthur",
                },
            },
            "loans": []interface {}{
                map[string]interface {}{
                    "customer": "10001",
                    "isbn":     "9780262510875",
                    "return":   "2016-12-05",
                },
                map[string]interface {}{
                    "customer": "10003",
                    "isbn":     "9780201100884",
                    "return":   "2016-10-22",
                },
                map[string]interface {}{
                    "customer": "10003",
                    "isbn":     "9780262510875",
                    "return":   "2016-12-22",
                },
            },
        },
    },
    Dataset:     "library",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "library.loans@$l.books@$b[$l.isbn=$b.isbn].customers[$l.customer=id].{\n  'title': $b.title,\n  'customer': $l.customer,\n  'name': name\n}\n",
    ExprFile:    "library-joins003.jsonata",
    Function:    "",
    Result:      []interface {}{
        map[string]interface {}{
            "customer": "10001",
            "name":     "Joe Doe",
            "title":    "Structure and Interpretation of Computer Programs",
        },
        map[string]interface {}{
            "customer": "10003",
            "name":     "Jason Arthur",
            "title":    "Compilers: Principles, Techniques, and Tools",
        },
        map[string]interface {}{
            "customer": "10003",
            "name":     "Jason Arthur",
            "title":    "Structure and Interpretation of Computer Programs",
        },
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/joins/library-joins.json
/home/peter/talen/jsonata/tests.go:145: no results found, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "library": map[string]interface {}{
            "books": []interface {}{
                map[string]interface {}{
                    "authors": []interface {}{
                        "Abelson",
                        "Sussman",
                    },
                    "copies": float64(2),
                    "isbn":   "9780262510875",
                    "price":  float64(38.9),
                    "title":  "Structure and Interpretation of Computer Programs",
                },
                map[string]interface {}{
                    "authors": []interface {}{
                        "Kernighan",
                        "Richie",
                    },
                    "copies": float64(3),
                    "isbn":   "9780131103627",
                    "price":  float64(33.59),
                    "title":  "The C Programming Language",
                },
                map[string]interface {}{
                    "authors": []interface {}{
                        "Aho",
                        "Kernighan",
                        "Weinberger",
                    },
                    "copies": float64(1),
                    "isbn":   "9780201079814",
                    "title":  "The AWK Programming Language",
                },
                map[string]interface {}{
                    "authors": []interface {}{
                        "Aho",
                        "Lam",
                        "Sethi",
                        "Ullman",
                    },
                    "copies": float64(1),
                    "isbn":   "9780201100884",
                    "price":  float64(23.38),
                    "title":  "Compilers: Principles, Techniques, and Tools",
                },
            },
            "customers": []interface {}{
                map[string]interface {}{
                    "address": map[string]interface {}{
                        "city":     "Winchester",
                        "postcode": "SO22 5PU",
                        "street":   "2 Long Road",
                    },
                    "id":   "10001",
                    "name": "Joe Doe",
                },
                map[string]interface {}{
                    "address": map[string]interface {}{
                        "city":     "Winchester",
                        "postcode": "SO22 4WD",
                        "street":   "56 Letsby Avenue",
                    },
                    "id":   "10002",
                    "name": "Fred Bloggs",
                },
                map[string]interface {}{
                    "address": map[string]interface {}{
                        "city":     "Southampton",
                        "postcode": "SO14 0MG",
                        "street":   "1 Preddy Gate",
                    },
                    "id":   "10003",
                    "name": "Jason Arthur",
                },
            },
            "loans": []interface {}{
                map[string]interface {}{
                    "customer": "10001",
                    "isbn":     "9780262510875",
                    "return":   "2016-12-05",
                },
                map[string]interface {}{
                    "customer": "10003",
                    "isbn":     "9780201100884",
                    "return":   "2016-10-22",
                },
                map[string]interface {}{
                    "customer": "10003",
                    "isbn":     "9780262510875",
                    "return":   "2016-12-22",
                },
            },
        },
    },
    Dataset:     "library",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "library.loans@$l.books@$b[$l.isbn=$b.isbn].customers@$c[$l.customer=$c.id].{\n  'title': $b.title,\n  'customer': $l.customer,\n  'name': $c.name\n}\n",
    ExprFile:    "library-joins004.jsonata",
    Function:    "",
    Result:      []interface {}{
        map[string]interface {}{
            "customer": "10001",
            "name":     "Joe Doe",
            "title":    "Structure and Interpretation of Computer Programs",
        },
        map[string]interface {}{
            "customer": "10003",
            "name":     "Jason Arthur",
            "title":    "Compilers: Principles, Techniques, and Tools",
        },
        map[string]interface {}{
            "customer": "10003",
            "name":     "Jason Arthur",
            "title":    "Structure and Interpretation of Computer Programs",
        },
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/joins/library-joins.json
/home/peter/talen/jsonata/tests.go:145: no results found, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "library": map[string]interface {}{
            "books": []interface {}{
                map[string]interface {}{
                    "authors": []interface {}{
                        "Abelson",
                        "Sussman",
                    },
                    "copies": float64(2),
                    "isbn":   "9780262510875",
                    "price":  float64(38.9),
                    "title":  "Structure and Interpretation of Computer Programs",
                },
                map[string]interface {}{
                    "authors": []interface {}{
                        "Kernighan",
                        "Richie",
                    },
                    "copies": float64(3),
                    "isbn":   "9780131103627",
                    "price":  float64(33.59),
                    "title":  "The C Programming Language",
                },
                map[string]interface {}{
                    "authors": []interface {}{
                        "Aho",
                        "Kernighan",
                        "Weinberger",
                    },
                    "copies": float64(1),
                    "isbn":   "9780201079814",
                    "title":  "The AWK Programming Language",
                },
                map[string]interface {}{
                    "authors": []interface {}{
                        "Aho",
                        "Lam",
                        "Sethi",
                        "Ullman",
                    },
                    "copies": float64(1),
                    "isbn":   "9780201100884",
                    "price":  float64(23.38),
                    "title":  "Compilers: Principles, Techniques, and Tools",
                },
            },
            "customers": []interface {}{
                map[string]interface {}{
                    "address": map[string]interface {}{
                        "city":     "Winchester",
                        "postcode": "SO22 5PU",
                        "street":   "2 Long Road",
                    },
                    "id":   "10001",
                    "name": "Joe Doe",
                },
                map[string]interface {}{
                    "address": map[string]interface {}{
                        "city":     "Winchester",
                        "postcode": "SO22 4WD",
                        "street":   "56 Letsby Avenue",
                    },
                    "id":   "10002",
                    "name": "Fred Bloggs",
                },
                map[string]interface {}{
                    "address": map[string]interface {}{
                        "city":     "Southampton",
                        "postcode": "SO14 0MG",
                        "street":   "1 Preddy Gate",
                    },
                    "id":   "10003",
                    "name": "Jason Arthur",
                },
            },
            "loans": []interface {}{
                map[string]interface {}{
                    "customer": "10001",
                    "isbn":     "9780262510875",
                    "return":   "2016-12-05",
                },
                map[string]interface {}{
                    "customer": "10003",
                    "isbn":     "9780201100884",
                    "return":   "2016-10-22",
                },
                map[string]interface {}{
                    "customer": "10003",
                    "isbn":     "9780262510875",
                    "return":   "2016-12-22",
                },
            },
        },
    },
    Dataset:     "library",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "library.loans@$l#$il.books@$b#$ib[$l.isbn=$b.isbn].customers@$c#$ic[$l.customer=$c.id].{\n  'title': $b.title,\n  'customer': $l.customer,\n  'name': $c.name,\n  'loan-index': $il,\n  'book-index': $ib,\n  'customer-index': $ic\n}\n",
    ExprFile:    "library-joins005.jsonata",
    Function:    "",
    Result:      []interface {}{
        map[string]interface {}{
            "book-index":     float64(0),
            "customer":       "10001",
            "customer-index": float64(0),
            "loan-index":     float64(0),
            "name":           "Joe Doe",
            "title":          "Structure and Interpretation of Computer Programs",
        },
        map[string]interface {}{
            "book-index":     float64(3),
            "customer":       "10003",
            "customer-index": float64(2),
            "loan-index":     float64(1),
            "name":           "Jason Arthur",
            "title":          "Compilers: Principles, Techniques, and Tools",
        },
        map[string]interface {}{
            "book-index":     float64(0),
            "customer":       "10003",
            "customer-index": float64(2),
            "loan-index":     float64(2),
            "name":           "Jason Arthur",
            "title":          "Structure and Interpretation of Computer Programs",
        },
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/joins/library-joins.json
/home/peter/talen/jsonata/tests.go:145: no results found, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "library": map[string]interface {}{
            "books": []interface {}{
                map[string]interface {}{
                    "authors": []interface {}{
                        "Abelson",
                        "Sussman",
                    },
                    "copies": float64(2),
                    "isbn":   "9780262510875",
                    "price":  float64(38.9),
                    "title":  "Structure and Interpretation of Computer Programs",
                },
                map[string]interface {}{
                    "authors": []interface {}{
                        "Kernighan",
                        "Richie",
                    },
                    "copies": float64(3),
                    "isbn":   "9780131103627",
                    "price":  float64(33.59),
                    "title":  "The C Programming Language",
                },
                map[string]interface {}{
                    "authors": []interface {}{
                        "Aho",
                        "Kernighan",
                        "Weinberger",
                    },
                    "copies": float64(1),
                    "isbn":   "9780201079814",
                    "title":  "The AWK Programming Language",
                },
                map[string]interface {}{
                    "authors": []interface {}{
                        "Aho",
                        "Lam",
                        "Sethi",
                        "Ullman",
                    },
                    "copies": float64(1),
                    "isbn":   "9780201100884",
                    "price":  float64(23.38),
                    "title":  "Compilers: Principles, Techniques, and Tools",
                },
            },
            "customers": []interface {}{
                map[string]interface {}{
                    "address": map[string]interface {}{
                        "city":     "Winchester",
                        "postcode": "SO22 5PU",
                        "street":   "2 Long Road",
                    },
                    "id":   "10001",
                    "name": "Joe Doe",
                },
                map[string]interface {}{
                    "address": map[string]interface {}{
                        "city":     "Winchester",
                        "postcode": "SO22 4WD",
                        "street":   "56 Letsby Avenue",
                    },
                    "id":   "10002",
                    "name": "Fred Bloggs",
                },
                map[string]interface {}{
                    "address": map[string]interface {}{
                        "city":     "Southampton",
                        "postcode": "SO14 0MG",
                        "street":   "1 Preddy Gate",
                    },
                    "id":   "10003",
                    "name": "Jason Arthur",
                },
            },
            "loans": []interface {}{
                map[string]interface {}{
                    "customer": "10001",
                    "isbn":     "9780262510875",
                    "return":   "2016-12-05",
                },
                map[string]interface {}{
                    "customer": "10003",
                    "isbn":     "9780201100884",
                    "return":   "2016-10-22",
                },
                map[string]interface {}{
                    "customer": "10003",
                    "isbn":     "9780262510875",
                    "return":   "2016-12-22",
                },
            },
        },
    },
    Dataset:     "library",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "library.loans@$l#$il.customers#$ic[$il=$ic].{\n  'customer': name,\n  'return': $l.return\n}\n",
    ExprFile:    "library-joins006.jsonata",
    Function:    "",
    Result:      []interface {}{
        map[string]interface {}{
            "customer": "Joe Doe",
            "return":   "2016-12-05",
        },
        map[string]interface {}{
            "customer": "Fred Bloggs",
            "return":   "2016-10-22",
        },
        map[string]interface {}{
            "customer": "Jason Arthur",
            "return":   "2016-12-22",
        },
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/joins/library-joins.json
/home/peter/talen/jsonata/tests.go:113: syntax error: '#$ib2', (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "library": map[string]interface {}{
            "books": []interface {}{
                map[string]interface {}{
                    "authors": []interface {}{
                        "Abelson",
                        "Sussman",
                    },
                    "copies": float64(2),
                    "isbn":   "9780262510875",
                    "price":  float64(38.9),
                    "title":  "Structure and Interpretation of Computer Programs",
                },
                map[string]interface {}{
                    "authors": []interface {}{
                        "Kernighan",
                        "Richie",
                    },
                    "copies": float64(3),
                    "isbn":   "9780131103627",
                    "price":  float64(33.59),
                    "title":  "The C Programming Language",
                },
                map[string]interface {}{
                    "authors": []interface {}{
                        "Aho",
                        "Kernighan",
                        "Weinberger",
                    },
                    "copies": float64(1),
                    "isbn":   "9780201079814",
                    "title":  "The AWK Programming Language",
                },
                map[string]interface {}{
                    "authors": []interface {}{
                        "Aho",
                        "Lam",
                        "Sethi",
                        "Ullman",
                    },
                    "copies": float64(1),
                    "isbn":   "9780201100884",
                    "price":  float64(23.38),
                    "title":  "Compilers: Principles, Techniques, and Tools",
                },
            },
            "customers": []interface {}{
                map[string]interface {}{
                    "address": map[string]interface {}{
                        "city":     "Winchester",
                        "postcode": "SO22 5PU",
                        "street":   "2 Long Road",
                    },
                    "id":   "10001",
                    "name": "Joe Doe",
                },
                map[string]interface {}{
                    "address": map[string]interface {}{
                        "city":     "Winchester",
                        "postcode": "SO22 4WD",
                        "street":   "56 Letsby Avenue",
                    },
                    "id":   "10002",
                    "name": "Fred Bloggs",
                },
                map[string]interface {}{
                    "address": map[string]interface {}{
                        "city":     "Southampton",
                        "postcode": "SO14 0MG",
                        "street":   "1 Preddy Gate",
                    },
                    "id":   "10003",
                    "name": "Jason Arthur",
                },
            },
            "loans": []interface {}{
                map[string]interface {}{
                    "customer": "10001",
                    "isbn":     "9780262510875",
                    "return":   "2016-12-05",
                },
                map[string]interface {}{
                    "customer": "10003",
                    "isbn":     "9780201100884",
                    "return":   "2016-10-22",
                },
                map[string]interface {}{
                    "customer": "10003",
                    "isbn":     "9780262510875",
                    "return":   "2016-12-22",
                },
            },
        },
    },
    Dataset:     "library",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "library.loans@$l#$il.books@$b#$ib[$l.isbn=$b.isbn]#$ib2.customers@$c#$ic[$l.customer=$c.id].{\n  'title': $b.title,\n  'customer': $l.customer,\n  'name': $c.name,\n  'loan-index': $il,\n  'book-index': $ib,\n  'customer-index': $ic,\n  'ib2': $ib2\n}\n",
    ExprFile:    "library-joins007.jsonata",
    Function:    "",
    Result:      []interface {}{
        map[string]interface {}{
            "book-index":     float64(0),
            "customer":       "10001",
            "customer-index": float64(0),
            "ib2":            float64(0),
            "loan-index":     float64(0),
            "name":           "Joe Doe",
            "title":          "Structure and Interpretation of Computer Programs",
        },
        map[string]interface {}{
            "book-index":     float64(3),
            "customer":       "10003",
            "customer-index": float64(2),
            "ib2":            float64(1),
            "loan-index":     float64(1),
            "name":           "Jason Arthur",
            "title":          "Compilers: Principles, Techniques, and Tools",
        },
        map[string]interface {}{
            "book-index":     float64(0),
            "customer":       "10003",
            "customer-index": float64(2),
            "ib2":            float64(2),
            "loan-index":     float64(2),
            "name":           "Jason Arthur",
            "title":          "Structure and Interpretation of Computer Programs",
        },
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/joins/library-joins.json
/home/peter/talen/jsonata/tests.go:145: no results found, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "library": map[string]interface {}{
            "books": []interface {}{
                map[string]interface {}{
                    "authors": []interface {}{
                        "Abelson",
                        "Sussman",
                    },
                    "copies": float64(2),
                    "isbn":   "9780262510875",
                    "price":  float64(38.9),
                    "title":  "Structure and Interpretation of Computer Programs",
                },
                map[string]interface {}{
                    "authors": []interface {}{
                        "Kernighan",
                        "Richie",
                    },
                    "copies": float64(3),
                    "isbn":   "9780131103627",
                    "price":  float64(33.59),
                    "title":  "The C Programming Language",
                },
                map[string]interface {}{
                    "authors": []interface {}{
                        "Aho",
                        "Kernighan",
                        "Weinberger",
                    },
                    "copies": float64(1),
                    "isbn":   "9780201079814",
                    "title":  "The AWK Programming Language",
                },
                map[string]interface {}{
                    "authors": []interface {}{
                        "Aho",
                        "Lam",
                        "Sethi",
                        "Ullman",
                    },
                    "copies": float64(1),
                    "isbn":   "9780201100884",
                    "price":  float64(23.38),
                    "title":  "Compilers: Principles, Techniques, and Tools",
                },
            },
            "customers": []interface {}{
                map[string]interface {}{
                    "address": map[string]interface {}{
                        "city":     "Winchester",
                        "postcode": "SO22 5PU",
                        "street":   "2 Long Road",
                    },
                    "id":   "10001",
                    "name": "Joe Doe",
                },
                map[string]interface {}{
                    "address": map[string]interface {}{
                        "city":     "Winchester",
                        "postcode": "SO22 4WD",
                        "street":   "56 Letsby Avenue",
                    },
                    "id":   "10002",
                    "name": "Fred Bloggs",
                },
                map[string]interface {}{
                    "address": map[string]interface {}{
                        "city":     "Southampton",
                        "postcode": "SO14 0MG",
                        "street":   "1 Preddy Gate",
                    },
                    "id":   "10003",
                    "name": "Jason Arthur",
                },
            },
            "loans": []interface {}{
                map[string]interface {}{
                    "customer": "10001",
                    "isbn":     "9780262510875",
                    "return":   "2016-12-05",
                },
                map[string]interface {}{
                    "customer": "10003",
                    "isbn":     "9780201100884",
                    "return":   "2016-10-22",
                },
                map[string]interface {}{
                    "customer": "10003",
                    "isbn":     "9780262510875",
                    "return":   "2016-12-22",
                },
            },
        },
    },
    Dataset:     "library",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "library.loans@$l.books@$b[$l.isbn=$b.isbn][1].{\n  'title': $b.title,\n  'customer': $l.customer\n}\n",
    ExprFile:    "library-joins008.jsonata",
    Function:    "",
    Result:      map[string]interface {}{
        "customer": "10003",
        "title":    "Compilers: Principles, Techniques, and Tools",
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/joins/library-joins.json
	--- .../groups/joins/library-joins.json
/home/peter/talen/jsonata/tests.go:145: no results found, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "library": map[string]interface {}{
            "books": []interface {}{
                map[string]interface {}{
                    "authors": []interface {}{
                        "Abelson",
                        "Sussman",
                    },
                    "copies": float64(2),
                    "isbn":   "9780262510875",
                    "price":  float64(38.9),
                    "title":  "Structure and Interpretation of Computer Programs",
                },
                map[string]interface {}{
                    "authors": []interface {}{
                        "Kernighan",
                        "Richie",
                    },
                    "copies": float64(3),
                    "isbn":   "9780131103627",
                    "price":  float64(33.59),
                    "title":  "The C Programming Language",
                },
                map[string]interface {}{
                    "authors": []interface {}{
                        "Aho",
                        "Kernighan",
                        "Weinberger",
                    },
                    "copies": float64(1),
                    "isbn":   "9780201079814",
                    "title":  "The AWK Programming Language",
                },
                map[string]interface {}{
                    "authors": []interface {}{
                        "Aho",
                        "Lam",
                        "Sethi",
                        "Ullman",
                    },
                    "copies": float64(1),
                    "isbn":   "9780201100884",
                    "price":  float64(23.38),
                    "title":  "Compilers: Principles, Techniques, and Tools",
                },
            },
            "customers": []interface {}{
                map[string]interface {}{
                    "address": map[string]interface {}{
                        "city":     "Winchester",
                        "postcode": "SO22 5PU",
                        "street":   "2 Long Road",
                    },
                    "id":   "10001",
                    "name": "Joe Doe",
                },
                map[string]interface {}{
                    "address": map[string]interface {}{
                        "city":     "Winchester",
                        "postcode": "SO22 4WD",
                        "street":   "56 Letsby Avenue",
                    },
                    "id":   "10002",
                    "name": "Fred Bloggs",
                },
                map[string]interface {}{
                    "address": map[string]interface {}{
                        "city":     "Southampton",
                        "postcode": "SO14 0MG",
                        "street":   "1 Preddy Gate",
                    },
                    "id":   "10003",
                    "name": "Jason Arthur",
                },
            },
            "loans": []interface {}{
                map[string]interface {}{
                    "customer": "10001",
                    "isbn":     "9780262510875",
                    "return":   "2016-12-05",
                },
                map[string]interface {}{
                    "customer": "10003",
                    "isbn":     "9780201100884",
                    "return":   "2016-10-22",
                },
                map[string]interface {}{
                    "customer": "10003",
                    "isbn":     "9780262510875",
                    "return":   "2016-12-22",
                },
            },
        },
    },
    Dataset:     "library",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "library.loans@$l.books@$b[$l.isbn=$b.isbn][1][].{\n  'title': $b.title,\n  'customer': $l.customer\n}\n",
    ExprFile:    "library-joins010.jsonata",
    Function:    "",
    Result:      []interface {}{
        map[string]interface {}{
            "customer": "10003",
            "title":    "Compilers: Principles, Techniques, and Tools",
        },
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/lambdas/case000.json
	--- .../groups/lambdas/case001.json
	--- .../groups/lambdas/case002.json
	--- .../groups/lambdas/case003.json
	--- .../groups/lambdas/case004.json
	--- .../groups/lambdas/case005.json
	--- .../groups/lambdas/case006.json
	--- .../groups/lambdas/case007.json
	--- .../groups/lambdas/case008.json
	--- .../groups/lambdas/case009.json
	--- .../groups/lambdas/case010.json
	--- .../groups/lambdas/case011.json
	--- .../groups/lambdas/case012.json
	--- .../groups/literals/array-inputs.json
	--- .../groups/literals/array-inputs.json
	--- .../groups/literals/array-inputs.json
	--- .../groups/literals/array-inputs.json
	--- .../groups/literals/case000.json
	--- .../groups/literals/case001.json
	--- .../groups/literals/case002.json
	--- .../groups/literals/case003.json
	--- .../groups/literals/case004.json
	--- .../groups/literals/case005.json
	--- .../groups/literals/case006.json
	--- .../groups/literals/case007.json
	--- .../groups/literals/case008.json
	--- .../groups/literals/case009.json
	--- .../groups/literals/case010.json
	--- .../groups/literals/case011.json
	--- .../groups/literals/case012.json
	--- .../groups/literals/case013.json
	--- .../groups/literals/case014.json
	--- .../groups/literals/case015.json
	--- .../groups/literals/case016.json
	--- .../groups/literals/case017.json
	--- .../groups/literals/case018.json
	--- .../groups/literals/case019.json
	--- .../groups/matchers/case000.json
	--- .../groups/matchers/case001.json
	--- .../groups/missing-paths/case000.json
	--- .../groups/missing-paths/case001.json
	--- .../groups/missing-paths/case002.json
	--- .../groups/missing-paths/case003.json
	--- .../groups/missing-paths/case004.json
	--- .../groups/missing-paths/case005.json
	--- .../groups/multiple-array-selectors/case000.json
	--- .../groups/multiple-array-selectors/case001.json
	--- .../groups/multiple-array-selectors/case002.json
	--- .../groups/null/case000.json
	--- .../groups/null/case001.json
	--- .../groups/null/case002.json
	--- .../groups/null/case003.json
	--- .../groups/null/case004.json
	--- .../groups/null/case005.json
	--- .../groups/null/case006.json
	--- .../groups/numeric-operators/case000.json
	--- .../groups/numeric-operators/case001.json
	--- .../groups/numeric-operators/case002.json
	--- .../groups/numeric-operators/case003.json
	--- .../groups/numeric-operators/case004.json
	--- .../groups/numeric-operators/case005.json
	--- .../groups/numeric-operators/case006.json
	--- .../groups/numeric-operators/case007.json
	--- .../groups/numeric-operators/case008.json
	--- .../groups/numeric-operators/case009.json
	--- .../groups/numeric-operators/case010.json
	--- .../groups/numeric-operators/case011.json
	--- .../groups/numeric-operators/case012.json
	--- .../groups/numeric-operators/case013.json
	--- .../groups/numeric-operators/case014.json
	--- .../groups/numeric-operators/case015.json
	--- .../groups/numeric-operators/case016.json
	--- .../groups/numeric-operators/case017.json
	--- .../groups/numeric-operators/case018.json
	--- .../groups/object-constructor/case000.json
	--- .../groups/object-constructor/case001.json
	--- .../groups/object-constructor/case002.json
	--- .../groups/object-constructor/case003.json
	--- .../groups/object-constructor/case004.json
	--- .../groups/object-constructor/case005.json
	--- .../groups/object-constructor/case006.json
	--- .../groups/object-constructor/case007.json
	--- .../groups/object-constructor/case008.json
/home/peter/talen/jsonata/tests.go:113: invalid path step "Product Name": paths cannot contain nulls, strings, numbers or booleans, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:     "dataset5",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "Account.Order{OrderID: Product.\"Product Name\"}",
    ExprFile:    "",
    Function:    "",
    Result:      map[string]interface {}{
        "order103": []interface {}{
            "Bowler Hat",
            "Trilby hat",
        },
        "order104": []interface {}{
            "Bowler Hat",
            "Cloak",
        },
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/object-constructor/case009.json
/home/peter/talen/jsonata/tests.go:113: invalid path step "Product Name": paths cannot contain nulls, strings, numbers or booleans, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:     "dataset5",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "Account.Order.{OrderID: Product.\"Product Name\"}",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        map[string]interface {}{
            "order103": []interface {}{
                "Bowler Hat",
                "Trilby hat",
            },
        },
        map[string]interface {}{
            "order104": []interface {}{
                "Bowler Hat",
                "Cloak",
            },
        },
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/object-constructor/case010.json
	--- .../groups/object-constructor/case011.json
	--- .../groups/object-constructor/case012.json
	--- .../groups/object-constructor/case013.json
	--- .../groups/object-constructor/case014.json
	--- .../groups/object-constructor/case015.json
	--- .../groups/object-constructor/case016.json
	--- .../groups/object-constructor/case017.json
	--- .../groups/object-constructor/case018.json
	--- .../groups/object-constructor/case019.json
/home/peter/talen/jsonata/tests.go:113: invalid path step "Product Name": paths cannot contain nulls, strings, numbers or booleans, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:     "dataset5",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "Account.Order{  OrderID: {    \"TotalPrice\":$sum(Product.(Price * Quantity)),    \"Items\": Product.\"Product Name\"  }}",
    ExprFile:    "",
    Function:    "",
    Result:      map[string]interface {}{
        "order103": map[string]interface {}{
            "Items": []interface {}{
                "Bowler Hat",
                "Trilby hat",
            },
            "TotalPrice": float64(90.57000000000001),
        },
        "order104": map[string]interface {}{
            "Items": []interface {}{
                "Bowler Hat",
                "Cloak",
            },
            "TotalPrice": float64(245.79000000000002),
        },
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/object-constructor/case020.json
/home/peter/talen/jsonata/tests.go:113: invalid path step "Product Name": paths cannot contain nulls, strings, numbers or booleans, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:     "dataset5",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "{  \"Order\": Account.Order.{      \"ID\": OrderID,      \"Product\": Product.{          \"Name\": $.\"Product Name\",          \"SKU\": ProductID,          \"Details\": {            \"Weight\": Description.Weight,            \"Dimensions\": Description.(Width & \" x \" & Height & \" x \" & Depth)          }        },      \"Total Price\": $sum(Product.(Price * Quantity))    }}",
    ExprFile:    "",
    Function:    "",
    Result:      map[string]interface {}{
        "Order": []interface {}{
            map[string]interface {}{
                "ID":      "order103",
                "Product": []interface {}{
                    map[string]interface {}{
                        "Details": map[string]interface {}{
                            "Dimensions": "300 x 200 x 210",
                            "Weight":     float64(0.75),
                        },
                        "Name": "Bowler Hat",
                        "SKU":  float64(858383),
                    },
                    map[string]interface {}{
                        "Details": map[string]interface {}{
                            "Dimensions": "300 x 200 x 210",
                            "Weight":     float64(0.6),
                        },
                        "Name": "Trilby hat",
                        "SKU":  float64(858236),
                    },
                },
                "Total Price": float64(90.57000000000001),
            },
            map[string]interface {}{
                "ID":      "order104",
                "Product": []interface {}{
                    map[string]interface {}{
                        "Details": map[string]interface {}{
                            "Dimensions": "300 x 200 x 210",
                            "Weight":     float64(0.75),
                        },
                        "Name": "Bowler Hat",
                        "SKU":  float64(858383),
                    },
                    map[string]interface {}{
                        "Details": map[string]interface {}{
                            "Dimensions": "30 x 20 x 210",
                            "Weight":     float64(2),
                        },
                        "Name": "Cloak",
                        "SKU":  float64(345664),
                    },
                },
                "Total Price": float64(245.79000000000002),
            },
        },
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/object-constructor/case021.json
	--- .../groups/object-constructor/case022.json
	--- .../groups/object-constructor/case023.json
	--- .../groups/object-constructor/case024.json
	--- .../groups/object-constructor/case025.json
	--- .../groups/parent-operator/errors.json
	--- .../groups/parent-operator/errors.json
	--- .../groups/parent-operator/errors.json
	--- .../groups/parent-operator/errors.json
	--- .../groups/parent-operator/errors.json
	--- .../groups/parent-operator/errors.json
	--- .../groups/parent-operator/errors.json
	--- .../groups/parent-operator/errors.json
	--- .../groups/parent-operator/errors.json
	--- .../groups/parent-operator/errors.json
	--- .../groups/parent-operator/errors.json
	--- .../groups/parent-operator/errors.json
	--- .../groups/parent-operator/errors.json
	--- .../groups/parent-operator/errors.json
	--- .../groups/parent-operator/errors.json
	--- .../groups/parent-operator/errors.json
	--- .../groups/parent-operator/parent.json
/home/peter/talen/jsonata/tests.go:113: the symbol '%' cannot be used as a prefix operator, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:     "dataset5",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "Account.Order.Product.{\n  \"order\": %.OrderID,\n  \"Product\": `Product Name`,\n  \"Weight\": Description.Weight\n}\n",
    ExprFile:    "parent000.jsonata",
    Function:    "",
    Result:      []interface {}{
        map[string]interface {}{
            "Product": "Bowler Hat",
            "Weight":  float64(0.75),
            "order":   "order103",
        },
        map[string]interface {}{
            "Product": "Trilby hat",
            "Weight":  float64(0.6),
            "order":   "order103",
        },
        map[string]interface {}{
            "Product": "Bowler Hat",
            "Weight":  float64(0.75),
            "order":   "order104",
        },
        map[string]interface {}{
            "Product": "Cloak",
            "Weight":  float64(2),
            "order":   "order104",
        },
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/parent-operator/parent.json
/home/peter/talen/jsonata/tests.go:113: the symbol '%' cannot be used as a prefix operator, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:     "dataset5",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "Account.(Order.Product).{\n  \"order\": %.OrderID,\n  \"Product\": `Product Name`,\n  \"Weight\": Description.Weight\n}\n",
    ExprFile:    "parent001.jsonata",
    Function:    "",
    Result:      []interface {}{
        map[string]interface {}{
            "Product": "Bowler Hat",
            "Weight":  float64(0.75),
            "order":   "order103",
        },
        map[string]interface {}{
            "Product": "Trilby hat",
            "Weight":  float64(0.6),
            "order":   "order103",
        },
        map[string]interface {}{
            "Product": "Bowler Hat",
            "Weight":  float64(0.75),
            "order":   "order104",
        },
        map[string]interface {}{
            "Product": "Cloak",
            "Weight":  float64(2),
            "order":   "order104",
        },
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/parent-operator/parent.json
/home/peter/talen/jsonata/tests.go:113: the symbol '%' cannot be used as a prefix operator, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:     "dataset5",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "Account.Order.Product.[`Product Name`, %.OrderID]",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        "Bowler Hat",
        "order103",
        "Trilby hat",
        "order103",
        "Bowler Hat",
        "order104",
        "Cloak",
        "order104",
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/parent-operator/parent.json
/home/peter/talen/jsonata/tests.go:113: the symbol '%' cannot be used as a prefix operator, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:     "dataset5",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "Account.Order.Product.{ `Product Name`: [Quantity, %.OrderID] }",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        map[string]interface {}{
            "Bowler Hat": []interface {}{
                float64(2),
                "order103",
            },
        },
        map[string]interface {}{
            "Trilby hat": []interface {}{
                float64(1),
                "order103",
            },
        },
        map[string]interface {}{
            "Bowler Hat": []interface {}{
                float64(4),
                "order104",
            },
        },
        map[string]interface {}{
            "Cloak": []interface {}{
                float64(1),
                "order104",
            },
        },
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/parent-operator/parent.json
/home/peter/talen/jsonata/tests.go:113: the symbol '%' cannot be used as a prefix operator, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:     "dataset5",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "Account.Order.Product.{ `Product Name`: [Quantity, (%.OrderID)] }",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        map[string]interface {}{
            "Bowler Hat": []interface {}{
                float64(2),
                "order103",
            },
        },
        map[string]interface {}{
            "Trilby hat": []interface {}{
                float64(1),
                "order103",
            },
        },
        map[string]interface {}{
            "Bowler Hat": []interface {}{
                float64(4),
                "order104",
            },
        },
        map[string]interface {}{
            "Cloak": []interface {}{
                float64(1),
                "order104",
            },
        },
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/parent-operator/parent.json
/home/peter/talen/jsonata/tests.go:113: the symbol '%' cannot be used as a prefix operator, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:     "dataset5",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "Account.Order.Product[%.OrderID='order104'].SKU",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        "040657863",
        "0406654603",
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/parent-operator/parent.json
/home/peter/talen/jsonata/tests.go:113: the symbol '%' cannot be used as a prefix operator, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:     "dataset5",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "Account.Order.Product[%.%.`Account Name`='Firefly'].SKU",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        "0406654608",
        "0406634348",
        "040657863",
        "0406654603",
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/parent-operator/parent.json
/home/peter/talen/jsonata/tests.go:113: the symbol '%' cannot be used as a prefix operator, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:     "dataset5",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "Account.Order.Product.Price[%.%.OrderID='order103']",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        float64(34.45),
        float64(21.67),
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/parent-operator/parent.json
/home/peter/talen/jsonata/tests.go:113: the symbol '%' cannot be used as a prefix operator, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:     "dataset5",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "Account.Order.Product.Price.%[%.OrderID='order103'].SKU",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        "0406654608",
        "0406634348",
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/parent-operator/parent.json
/home/peter/talen/jsonata/tests.go:113: the symbol '%' cannot be used as a prefix operator, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:     "dataset5",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "Account.Order.Product[%.OrderID='order104'][%.%.`Account Name`='Firefly'].SKU",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        "040657863",
        "0406654603",
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/parent-operator/parent.json
/home/peter/talen/jsonata/tests.go:113: the symbol '%' cannot be used as a prefix operator, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:     "dataset5",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "(Account.Order.Product)[%.OrderID='order104'].SKU",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        "040657863",
        "0406654603",
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/parent-operator/parent.json
/home/peter/talen/jsonata/tests.go:113: the symbol '%' cannot be used as a prefix operator, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:     "dataset5",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "Account.Order.Product.{ %.OrderID: Price * Quantity }",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        map[string]interface {}{
            "order103": float64(68.9),
        },
        map[string]interface {}{
            "order103": float64(21.67),
        },
        map[string]interface {}{
            "order104": float64(137.8),
        },
        map[string]interface {}{
            "order104": float64(107.99),
        },
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/parent-operator/parent.json
/home/peter/talen/jsonata/tests.go:113: the symbol '%' cannot be used as a prefix operator, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:         "dataset5",
    Depth:           0,
    Description:     "",
    Error:           nil,
    Expr:            "Account.Order.().%",
    ExprFile:        "",
    Function:        "",
    Result:          nil,
    Timelimit:       0,
    Token:           "",
    UndefinedResult: true,
    Unordered:       false,
}
	--- .../groups/parent-operator/parent.json
/home/peter/talen/jsonata/tests.go:113: the symbol '%' cannot be used as a prefix operator, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:     "dataset5",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "Account.Order.Product.{\n  'Product': `Product Name`,\n  'Order': %.OrderID,\n  'Account': %.%.`Account Name`\n}\n",
    ExprFile:    "parent002.jsonata",
    Function:    "",
    Result:      []interface {}{
        map[string]interface {}{
            "Account": "Firefly",
            "Order":   "order103",
            "Product": "Bowler Hat",
        },
        map[string]interface {}{
            "Account": "Firefly",
            "Order":   "order103",
            "Product": "Trilby hat",
        },
        map[string]interface {}{
            "Account": "Firefly",
            "Order":   "order104",
            "Product": "Bowler Hat",
        },
        map[string]interface {}{
            "Account": "Firefly",
            "Order":   "order104",
            "Product": "Cloak",
        },
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/parent-operator/parent.json
/home/peter/talen/jsonata/tests.go:113: the symbol '%' cannot be used as a prefix operator, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:     "dataset5",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "Account.Order.(Product).{\n  'Product': `Product Name`,\n  'Order': %.OrderID,\n  'Account': %.%.`Account Name`\n}\n",
    ExprFile:    "parent003.jsonata",
    Function:    "",
    Result:      []interface {}{
        map[string]interface {}{
            "Account": "Firefly",
            "Order":   "order103",
            "Product": "Bowler Hat",
        },
        map[string]interface {}{
            "Account": "Firefly",
            "Order":   "order103",
            "Product": "Trilby hat",
        },
        map[string]interface {}{
            "Account": "Firefly",
            "Order":   "order104",
            "Product": "Bowler Hat",
        },
        map[string]interface {}{
            "Account": "Firefly",
            "Order":   "order104",
            "Product": "Cloak",
        },
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/parent-operator/parent.json
/home/peter/talen/jsonata/tests.go:113: the symbol '%' cannot be used as a prefix operator, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:     "dataset5",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "Account.(Order.(Product)).{\n  'Product': `Product Name`,\n  'Order': %.OrderID,\n  'Account': %.%.`Account Name`\n}\n",
    ExprFile:    "parent004.jsonata",
    Function:    "",
    Result:      []interface {}{
        map[string]interface {}{
            "Account": "Firefly",
            "Order":   "order103",
            "Product": "Bowler Hat",
        },
        map[string]interface {}{
            "Account": "Firefly",
            "Order":   "order103",
            "Product": "Trilby hat",
        },
        map[string]interface {}{
            "Account": "Firefly",
            "Order":   "order104",
            "Product": "Bowler Hat",
        },
        map[string]interface {}{
            "Account": "Firefly",
            "Order":   "order104",
            "Product": "Cloak",
        },
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/parent-operator/parent.json
/home/peter/talen/jsonata/tests.go:113: the symbol '%' cannot be used as a prefix operator, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:     "dataset5",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "Account.(Order).(Product).{\n  'Product': `Product Name`,\n  'Order': %.OrderID,\n  'Account': %.%.`Account Name`\n}\n",
    ExprFile:    "parent005.jsonata",
    Function:    "",
    Result:      []interface {}{
        map[string]interface {}{
            "Account": "Firefly",
            "Order":   "order103",
            "Product": "Bowler Hat",
        },
        map[string]interface {}{
            "Account": "Firefly",
            "Order":   "order103",
            "Product": "Trilby hat",
        },
        map[string]interface {}{
            "Account": "Firefly",
            "Order":   "order104",
            "Product": "Bowler Hat",
        },
        map[string]interface {}{
            "Account": "Firefly",
            "Order":   "order104",
            "Product": "Cloak",
        },
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/parent-operator/parent.json
/home/peter/talen/jsonata/tests.go:113: the symbol '%' cannot be used as a prefix operator, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:     "dataset5",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "(Account.Order).(Product).{\n  'Product': `Product Name`,\n  'Order': %.OrderID,\n  'Account': %.%.`Account Name`\n}\n",
    ExprFile:    "parent006.jsonata",
    Function:    "",
    Result:      []interface {}{
        map[string]interface {}{
            "Account": "Firefly",
            "Order":   "order103",
            "Product": "Bowler Hat",
        },
        map[string]interface {}{
            "Account": "Firefly",
            "Order":   "order103",
            "Product": "Trilby hat",
        },
        map[string]interface {}{
            "Account": "Firefly",
            "Order":   "order104",
            "Product": "Bowler Hat",
        },
        map[string]interface {}{
            "Account": "Firefly",
            "Order":   "order104",
            "Product": "Cloak",
        },
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/parent-operator/parent.json
/home/peter/talen/jsonata/tests.go:113: the symbol '%' cannot be used as a prefix operator, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:     "dataset5",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "Account.Order.Product.SKU^(%.Price)",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        "0406634348",
        "0406654608",
        "040657863",
        "0406654603",
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/parent-operator/parent.json
/home/peter/talen/jsonata/tests.go:113: the symbol '%' cannot be used as a prefix operator, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:     "dataset5",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "Account.Order.Product.SKU^(%.Price, >%.%.OrderID)",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        "0406634348",
        "040657863",
        "0406654608",
        "0406654603",
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/parent-operator/parent.json
/home/peter/talen/jsonata/tests.go:113: the symbol '%' cannot be used as a prefix operator, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:     "dataset5",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "Account.Order.Product.Description.{ 'Colour': Colour, 'Total': %.Price * %.Quantity }",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        map[string]interface {}{
            "Colour": "Purple",
            "Total":  float64(68.9),
        },
        map[string]interface {}{
            "Colour": "Orange",
            "Total":  float64(21.67),
        },
        map[string]interface {}{
            "Colour": "Purple",
            "Total":  float64(137.8),
        },
        map[string]interface {}{
            "Colour": "Black",
            "Total":  float64(107.99),
        },
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/parent-operator/parent.json
/home/peter/talen/jsonata/tests.go:113: the symbol '%' cannot be used as a prefix operator, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:     "dataset5",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "Account.Order.Product.Description.{ 'Item': Colour & ' ' & %.`Product Name`, 'Discounted': (%.%.OrderID = 'order103') ? %.Price / 2 : %.Price }",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        map[string]interface {}{
            "Discounted": float64(17.225),
            "Item":       "Purple Bowler Hat",
        },
        map[string]interface {}{
            "Discounted": float64(10.835),
            "Item":       "Orange Trilby hat",
        },
        map[string]interface {}{
            "Discounted": float64(34.45),
            "Item":       "Purple Bowler Hat",
        },
        map[string]interface {}{
            "Discounted": float64(107.99),
            "Item":       "Black Cloak",
        },
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/parent-operator/parent.json
/home/peter/talen/jsonata/tests.go:113: the symbol '%' cannot be used as a prefix operator, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:     "dataset5",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "Account.Order.Product.( $parent := %; %.OrderID )",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        "order103",
        "order103",
        "order104",
        "order104",
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/parent-operator/parent.json
/home/peter/talen/jsonata/tests.go:113: the symbol '%' cannot be used as a prefix operator, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:     "dataset5",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "Account.Order.Product.( $parent := %; $parent.OrderID )",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        "order103",
        "order103",
        "order104",
        "order104",
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/parent-operator/parent.json
/home/peter/talen/jsonata/tests.go:113: the symbol '%' cannot be used as a prefix operator, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "library": map[string]interface {}{
            "books": []interface {}{
                map[string]interface {}{
                    "authors": []interface {}{
                        "Abelson",
                        "Sussman",
                    },
                    "copies": float64(2),
                    "isbn":   "9780262510875",
                    "price":  float64(38.9),
                    "title":  "Structure and Interpretation of Computer Programs",
                },
                map[string]interface {}{
                    "authors": []interface {}{
                        "Kernighan",
                        "Richie",
                    },
                    "copies": float64(3),
                    "isbn":   "9780131103627",
                    "price":  float64(33.59),
                    "title":  "The C Programming Language",
                },
                map[string]interface {}{
                    "authors": []interface {}{
                        "Aho",
                        "Kernighan",
                        "Weinberger",
                    },
                    "copies": float64(1),
                    "isbn":   "9780201079814",
                    "title":  "The AWK Programming Language",
                },
                map[string]interface {}{
                    "authors": []interface {}{
                        "Aho",
                        "Lam",
                        "Sethi",
                        "Ullman",
                    },
                    "copies": float64(1),
                    "isbn":   "9780201100884",
                    "price":  float64(23.38),
                    "title":  "Compilers: Principles, Techniques, and Tools",
                },
            },
            "customers": []interface {}{
                map[string]interface {}{
                    "address": map[string]interface {}{
                        "city":     "Winchester",
                        "postcode": "SO22 5PU",
                        "street":   "2 Long Road",
                    },
                    "id":   "10001",
                    "name": "Joe Doe",
                },
                map[string]interface {}{
                    "address": map[string]interface {}{
                        "city":     "Winchester",
                        "postcode": "SO22 4WD",
                        "street":   "56 Letsby Avenue",
                    },
                    "id":   "10002",
                    "name": "Fred Bloggs",
                },
                map[string]interface {}{
                    "address": map[string]interface {}{
                        "city":     "Southampton",
                        "postcode": "SO14 0MG",
                        "street":   "1 Preddy Gate",
                    },
                    "id":   "10003",
                    "name": "Jason Arthur",
                },
            },
            "loans": []interface {}{
                map[string]interface {}{
                    "customer": "10001",
                    "isbn":     "9780262510875",
                    "return":   "2016-12-05",
                },
                map[string]interface {}{
                    "customer": "10003",
                    "isbn":     "9780201100884",
                    "return":   "2016-10-22",
                },
                map[string]interface {}{
                    "customer": "10003",
                    "isbn":     "9780262510875",
                    "return":   "2016-12-22",
                },
            },
        },
    },
    Dataset:     "library",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "library.loans@$L.books@$B[$L.isbn=$B.isbn].{ 'book': $B.title, 'parent': $keys(%) }",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        map[string]interface {}{
            "book":   "Structure and Interpretation of Computer Programs",
            "parent": []interface {}{
                "books",
                "loans",
                "customers",
            },
        },
        map[string]interface {}{
            "book":   "Compilers: Principles, Techniques, and Tools",
            "parent": []interface {}{
                "books",
                "loans",
                "customers",
            },
        },
        map[string]interface {}{
            "book":   "Structure and Interpretation of Computer Programs",
            "parent": []interface {}{
                "books",
                "loans",
                "customers",
            },
        },
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/parent-operator/parent.json
/home/peter/talen/jsonata/tests.go:113: the symbol '%' cannot be used as a prefix operator, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "library": map[string]interface {}{
            "books": []interface {}{
                map[string]interface {}{
                    "authors": []interface {}{
                        "Abelson",
                        "Sussman",
                    },
                    "copies": float64(2),
                    "isbn":   "9780262510875",
                    "price":  float64(38.9),
                    "title":  "Structure and Interpretation of Computer Programs",
                },
                map[string]interface {}{
                    "authors": []interface {}{
                        "Kernighan",
                        "Richie",
                    },
                    "copies": float64(3),
                    "isbn":   "9780131103627",
                    "price":  float64(33.59),
                    "title":  "The C Programming Language",
                },
                map[string]interface {}{
                    "authors": []interface {}{
                        "Aho",
                        "Kernighan",
                        "Weinberger",
                    },
                    "copies": float64(1),
                    "isbn":   "9780201079814",
                    "title":  "The AWK Programming Language",
                },
                map[string]interface {}{
                    "authors": []interface {}{
                        "Aho",
                        "Lam",
                        "Sethi",
                        "Ullman",
                    },
                    "copies": float64(1),
                    "isbn":   "9780201100884",
                    "price":  float64(23.38),
                    "title":  "Compilers: Principles, Techniques, and Tools",
                },
            },
            "customers": []interface {}{
                map[string]interface {}{
                    "address": map[string]interface {}{
                        "city":     "Winchester",
                        "postcode": "SO22 5PU",
                        "street":   "2 Long Road",
                    },
                    "id":   "10001",
                    "name": "Joe Doe",
                },
                map[string]interface {}{
                    "address": map[string]interface {}{
                        "city":     "Winchester",
                        "postcode": "SO22 4WD",
                        "street":   "56 Letsby Avenue",
                    },
                    "id":   "10002",
                    "name": "Fred Bloggs",
                },
                map[string]interface {}{
                    "address": map[string]interface {}{
                        "city":     "Southampton",
                        "postcode": "SO14 0MG",
                        "street":   "1 Preddy Gate",
                    },
                    "id":   "10003",
                    "name": "Jason Arthur",
                },
            },
            "loans": []interface {}{
                map[string]interface {}{
                    "customer": "10001",
                    "isbn":     "9780262510875",
                    "return":   "2016-12-05",
                },
                map[string]interface {}{
                    "customer": "10003",
                    "isbn":     "9780201100884",
                    "return":   "2016-10-22",
                },
                map[string]interface {}{
                    "customer": "10003",
                    "isbn":     "9780262510875",
                    "return":   "2016-12-22",
                },
            },
        },
    },
    Dataset:     "library",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "library.loans@$L.books@$B[$L.isbn=$B.isbn].customers[id=$L.customer].{ 'book': $B.title, 'customer': name, 'parent': $keys(%) }",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        map[string]interface {}{
            "book":     "Structure and Interpretation of Computer Programs",
            "customer": "Joe Doe",
            "parent":   []interface {}{
                "books",
                "loans",
                "customers",
            },
        },
        map[string]interface {}{
            "book":     "Compilers: Principles, Techniques, and Tools",
            "customer": "Jason Arthur",
            "parent":   []interface {}{
                "books",
                "loans",
                "customers",
            },
        },
        map[string]interface {}{
            "book":     "Structure and Interpretation of Computer Programs",
            "customer": "Jason Arthur",
            "parent":   []interface {}{
                "books",
                "loans",
                "customers",
            },
        },
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/parent-operator/parent.json
/home/peter/talen/jsonata/tests.go:113: the symbol '%' cannot be used as a prefix operator, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "library": map[string]interface {}{
            "books": []interface {}{
                map[string]interface {}{
                    "authors": []interface {}{
                        "Abelson",
                        "Sussman",
                    },
                    "copies": float64(2),
                    "isbn":   "9780262510875",
                    "price":  float64(38.9),
                    "title":  "Structure and Interpretation of Computer Programs",
                },
                map[string]interface {}{
                    "authors": []interface {}{
                        "Kernighan",
                        "Richie",
                    },
                    "copies": float64(3),
                    "isbn":   "9780131103627",
                    "price":  float64(33.59),
                    "title":  "The C Programming Language",
                },
                map[string]interface {}{
                    "authors": []interface {}{
                        "Aho",
                        "Kernighan",
                        "Weinberger",
                    },
                    "copies": float64(1),
                    "isbn":   "9780201079814",
                    "title":  "The AWK Programming Language",
                },
                map[string]interface {}{
                    "authors": []interface {}{
                        "Aho",
                        "Lam",
                        "Sethi",
                        "Ullman",
                    },
                    "copies": float64(1),
                    "isbn":   "9780201100884",
                    "price":  float64(23.38),
                    "title":  "Compilers: Principles, Techniques, and Tools",
                },
            },
            "customers": []interface {}{
                map[string]interface {}{
                    "address": map[string]interface {}{
                        "city":     "Winchester",
                        "postcode": "SO22 5PU",
                        "street":   "2 Long Road",
                    },
                    "id":   "10001",
                    "name": "Joe Doe",
                },
                map[string]interface {}{
                    "address": map[string]interface {}{
                        "city":     "Winchester",
                        "postcode": "SO22 4WD",
                        "street":   "56 Letsby Avenue",
                    },
                    "id":   "10002",
                    "name": "Fred Bloggs",
                },
                map[string]interface {}{
                    "address": map[string]interface {}{
                        "city":     "Southampton",
                        "postcode": "SO14 0MG",
                        "street":   "1 Preddy Gate",
                    },
                    "id":   "10003",
                    "name": "Jason Arthur",
                },
            },
            "loans": []interface {}{
                map[string]interface {}{
                    "customer": "10001",
                    "isbn":     "9780262510875",
                    "return":   "2016-12-05",
                },
                map[string]interface {}{
                    "customer": "10003",
                    "isbn":     "9780201100884",
                    "return":   "2016-10-22",
                },
                map[string]interface {}{
                    "customer": "10003",
                    "isbn":     "9780262510875",
                    "return":   "2016-12-22",
                },
            },
        },
    },
    Dataset:     "library",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "library.loans@$L.books@$B[$L.isbn=$B.isbn].customers[id=$L.customer].{ 'book': $B.title, 'customer': name, 'parent': $keys(%.%) }",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        map[string]interface {}{
            "book":     "Structure and Interpretation of Computer Programs",
            "customer": "Joe Doe",
            "parent":   []interface {}{
                "books",
                "loans",
                "customers",
            },
        },
        map[string]interface {}{
            "book":     "Compilers: Principles, Techniques, and Tools",
            "customer": "Jason Arthur",
            "parent":   []interface {}{
                "books",
                "loans",
                "customers",
            },
        },
        map[string]interface {}{
            "book":     "Structure and Interpretation of Computer Programs",
            "customer": "Jason Arthur",
            "parent":   []interface {}{
                "books",
                "loans",
                "customers",
            },
        },
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/parent-operator/parent.json
/home/peter/talen/jsonata/tests.go:113: the symbol '%' cannot be used as a prefix operator, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "library": map[string]interface {}{
            "books": []interface {}{
                map[string]interface {}{
                    "authors": []interface {}{
                        "Abelson",
                        "Sussman",
                    },
                    "copies": float64(2),
                    "isbn":   "9780262510875",
                    "price":  float64(38.9),
                    "title":  "Structure and Interpretation of Computer Programs",
                },
                map[string]interface {}{
                    "authors": []interface {}{
                        "Kernighan",
                        "Richie",
                    },
                    "copies": float64(3),
                    "isbn":   "9780131103627",
                    "price":  float64(33.59),
                    "title":  "The C Programming Language",
                },
                map[string]interface {}{
                    "authors": []interface {}{
                        "Aho",
                        "Kernighan",
                        "Weinberger",
                    },
                    "copies": float64(1),
                    "isbn":   "9780201079814",
                    "title":  "The AWK Programming Language",
                },
                map[string]interface {}{
                    "authors": []interface {}{
                        "Aho",
                        "Lam",
                        "Sethi",
                        "Ullman",
                    },
                    "copies": float64(1),
                    "isbn":   "9780201100884",
                    "price":  float64(23.38),
                    "title":  "Compilers: Principles, Techniques, and Tools",
                },
            },
            "customers": []interface {}{
                map[string]interface {}{
                    "address": map[string]interface {}{
                        "city":     "Winchester",
                        "postcode": "SO22 5PU",
                        "street":   "2 Long Road",
                    },
                    "id":   "10001",
                    "name": "Joe Doe",
                },
                map[string]interface {}{
                    "address": map[string]interface {}{
                        "city":     "Winchester",
                        "postcode": "SO22 4WD",
                        "street":   "56 Letsby Avenue",
                    },
                    "id":   "10002",
                    "name": "Fred Bloggs",
                },
                map[string]interface {}{
                    "address": map[string]interface {}{
                        "city":     "Southampton",
                        "postcode": "SO14 0MG",
                        "street":   "1 Preddy Gate",
                    },
                    "id":   "10003",
                    "name": "Jason Arthur",
                },
            },
            "loans": []interface {}{
                map[string]interface {}{
                    "customer": "10001",
                    "isbn":     "9780262510875",
                    "return":   "2016-12-05",
                },
                map[string]interface {}{
                    "customer": "10003",
                    "isbn":     "9780201100884",
                    "return":   "2016-10-22",
                },
                map[string]interface {}{
                    "customer": "10003",
                    "isbn":     "9780262510875",
                    "return":   "2016-12-22",
                },
            },
        },
    },
    Dataset:     "library",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "library.loans@$L.books@$B[$L.isbn=$B.isbn].customers@$C[$C.id=$L.customer].{ 'book': $B.title, 'customer': $C.name, 'grandparent': $keys(%.%) }",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        map[string]interface {}{
            "book":        "Structure and Interpretation of Computer Programs",
            "customer":    "Joe Doe",
            "grandparent": "library",
        },
        map[string]interface {}{
            "book":        "Compilers: Principles, Techniques, and Tools",
            "customer":    "Jason Arthur",
            "grandparent": "library",
        },
        map[string]interface {}{
            "book":        "Structure and Interpretation of Computer Programs",
            "customer":    "Jason Arthur",
            "grandparent": "library",
        },
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/parentheses/case000.json
	--- .../groups/parentheses/case001.json
	--- .../groups/parentheses/case002.json
	--- .../groups/parentheses/case003.json
	--- .../groups/parentheses/case004.json
	--- .../groups/parentheses/case005.json
	--- .../groups/parentheses/case006.json
	--- .../groups/parentheses/case007.json
	--- .../groups/partial-application/case000.json
	--- .../groups/partial-application/case001.json
	--- .../groups/partial-application/case002.json
	--- .../groups/partial-application/case003.json
	--- .../groups/partial-application/case004.json
	--- .../groups/predicates/case000.json
	--- .../groups/predicates/case001.json
	--- .../groups/predicates/case002.json
	--- .../groups/predicates/case003.json
	--- .../groups/quoted-selectors/case000.json
/home/peter/talen/jsonata/tests.go:113: invalid path step "blah": paths cannot contain nulls, strings, numbers or booleans, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "bar": float64(98),
        "foo": map[string]interface {}{
            "bar":  float64(42),
            "blah": []interface {}{
                map[string]interface {}{
                    "baz": map[string]interface {}{
                        "fud": "hello",
                    },
                },
                map[string]interface {}{
                    "baz": map[string]interface {}{
                        "fud": "world",
                    },
                },
                map[string]interface {}{
                    "bazz": "gotcha",
                },
            },
            "blah.baz": "here",
        },
    },
    Dataset:     "dataset0",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "foo.\"blah\"",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        map[string]interface {}{
            "baz": map[string]interface {}{
                "fud": "hello",
            },
        },
        map[string]interface {}{
            "baz": map[string]interface {}{
                "fud": "world",
            },
        },
        map[string]interface {}{
            "bazz": "gotcha",
        },
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/quoted-selectors/case001.json
/home/peter/talen/jsonata/tests.go:113: invalid path step "blah": paths cannot contain nulls, strings, numbers or booleans, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "bar": float64(98),
        "foo": map[string]interface {}{
            "bar":  float64(42),
            "blah": []interface {}{
                map[string]interface {}{
                    "baz": map[string]interface {}{
                        "fud": "hello",
                    },
                },
                map[string]interface {}{
                    "baz": map[string]interface {}{
                        "fud": "world",
                    },
                },
                map[string]interface {}{
                    "bazz": "gotcha",
                },
            },
            "blah.baz": "here",
        },
    },
    Dataset:     "dataset0",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "foo.\"blah\".baz.'fud'",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        "hello",
        "world",
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/quoted-selectors/case002.json
/home/peter/talen/jsonata/tests.go:113: invalid path step "foo": paths cannot contain nulls, strings, numbers or booleans, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "bar": float64(98),
        "foo": map[string]interface {}{
            "bar":  float64(42),
            "blah": []interface {}{
                map[string]interface {}{
                    "baz": map[string]interface {}{
                        "fud": "hello",
                    },
                },
                map[string]interface {}{
                    "baz": map[string]interface {}{
                        "fud": "world",
                    },
                },
                map[string]interface {}{
                    "bazz": "gotcha",
                },
            },
            "blah.baz": "here",
        },
    },
    Dataset:     "dataset0",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "\"foo\".\"blah\".\"baz\".\"fud\"",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        "hello",
        "world",
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/quoted-selectors/case003.json
/home/peter/talen/jsonata/tests.go:113: invalid path step "blah.baz": paths cannot contain nulls, strings, numbers or booleans, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "bar": float64(98),
        "foo": map[string]interface {}{
            "bar":  float64(42),
            "blah": []interface {}{
                map[string]interface {}{
                    "baz": map[string]interface {}{
                        "fud": "hello",
                    },
                },
                map[string]interface {}{
                    "baz": map[string]interface {}{
                        "fud": "world",
                    },
                },
                map[string]interface {}{
                    "bazz": "gotcha",
                },
            },
            "blah.baz": "here",
        },
    },
    Dataset:         "dataset0",
    Depth:           0,
    Description:     "",
    Error:           nil,
    Expr:            "foo.\"blah.baz\"",
    ExprFile:        "",
    Function:        "",
    Result:          "here",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/quoted-selectors/case004.json
	--- .../groups/quoted-selectors/case005.json
/home/peter/talen/jsonata/tests.go:113: invalid path step "fud": paths cannot contain nulls, strings, numbers or booleans, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "bar": float64(98),
        "foo": map[string]interface {}{
            "bar":  float64(42),
            "blah": []interface {}{
                map[string]interface {}{
                    "baz": map[string]interface {}{
                        "fud": "hello",
                    },
                },
                map[string]interface {}{
                    "baz": map[string]interface {}{
                        "fud": "world",
                    },
                },
                map[string]interface {}{
                    "bazz": "gotcha",
                },
            },
            "blah.baz": "here",
        },
    },
    Dataset:     "dataset0",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "foo.`blah`.baz.'fud'",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        "hello",
        "world",
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/quoted-selectors/case006.json
	--- .../groups/quoted-selectors/case007.json
	--- .../groups/range-operator/case000.json
	--- .../groups/range-operator/case001.json
	--- .../groups/range-operator/case002.json
	--- .../groups/range-operator/case003.json
	--- .../groups/range-operator/case004.json
	--- .../groups/range-operator/case005.json
	--- .../groups/range-operator/case006.json
	--- .../groups/range-operator/case007.json
	--- .../groups/range-operator/case008.json
	--- .../groups/range-operator/case009.json
	--- .../groups/range-operator/case010.json
	--- .../groups/range-operator/case011.json
	--- .../groups/range-operator/case012.json
	--- .../groups/range-operator/case013.json
	--- .../groups/range-operator/case014.json
	--- .../groups/range-operator/case015.json
	--- .../groups/range-operator/case016.json
	--- .../groups/range-operator/case017.json
	--- .../groups/range-operator/case018.json
	--- .../groups/range-operator/case019.json
	--- .../groups/range-operator/case020.json
	--- .../groups/range-operator/case021.json
	--- .../groups/range-operator/case022.json
	--- .../groups/range-operator/case023.json
	--- .../groups/range-operator/case024.json
	--- .../groups/regex/case000.json
	--- .../groups/regex/case001.json
	--- .../groups/regex/case002.json
	--- .../groups/regex/case003.json
	--- .../groups/regex/case004.json
	--- .../groups/regex/case005.json
/home/peter/talen/jsonata/tests.go:113: invalid path step "Product Name": paths cannot contain nulls, strings, numbers or booleans, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:         "dataset5",
    Depth:           0,
    Description:     "",
    Error:           nil,
    Expr:            "Account.Order.Product[$contains($.\"Product Name\", /hat/)].ProductID",
    ExprFile:        "",
    Function:        "",
    Result:          float64(858236),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/regex/case006.json
/home/peter/talen/jsonata/tests.go:113: invalid path step "Product Name": paths cannot contain nulls, strings, numbers or booleans, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:     "dataset5",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "Account.Order.Product[$contains($.\"Product Name\", /hat/i)].ProductID",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        float64(858383),
        float64(858236),
        float64(858383),
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/regex/case007.json
	--- .../groups/regex/case008.json
	--- .../groups/regex/case009.json
	--- .../groups/regex/case010.json
	--- .../groups/regex/case011.json
	--- .../groups/regex/case012.json
	--- .../groups/regex/case013.json
	--- .../groups/regex/case014.json
	--- .../groups/regex/case015.json
	--- .../groups/regex/case016.json
	--- .../groups/regex/case017.json
	--- .../groups/regex/case018.json
	--- .../groups/regex/case019.json
	--- .../groups/regex/case020.json
	--- .../groups/regex/case021.json
	--- .../groups/regex/case022.json
/home/peter/talen/jsonata/tests.go:123: Expected error D1004, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category:        "",
    Code:            "D1004",
    Data:            nil,
    Dataset:         "",
    Depth:           0,
    Description:     "",
    Error:           nil,
    Expr:            "$replace(\"abracadabra\", /.*?/, \"$1\")",
    ExprFile:        "",
    Function:        "",
    Result:          nil,
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/regex/case023.json
	--- .../groups/regex/case024.json
	--- .../groups/regex/case025.json
	--- .../groups/regex/case026.json
	--- .../groups/regex/case027.json
	--- .../groups/regex/case028.json
	--- .../groups/regex/case029.json
	--- .../groups/regex/case030.json
	--- .../groups/regex/case031.json
	--- .../groups/regex/case032.json
/home/peter/talen/jsonata/tests.go:113: invalid path step "Product Name": paths cannot contain nulls, strings, numbers or booleans, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:     "dataset5",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "Account.Order.Product.$replace($.\"Product Name\", /hat/i, function($match) { \"foo\" })",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        "Bowler foo",
        "Trilby foo",
        "Bowler foo",
        "Cloak",
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/regex/case033.json
/home/peter/talen/jsonata/tests.go:113: invalid path step "Product Name": paths cannot contain nulls, strings, numbers or booleans, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:     "dataset5",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "Account.Order.Product.$replace($.\"Product Name\", /(h)(at)/i, function($match) { $uppercase($match.match) })",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        "Bowler HAT",
        "Trilby HAT",
        "Bowler HAT",
        "Cloak",
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/regex/case034.json
	--- .../groups/regex/case035.json
	--- .../groups/regex/case036.json
	--- .../groups/regex/case037.json
	--- .../groups/regex/case038.json
	--- .../groups/simple-array-selectors/case000.json
	--- .../groups/simple-array-selectors/case001.json
	--- .../groups/simple-array-selectors/case002.json
	--- .../groups/simple-array-selectors/case003.json
	--- .../groups/simple-array-selectors/case004.json
	--- .../groups/simple-array-selectors/case005.json
	--- .../groups/simple-array-selectors/case006.json
	--- .../groups/simple-array-selectors/case007.json
	--- .../groups/simple-array-selectors/case008.json
	--- .../groups/simple-array-selectors/case009.json
	--- .../groups/simple-array-selectors/case010.json
	--- .../groups/simple-array-selectors/case011.json
	--- .../groups/simple-array-selectors/case012.json
	--- .../groups/simple-array-selectors/case013.json
	--- .../groups/simple-array-selectors/case014.json
	--- .../groups/simple-array-selectors/case015.json
	--- .../groups/simple-array-selectors/case016.json
	--- .../groups/simple-array-selectors/case017.json
	--- .../groups/simple-array-selectors/case018.json
	--- .../groups/simple-array-selectors/case019.json
	--- .../groups/simple-array-selectors/case020.json
	--- .../groups/simple-array-selectors/case021.json
	--- .../groups/simple-array-selectors/case022.json
	--- .../groups/sorting/case000.json
	--- .../groups/sorting/case001.json
	--- .../groups/sorting/case002.json
	--- .../groups/sorting/case003.json
	--- .../groups/sorting/case004.json
	--- .../groups/sorting/case005.json
	--- .../groups/sorting/case006.json
	--- .../groups/sorting/case007.json
	--- .../groups/sorting/case008.json
	--- .../groups/sorting/case009.json
	--- .../groups/sorting/case010.json
	--- .../groups/sorting/case011.json
	--- .../groups/sorting/case012.json
	--- .../groups/sorting/case013.json
/home/peter/talen/jsonata/tests.go:123: Expected error T2008, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "T2008",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        nil,
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:         "dataset17",
    Depth:           0,
    Description:     "",
    Error:           nil,
    Expr:            "Account.Order.Product^(Price).SKU",
    ExprFile:        "",
    Function:        "",
    Result:          nil,
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/sorting/case014.json
EXPECTED:
[
  "Sally",
  "Bill",
  "Jim"
]
GOT:
[
  "Bill",
  "Sally",
  "Jim"
]
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     []interface {}{
        map[string]interface {}{
            "age":  float64(35),
            "name": "Bill",
        },
        map[string]interface {}{
            "age":  float64(33),
            "name": "Sally",
        },
        map[string]interface {}{
            "age":  float64(42),
            "name": "Jim",
        },
    },
    Dataset:     "",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "$^(age).name",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        "Sally",
        "Bill",
        "Jim",
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/sorting/case015.json
EXPECTED:
[
  "Sally",
  "Bill",
  "Jim"
]
GOT:
[
  "Bill",
  "Sally",
  "Jim"
]
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     []interface {}{
        map[string]interface {}{
            "age":  float64(35),
            "name": "Bill",
        },
        map[string]interface {}{
            "age":  float64(33),
            "name": "Sally",
        },
        map[string]interface {}{
            "age":  float64(42),
            "name": "Jim",
        },
    },
    Dataset:     "",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "($^(age)).name",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        "Sally",
        "Bill",
        "Jim",
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/sorting/case016.json
EXPECTED:
"Sally"
GOT:
[
  "Bill",
  "Sally",
  "Jim"
]
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     []interface {}{
        map[string]interface {}{
            "age":  float64(35),
            "name": "Bill",
        },
        map[string]interface {}{
            "age":  float64(33),
            "name": "Sally",
        },
        map[string]interface {}{
            "age":  float64(42),
            "name": "Jim",
        },
    },
    Dataset:         "",
    Depth:           0,
    Description:     "",
    Error:           nil,
    Expr:            "$^(age)[0].name",
    ExprFile:        "",
    Function:        "",
    Result:          "Sally",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/sorting/case017.json
EXPECTED:
"Sally"
GOT:
[
  "Bill",
  "Sally",
  "Jim"
]
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     []interface {}{
        map[string]interface {}{
            "age":  float64(35),
            "name": "Bill",
        },
        map[string]interface {}{
            "age":  float64(33),
            "name": "Sally",
        },
        map[string]interface {}{
            "age":  float64(42),
            "name": "Jim",
        },
    },
    Dataset:         "",
    Depth:           0,
    Description:     "",
    Error:           nil,
    Expr:            "($^(age))[0].name",
    ExprFile:        "",
    Function:        "",
    Result:          "Sally",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/sorting/case018.json
EXPECTED:
"Sally"
GOT:
[
  "Bill",
  "Sally",
  "Jim"
]
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     []interface {}{
        map[string]interface {}{
            "age":  float64(35),
            "name": "Bill",
        },
        map[string]interface {}{
            "age":  float64(33),
            "name": "Sally",
        },
        map[string]interface {}{
            "age":  float64(42),
            "name": "Jim",
        },
    },
    Dataset:         "",
    Depth:           0,
    Description:     "",
    Error:           nil,
    Expr:            "($^(age)[0]).name",
    ExprFile:        "",
    Function:        "",
    Result:          "Sally",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/sorting/case019.json
	--- .../groups/sorting/case020.json
/home/peter/talen/jsonata/tests.go:145: no results found, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:     "dataset5",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "Account.Order#$o.Product^(ProductID).{ 'Product': `Product Name`, 'Order Index': $o }",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        map[string]interface {}{
            "Order Index": float64(1),
            "Product":     "Cloak",
        },
        map[string]interface {}{
            "Order Index": float64(0),
            "Product":     "Trilby hat",
        },
        map[string]interface {}{
            "Order Index": float64(0),
            "Product":     "Bowler Hat",
        },
        map[string]interface {}{
            "Order Index": float64(1),
            "Product":     "Bowler Hat",
        },
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/string-concat/case000.json
	--- .../groups/string-concat/case001.json
	--- .../groups/string-concat/case002.json
	--- .../groups/string-concat/case003.json
	--- .../groups/string-concat/case004.json
	--- .../groups/string-concat/case005.json
	--- .../groups/string-concat/case006.json
	--- .../groups/string-concat/case007.json
	--- .../groups/string-concat/case008.json
	--- .../groups/string-concat/case009.json
	--- .../groups/string-concat/case010.json
	--- .../groups/string-concat/case011.json
	--- .../groups/tail-recursion/case000.json
	--- .../groups/tail-recursion/case001.json
	--- .../groups/tail-recursion/case002.json
/home/peter/talen/jsonata/tests.go:105: Skipping test
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category:        "",
    Code:            "U1001",
    Data:            nil,
    Dataset:         "",
    Depth:           302,
    Description:     "",
    Error:           nil,
    Expr:            "(  $factorial := function($n){$n = 0 ? 1 : $n * $factorial($n - 1)};  $factorial(100))             ",
    ExprFile:        "",
    Function:        "",
    Result:          nil,
    Timelimit:       1000,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/tail-recursion/case003.json
	--- .../groups/tail-recursion/case004.json
	--- .../groups/tail-recursion/case005.json
/home/peter/talen/jsonata/tests.go:105: Skipping test
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category:        "",
    Code:            "U1001",
    Data:            nil,
    Dataset:         "",
    Depth:           300,
    Description:     "",
    Error:           nil,
    Expr:            "(  $inf := function($n){$n+$inf($n-1)};  $inf(5))",
    ExprFile:        "",
    Function:        "",
    Result:          nil,
    Timelimit:       1000,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/tail-recursion/case006.json
/home/peter/talen/jsonata/tests.go:105: Skipping test
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category:        "",
    Code:            "U1001",
    Data:            nil,
    Dataset:         "",
    Depth:           500,
    Description:     "",
    Error:           nil,
    Expr:            "(  $inf := function(){$inf()};  $inf())",
    ExprFile:        "",
    Function:        "",
    Result:          nil,
    Timelimit:       1000,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/tail-recursion/case007.json
	--- .../groups/tail-recursion/case008.json
	--- .../groups/tail-recursion/case009.json
/home/peter/talen/jsonata/tests.go:105: Skipping test
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category:        "",
    Code:            "T0410",
    Data:            nil,
    Dataset:         "",
    Depth:           500,
    Description:     "",
    Error:           nil,
    Expr:            "($f := function($s, $x)<sn:s> { $x > 0 ? $f([$s, $s], $x-1) : $s};  $f('a', 2)  )",
    ExprFile:        "",
    Function:        "",
    Result:          nil,
    Timelimit:       1000,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/token-conversion/case000.json
/home/peter/talen/jsonata/tests.go:113: invalid path step "7a": paths cannot contain nulls, strings, numbers or booleans, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "7":  float64(88),
        "7a": float64(33),
        "a7": float64(55),
    },
    Dataset:         "",
    Depth:           0,
    Description:     "",
    Error:           nil,
    Expr:            "$.'7a'",
    ExprFile:        "",
    Function:        "",
    Result:          float64(33),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/token-conversion/case001.json
/home/peter/talen/jsonata/tests.go:113: invalid path step "7": paths cannot contain nulls, strings, numbers or booleans, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "7":  float64(88),
        "7a": float64(33),
        "a7": float64(55),
    },
    Dataset:         "",
    Depth:           0,
    Description:     "",
    Error:           nil,
    Expr:            "$.'7'",
    ExprFile:        "",
    Function:        "",
    Result:          float64(88),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/token-conversion/case002.json
	--- .../groups/token-conversion/case003.json
	--- .../groups/transform/case000.json
	--- .../groups/transform/case001.json
	--- .../groups/transform/case002.json
	--- .../groups/transform/case003.json
	--- .../groups/transform/case004.json
	--- .../groups/transform/case005.json
	--- .../groups/transform/case006.json
	--- .../groups/transform/case007.json
	--- .../groups/transform/case008.json
	--- .../groups/transform/case009.json
	--- .../groups/transform/case010.json
	--- .../groups/transform/case011.json
	--- .../groups/transform/case012.json
	--- .../groups/transform/case013.json
	--- .../groups/transform/case014.json
	--- .../groups/transform/case015.json
	--- .../groups/transform/case016.json
	--- .../groups/transform/case017.json
	--- .../groups/transform/case018.json
	--- .../groups/transform/case019.json
/home/peter/talen/jsonata/tests.go:145: no results found, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category:        "",
    Code:            "",
    Data:            nil,
    Dataset:         "",
    Depth:           0,
    Description:     "",
    Error:           nil,
    Expr:            "$",
    ExprFile:        "",
    Function:        "",
    Result:          nil,
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/transform/case020.json
/home/peter/talen/jsonata/tests.go:145: no results found, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "bar": nil,
    },
    Dataset:         "",
    Depth:           0,
    Description:     "",
    Error:           nil,
    Expr:            "bar",
    ExprFile:        "",
    Function:        "",
    Result:          nil,
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/transform/case021.json
	--- .../groups/transform/case022.json
	--- .../groups/transform/case023.json
	--- .../groups/transform/case024.json
	--- .../groups/transform/case025.json
	--- .../groups/transform/case026.json
	--- .../groups/transform/case027.json
	--- .../groups/transform/case028.json
	--- .../groups/transform/case029.json
	--- .../groups/transform/case030.json
/home/peter/talen/jsonata/tests.go:113: invalid path step "NI.Number": paths cannot contain nulls, strings, numbers or booleans, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Cars":       float64(3),
        "Employment": map[string]interface {}{
            "ContractType":           "permanent",
            "Executive.Compensation": float64(1.4e+06),
            "Name":                   "IBM UK",
            "Role":                   "Senior Physician",
            "Years":                  float64(12),
        },
        "Español":        "/ˈspænɪʃ/",
        "MiddleName":     "John",
        "NI.Number":      "NO10FURBZNESS",
        "Name":           "Alexander",
        "Qualifications": []interface {}{
            "GP",
            "Consultant Opthalmologist",
        },
        "Salary":     nil,
        "Salutation": "Mr",
        "Surname":    "Smith",
        "敷":          "Steve",
    },
    Dataset:         "dataset21",
    Depth:           0,
    Description:     "",
    Error:           nil,
    Expr:            "$lowercase($.\"NI.Number\")",
    ExprFile:        "",
    Function:        "",
    Result:          "no10furbzness",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/transform/case031.json
/home/peter/talen/jsonata/tests.go:113: invalid path step "Executive.Compensation": paths cannot contain nulls, strings, numbers or booleans, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Cars":       float64(3),
        "Employment": map[string]interface {}{
            "ContractType":           "permanent",
            "Executive.Compensation": float64(1.4e+06),
            "Name":                   "IBM UK",
            "Role":                   "Senior Physician",
            "Years":                  float64(12),
        },
        "Español":        "/ˈspænɪʃ/",
        "MiddleName":     "John",
        "NI.Number":      "NO10FURBZNESS",
        "Name":           "Alexander",
        "Qualifications": []interface {}{
            "GP",
            "Consultant Opthalmologist",
        },
        "Salary":     nil,
        "Salutation": "Mr",
        "Surname":    "Smith",
        "敷":          "Steve",
    },
    Dataset:         "dataset21",
    Depth:           0,
    Description:     "",
    Error:           nil,
    Expr:            "$lowercase(\"COMPENSATION IS : \" & Employment.\"Executive.Compensation\")",
    ExprFile:        "",
    Function:        "",
    Result:          "compensation is : 1400000",
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/transform/case032.json
	--- .../groups/transform/case033.json
	--- .../groups/transform/case034.json
	--- .../groups/transform/case035.json
	--- .../groups/transform/case036.json
	--- .../groups/transform/case037.json
	--- .../groups/transform/case038.json
	--- .../groups/transform/case039.json
	--- .../groups/transform/case040.json
	--- .../groups/transform/case041.json
	--- .../groups/transform/case042.json
	--- .../groups/transform/case043.json
	--- .../groups/transform/case044.json
	--- .../groups/transform/case045.json
	--- .../groups/transform/case046.json
	--- .../groups/transform/case047.json
	--- .../groups/transform/case048.json
	--- .../groups/transform/case049.json
	--- .../groups/transform/case050.json
	--- .../groups/transform/case051.json
	--- .../groups/transform/case052.json
	--- .../groups/transform/case053.json
	--- .../groups/transform/case054.json
	--- .../groups/transform/case055.json
	--- .../groups/transform/case056.json
	--- .../groups/transform/case057.json
	--- .../groups/transform/case058.json
	--- .../groups/transform/case059.json
	--- .../groups/transform/case060.json
	--- .../groups/transform/case061.json
	--- .../groups/transform/case062.json
	--- .../groups/transform/case063.json
	--- .../groups/transform/case064.json
	--- .../groups/transform/case065.json
	--- .../groups/transform/case066.json
	--- .../groups/transform/case067.json
	--- .../groups/transform/case068.json
	--- .../groups/transform/case069.json
	--- .../groups/transform/case070.json
	--- .../groups/transform/case071.json
	--- .../groups/transform/case072.json
	--- .../groups/transform/case073.json
	--- .../groups/transform/case074.json
	--- .../groups/transform/case075.json
	--- .../groups/transform/case076.json
	--- .../groups/transform/case077.json
	--- .../groups/transform/case078.json
	--- .../groups/transform/case079.json
	--- .../groups/transform/case080.json
	--- .../groups/transform/case081.json
	--- .../groups/transform/case082.json
	--- .../groups/transform/case083.json
	--- .../groups/transform/case084.json
	--- .../groups/transform/case085.json
	--- .../groups/transform/case086.json
	--- .../groups/transform/case087.json
	--- .../groups/transform/case088.json
	--- .../groups/transform/case089.json
	--- .../groups/transform/case090.json
	--- .../groups/transform/case091.json
	--- .../groups/transform/case092.json
	--- .../groups/transform/case093.json
	--- .../groups/transform/case094.json
	--- .../groups/transform/case095.json
	--- .../groups/transform/case096.json
	--- .../groups/transform/case097.json
	--- .../groups/transform/case098.json
	--- .../groups/transform/case099.json
	--- .../groups/transform/case100.json
	--- .../groups/transform/case101.json
	--- .../groups/transform/case102.json
	--- .../groups/transform/case103.json
	--- .../groups/transforms/case000.json
	--- .../groups/transforms/case001.json
	--- .../groups/transforms/case002.json
	--- .../groups/transforms/case003.json
	--- .../groups/transforms/case004.json
	--- .../groups/transforms/case005.json
	--- .../groups/transforms/case006.json
	--- .../groups/transforms/case007.json
	--- .../groups/transforms/case008.json
	--- .../groups/transforms/case009.json
	--- .../groups/transforms/case010.json
	--- .../groups/transforms/case011.json
	--- .../groups/transforms/case012.json
	--- .../groups/transforms/case013.json
	--- .../groups/transforms/case014.json
	--- .../groups/variables/case000.json
/home/peter/talen/jsonata/tests.go:145: no results found, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
        "price": map[string]interface {}{
            "foo": map[string]interface {}{
                "bar": float64(45),
            },
        },
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:         "dataset5",
    Depth:           0,
    Description:     "",
    Error:           nil,
    Expr:            "$price.foo.bar",
    ExprFile:        "",
    Function:        "",
    Result:          float64(45),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/variables/case001.json
/home/peter/talen/jsonata/tests.go:145: no results found, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
        "price": map[string]interface {}{
            "foo": map[string]interface {}{
                "bar": float64(45),
            },
        },
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:         "dataset5",
    Depth:           0,
    Description:     "",
    Error:           nil,
    Expr:            "$price.foo.bar",
    ExprFile:        "",
    Function:        "",
    Result:          float64(45),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/variables/case002.json
/home/peter/talen/jsonata/tests.go:145: no results found, (eval)
&main.TestT{
    Bindings: map[string]interface {}{
        "var": []interface {}{
            float64(1),
            float64(2),
            float64(3),
        },
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:         "dataset5",
    Depth:           0,
    Description:     "",
    Error:           nil,
    Expr:            "$var[1]",
    ExprFile:        "",
    Function:        "",
    Result:          float64(2),
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/variables/case003.json
	--- .../groups/variables/case004.json
	--- .../groups/variables/case005.json
	--- .../groups/variables/case006.json
	--- .../groups/variables/case007.json
	--- .../groups/variables/case008.json
	--- .../groups/variables/case009.json
	--- .../groups/variables/case010.json
	--- .../groups/variables/case011.json
	--- .../groups/variables/case012.json
	--- .../groups/wildcards/case000.json
	--- .../groups/wildcards/case001.json
	--- .../groups/wildcards/case002.json
	--- .../groups/wildcards/case003.json
	--- .../groups/wildcards/case004.json
	--- .../groups/wildcards/case005.json
	--- .../groups/wildcards/case006.json
	--- .../groups/wildcards/case007.json
/home/peter/talen/jsonata/tests.go:113: invalid path step "Account Name": paths cannot contain nulls, strings, numbers or booleans, (compile)
&main.TestT{
    Bindings: map[string]interface {}{
    },
    Category: "",
    Code:     "",
    Data:     map[string]interface {}{
        "Account": map[string]interface {}{
            "Account Name": "Firefly",
            "Order":        []interface {}{
                map[string]interface {}{
                    "OrderID": "order103",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(2),
                            "SKU":          "0406654608",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Orange",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.6),
                                "Width":  float64(300),
                            },
                            "Price":        float64(21.67),
                            "Product Name": "Trilby hat",
                            "ProductID":    float64(858236),
                            "Quantity":     float64(1),
                            "SKU":          "0406634348",
                        },
                    },
                },
                map[string]interface {}{
                    "OrderID": "order104",
                    "Product": []interface {}{
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Purple",
                                "Depth":  float64(210),
                                "Height": float64(200),
                                "Weight": float64(0.75),
                                "Width":  float64(300),
                            },
                            "Price":        float64(34.45),
                            "Product Name": "Bowler Hat",
                            "ProductID":    float64(858383),
                            "Quantity":     float64(4),
                            "SKU":          "040657863",
                        },
                        map[string]interface {}{
                            "Description": map[string]interface {}{
                                "Colour": "Black",
                                "Depth":  float64(210),
                                "Height": float64(20),
                                "Weight": float64(2),
                                "Width":  float64(30),
                            },
                            "Price":        float64(107.99),
                            "Product Name": "Cloak",
                            "ProductID":    float64(345664),
                            "Quantity":     float64(1),
                            "SKU":          "0406654603",
                        },
                    },
                },
            },
        },
    },
    Dataset:     "dataset5",
    Depth:       0,
    Description: "",
    Error:       nil,
    Expr:        "Account[$$.Account.\"Account Name\" = \"Firefly\"].*[OrderID=\"order104\"].Product.Price",
    ExprFile:    "",
    Function:    "",
    Result:      []interface {}{
        float64(34.45),
        float64(107.99),
    },
    Timelimit:       0,
    Token:           "",
    UndefinedResult: false,
    Unordered:       false,
}
	--- .../groups/wildcards/case008.json
	--- .../groups/wildcards/case009.json
